
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a024  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800a1e8  0800a1e8  0000b1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e0  0800a6e0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e0  0800a6e0  0000b6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6e8  0800a6e8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0000b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0000b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a6f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001d8  0800a8c8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800a8c8  0000c59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012392  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026dc  00000000  00000000  0001e59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00020c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b73  00000000  00000000  00021b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b631  00000000  00000000  000226c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013154  00000000  00000000  0004dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d3b  00000000  00000000  00060e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052dc  00000000  00000000  00165bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016aea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a1cc 	.word	0x0800a1cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	0800a1cc 	.word	0x0800a1cc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4804      	ldr	r0, [pc, #16]	@ (800103c <_write+0x28>)
 800102c:	f003 fe3e 	bl	8004cac <HAL_UART_Transmit>
	return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000248 	.word	0x20000248

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f001 f80a 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f8ff 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f9db 	bl	8001408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001052:	f000 f98d 	bl	8001370 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001056:	f000 f94b 	bl	80012f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lastBeat = HAL_GetTick();
 800105a:	f001 f869 	bl	8002130 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	4a6d      	ldr	r2, [pc, #436]	@ (8001218 <main+0x1d8>)
 8001062:	6013      	str	r3, [r2, #0]
  beatsPerMinute = 0;
 8001064:	4b6d      	ldr	r3, [pc, #436]	@ (800121c <main+0x1dc>)
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < RATE_SIZE; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	77fb      	strb	r3, [r7, #31]
 8001070:	e006      	b.n	8001080 <main+0x40>
      rates[i] = 0;
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	4a6a      	ldr	r2, [pc, #424]	@ (8001220 <main+0x1e0>)
 8001076:	2100      	movs	r1, #0
 8001078:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < RATE_SIZE; i++) {
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	3301      	adds	r3, #1
 800107e:	77fb      	strb	r3, [r7, #31]
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d9f5      	bls.n	8001072 <main+0x32>
  }
  rateSpot = 0;
 8001086:	4b67      	ldr	r3, [pc, #412]	@ (8001224 <main+0x1e4>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
  beatAvg = 0;
 800108c:	4b66      	ldr	r3, [pc, #408]	@ (8001228 <main+0x1e8>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
  // Initialize sensor
  max30102_init(&max30102, &hi2c1);
 8001092:	4966      	ldr	r1, [pc, #408]	@ (800122c <main+0x1ec>)
 8001094:	4866      	ldr	r0, [pc, #408]	@ (8001230 <main+0x1f0>)
 8001096:	f000 fa0a 	bl	80014ae <max30102_init>


  // Reset sensor and clear FIFO
  max30102_reset(&max30102);
 800109a:	4865      	ldr	r0, [pc, #404]	@ (8001230 <main+0x1f0>)
 800109c:	f000 fa7e 	bl	800159c <max30102_reset>
  max30102_clear_fifo(&max30102);
 80010a0:	4863      	ldr	r0, [pc, #396]	@ (8001230 <main+0x1f0>)
 80010a2:	f000 fc0f 	bl	80018c4 <max30102_clear_fifo>

  // Configure FIFO settings
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 80010a6:	2307      	movs	r3, #7
 80010a8:	2201      	movs	r2, #1
 80010aa:	2103      	movs	r1, #3
 80010ac:	4860      	ldr	r0, [pc, #384]	@ (8001230 <main+0x1f0>)
 80010ae:	f000 fbcf 	bl	8001850 <max30102_set_fifo_config>

  // Configure LED settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80010b2:	2101      	movs	r1, #1
 80010b4:	485e      	ldr	r0, [pc, #376]	@ (8001230 <main+0x1f0>)
 80010b6:	f000 fb32 	bl	800171e <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80010ba:	2100      	movs	r1, #0
 80010bc:	485c      	ldr	r0, [pc, #368]	@ (8001230 <main+0x1f0>)
 80010be:	f000 fb51 	bl	8001764 <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80010c2:	2104      	movs	r1, #4
 80010c4:	485a      	ldr	r0, [pc, #360]	@ (8001230 <main+0x1f0>)
 80010c6:	f000 fb06 	bl	80016d6 <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 80010ca:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8001234 <main+0x1f4>
 80010ce:	4858      	ldr	r0, [pc, #352]	@ (8001230 <main+0x1f0>)
 80010d0:	f000 fb6e 	bl	80017b0 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 80010d4:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001234 <main+0x1f4>
 80010d8:	4855      	ldr	r0, [pc, #340]	@ (8001230 <main+0x1f0>)
 80010da:	f000 fb91 	bl	8001800 <max30102_set_led_current_2>

  // Enter SpO2 measurement mode
  max30102_set_mode(&max30102, max30102_heart_rate);
 80010de:	2102      	movs	r1, #2
 80010e0:	4853      	ldr	r0, [pc, #332]	@ (8001230 <main+0x1f0>)
 80010e2:	f000 fad2 	bl	800168a <max30102_set_mode>

  // Enable interrupts
  max30102_set_a_full(&max30102, 1);
 80010e6:	2101      	movs	r1, #1
 80010e8:	4851      	ldr	r0, [pc, #324]	@ (8001230 <main+0x1f0>)
 80010ea:	f000 fa68 	bl	80015be <max30102_set_a_full>
  max30102_set_die_temp_en(&max30102, 1);
 80010ee:	2101      	movs	r1, #1
 80010f0:	484f      	ldr	r0, [pc, #316]	@ (8001230 <main+0x1f0>)
 80010f2:	f000 faa4 	bl	800163e <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	484d      	ldr	r0, [pc, #308]	@ (8001230 <main+0x1f0>)
 80010fa:	f000 fa88 	bl	800160e <max30102_set_die_temp_rdy>

  printf("MAX30102 initialized and configured\r\n");
 80010fe:	484e      	ldr	r0, [pc, #312]	@ (8001238 <main+0x1f8>)
 8001100:	f005 fcd4 	bl	8006aac <puts>

	  // Process the interrupt
	      //max30102_interrupt_handler(&max30102);

	      // Read data from FIFO
	      max30102_read_fifo(&max30102);
 8001104:	484a      	ldr	r0, [pc, #296]	@ (8001230 <main+0x1f0>)
 8001106:	f000 fbfc 	bl	8001902 <max30102_read_fifo>

	      // Access the data from the max30102 object
	      // The first sample in each array is the most recent
	      uint32_t ir_sample = max30102._ir_samples[0];
 800110a:	4b49      	ldr	r3, [pc, #292]	@ (8001230 <main+0x1f0>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
	      uint32_t red_sample = max30102._red_samples[0];
 8001110:	4b47      	ldr	r3, [pc, #284]	@ (8001230 <main+0x1f0>)
 8001112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001116:	617b      	str	r3, [r7, #20]

	      // Check for heartbeat

	      if (checkForBeat(ir_sample) == true)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fc56 	bl	80019cc <checkForBeat>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0ee      	beq.n	8001104 <main+0xc4>
	      {
	          // We sensed a beat!
	          uint32_t currentTime = HAL_GetTick();
 8001126:	f001 f803 	bl	8002130 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]
	          uint32_t delta = currentTime - lastBeat;
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <main+0x1d8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	60fb      	str	r3, [r7, #12]
	          lastBeat = currentTime;
 8001136:	4a38      	ldr	r2, [pc, #224]	@ (8001218 <main+0x1d8>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	6013      	str	r3, [r2, #0]

	          beatsPerMinute = 60 / (delta / 1000.0);
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff f9f9 	bl	8000534 <__aeabi_ui2d>
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <main+0x1fc>)
 8001148:	f7ff fb98 	bl	800087c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	493a      	ldr	r1, [pc, #232]	@ (8001240 <main+0x200>)
 8001156:	f7ff fb91 	bl	800087c <__aeabi_ddiv>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fd59 	bl	8000c18 <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4a2c      	ldr	r2, [pc, #176]	@ (800121c <main+0x1dc>)
 800116a:	6013      	str	r3, [r2, #0]

	          if (beatsPerMinute < 255 && beatsPerMinute > 20)
 800116c:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <main+0x1dc>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001244 <main+0x204>
 8001176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d54a      	bpl.n	8001216 <main+0x1d6>
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <main+0x1dc>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800118a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dd40      	ble.n	8001216 <main+0x1d6>
	          {
	              rates[rateSpot++] = (uint8_t)beatsPerMinute; // Store this reading in the array
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <main+0x1dc>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <main+0x1e4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	b2d1      	uxtb	r1, r2
 80011a2:	4a20      	ldr	r2, [pc, #128]	@ (8001224 <main+0x1e4>)
 80011a4:	7011      	strb	r1, [r2, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80011b0:	793b      	ldrb	r3, [r7, #4]
 80011b2:	b2d9      	uxtb	r1, r3
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <main+0x1e0>)
 80011b6:	5499      	strb	r1, [r3, r2]
	              rateSpot %= RATE_SIZE; // Wrap variable
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <main+0x1e4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <main+0x1e4>)
 80011c4:	701a      	strb	r2, [r3, #0]

	              // Take average of readings
	              beatAvg = 0;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <main+0x1e8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
	              for (uint8_t x = 0; x < RATE_SIZE; x++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	77bb      	strb	r3, [r7, #30]
 80011d0:	e00b      	b.n	80011ea <main+0x1aa>
	                  beatAvg += rates[x];
 80011d2:	7fbb      	ldrb	r3, [r7, #30]
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <main+0x1e0>)
 80011d6:	5cd2      	ldrb	r2, [r2, r3]
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <main+0x1e8>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <main+0x1e8>)
 80011e2:	701a      	strb	r2, [r3, #0]
	              for (uint8_t x = 0; x < RATE_SIZE; x++)
 80011e4:	7fbb      	ldrb	r3, [r7, #30]
 80011e6:	3301      	adds	r3, #1
 80011e8:	77bb      	strb	r3, [r7, #30]
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d9f0      	bls.n	80011d2 <main+0x192>
	              beatAvg /= RATE_SIZE;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <main+0x1e8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <main+0x1e8>)
 80011fa:	701a      	strb	r2, [r3, #0]

	              // Print heart rate information
	              printf("BPM: %.1f, Avg BPM: %u\r\n", beatsPerMinute, beatAvg);
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <main+0x1dc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9b9 	bl	8000578 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4907      	ldr	r1, [pc, #28]	@ (8001228 <main+0x1e8>)
 800120c:	7809      	ldrb	r1, [r1, #0]
 800120e:	9100      	str	r1, [sp, #0]
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <main+0x208>)
 8001212:	f005 fbe3 	bl	80069dc <iprintf>
  {
 8001216:	e775      	b.n	8001104 <main+0xc4>
 8001218:	200003e4 	.word	0x200003e4
 800121c:	200003e8 	.word	0x200003e8
 8001220:	200003ec 	.word	0x200003ec
 8001224:	200003f0 	.word	0x200003f0
 8001228:	200003f1 	.word	0x200003f1
 800122c:	200001f4 	.word	0x200001f4
 8001230:	200002dc 	.word	0x200002dc
 8001234:	40c66666 	.word	0x40c66666
 8001238:	0800a1e8 	.word	0x0800a1e8
 800123c:	408f4000 	.word	0x408f4000
 8001240:	404e0000 	.word	0x404e0000
 8001244:	437f0000 	.word	0x437f0000
 8001248:	0800a210 	.word	0x0800a210

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b096      	sub	sp, #88	@ 0x58
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2244      	movs	r2, #68	@ 0x44
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f005 fd26 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800126e:	2000      	movs	r0, #0
 8001270:	f002 f838 	bl	80032e4 <HAL_PWREx_ControlVoltageScaling>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800127a:	f000 f907 	bl	800148c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800127e:	2310      	movs	r3, #16
 8001280:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001282:	2301      	movs	r3, #1
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800128a:	2360      	movs	r3, #96	@ 0x60
 800128c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001292:	2301      	movs	r3, #1
 8001294:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800129a:	233c      	movs	r3, #60	@ 0x3c
 800129c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 f8bc 	bl	800342c <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012ba:	f000 f8e7 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2303      	movs	r3, #3
 80012c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	2105      	movs	r1, #5
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fcc2 	bl	8003c60 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012e2:	f000 f8d3 	bl	800148c <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3758      	adds	r7, #88	@ 0x58
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <MX_I2C1_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001368 <MX_I2C1_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_I2C1_Init+0x74>)
 80012fc:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <MX_I2C1_Init+0x7c>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001306:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_I2C1_Init+0x74>)
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_I2C1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_I2C1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132a:	480e      	ldr	r0, [pc, #56]	@ (8001364 <MX_I2C1_Init+0x74>)
 800132c:	f001 f9d3 	bl	80026d6 <HAL_I2C_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001336:	f000 f8a9 	bl	800148c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4809      	ldr	r0, [pc, #36]	@ (8001364 <MX_I2C1_Init+0x74>)
 800133e:	f001 ff19 	bl	8003174 <HAL_I2CEx_ConfigAnalogFilter>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001348:	f000 f8a0 	bl	800148c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_I2C1_Init+0x74>)
 8001350:	f001 ff5b 	bl	800320a <HAL_I2CEx_ConfigDigitalFilter>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 f897 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001f4 	.word	0x200001f4
 8001368:	40005400 	.word	0x40005400
 800136c:	30a175ab 	.word	0x30a175ab

08001370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <MX_USART1_UART_Init+0x94>)
 8001378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b8:	4811      	ldr	r0, [pc, #68]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013ba:	f003 fc27 	bl	8004c0c <HAL_UART_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013c4:	f000 f862 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c8:	2100      	movs	r1, #0
 80013ca:	480d      	ldr	r0, [pc, #52]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013cc:	f004 fa50 	bl	8005870 <HAL_UARTEx_SetTxFifoThreshold>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013d6:	f000 f859 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013da:	2100      	movs	r1, #0
 80013dc:	4808      	ldr	r0, [pc, #32]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013de:	f004 fa85 	bl	80058ec <HAL_UARTEx_SetRxFifoThreshold>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013e8:	f000 f850 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_USART1_UART_Init+0x90>)
 80013ee:	f004 fa06 	bl	80057fe <HAL_UARTEx_DisableFifoMode>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013f8:	f000 f848 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000248 	.word	0x20000248
 8001404:	40013800 	.word	0x40013800

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_GPIO_Init+0x7c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <MX_GPIO_Init+0x7c>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_GPIO_Init+0x7c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_GPIO_Init+0x7c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <MX_GPIO_Init+0x7c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <MX_GPIO_Init+0x7c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800144e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001454:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	@ (8001488 <MX_GPIO_Init+0x80>)
 8001466:	f000 ff81 	bl	800236c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2028      	movs	r0, #40	@ 0x28
 8001470:	f000 ff45 	bl	80022fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001474:	2028      	movs	r0, #40	@ 0x28
 8001476:	f000 ff5e 	bl	8002336 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147a:	bf00      	nop
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	48000c00 	.word	0x48000c00

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <Error_Handler+0x8>

08001498 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fbec 	bl	8006cac <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3384      	adds	r3, #132	@ 0x84
 80014d8:	2280      	movs	r2, #128	@ 0x80
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fbe5 	bl	8006cac <memset>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b088      	sub	sp, #32
 80014ee:	af02      	add	r7, sp, #8
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	461a      	mov	r2, r3
 80014f6:	460b      	mov	r3, r1
 80014f8:	72fb      	strb	r3, [r7, #11]
 80014fa:	4613      	mov	r3, r2
 80014fc:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80014fe:	893b      	ldrh	r3, [r7, #8]
 8001500:	3301      	adds	r3, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fa7e 	bl	8005a04 <malloc>
 8001508:	4603      	mov	r3, r0
 800150a:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	7afa      	ldrb	r2, [r7, #11]
 8001510:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <max30102_write+0x42>
 8001518:	893b      	ldrh	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	893a      	ldrh	r2, [r7, #8]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fc4f 	bl	8006dca <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	3301      	adds	r3, #1
 8001534:	b29b      	uxth	r3, r3
 8001536:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	21ae      	movs	r1, #174	@ 0xae
 8001540:	f001 f964 	bl	800280c <HAL_I2C_Master_Transmit>
    free(payload);
 8001544:	6978      	ldr	r0, [r7, #20]
 8001546:	f004 fa65 	bl	8005a14 <free>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b088      	sub	sp, #32
 8001556:	af02      	add	r7, sp, #8
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	461a      	mov	r2, r3
 800155e:	460b      	mov	r3, r1
 8001560:	72fb      	strb	r3, [r7, #11]
 8001562:	4613      	mov	r3, r2
 8001564:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001566:	7afb      	ldrb	r3, [r7, #11]
 8001568:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	f107 0217 	add.w	r2, r7, #23
 8001572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	21ae      	movs	r1, #174	@ 0xae
 800157c:	f001 f946 	bl	800280c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800158a:	9200      	str	r2, [sp, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	21ae      	movs	r1, #174	@ 0xae
 8001590:	f001 fa54 	bl	8002a3c <HAL_I2C_Master_Receive>
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80015a4:	2340      	movs	r3, #64	@ 0x40
 80015a6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80015a8:	f107 020f 	add.w	r2, r7, #15
 80015ac:	2301      	movs	r3, #1
 80015ae:	2109      	movs	r1, #9
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff9a 	bl	80014ea <max30102_write>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80015ce:	f107 020f 	add.w	r2, r7, #15
 80015d2:	2301      	movs	r3, #1
 80015d4:	2102      	movs	r1, #2
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffbb 	bl	8001552 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	01db      	lsls	r3, r3, #7
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80015f8:	f107 020f 	add.w	r2, r7, #15
 80015fc:	2301      	movs	r3, #1
 80015fe:	2102      	movs	r1, #2
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff72 	bl	80014ea <max30102_write>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8001628:	f107 020f 	add.w	r2, r7, #15
 800162c:	2301      	movs	r3, #1
 800162e:	2103      	movs	r1, #3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff5a 	bl	80014ea <max30102_write>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8001658:	f107 020f 	add.w	r2, r7, #15
 800165c:	2301      	movs	r3, #1
 800165e:	2121      	movs	r1, #33	@ 0x21
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff42 	bl	80014ea <max30102_write>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001696:	f107 020f 	add.w	r2, r7, #15
 800169a:	2301      	movs	r3, #1
 800169c:	2109      	movs	r1, #9
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff57 	bl	8001552 <max30102_read>
    config = (config & 0xf8) | mode;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f023 0307 	bic.w	r3, r3, #7
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 80016ba:	f107 020f 	add.w	r2, r7, #15
 80016be:	2301      	movs	r3, #1
 80016c0:	2109      	movs	r1, #9
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff11 	bl	80014ea <max30102_write>
    max30102_clear_fifo(obj);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8fb 	bl	80018c4 <max30102_clear_fifo>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80016e2:	f107 020f 	add.w	r2, r7, #15
 80016e6:	2301      	movs	r3, #1
 80016e8:	210a      	movs	r1, #10
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff31 	bl	8001552 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001708:	f107 020f 	add.w	r2, r7, #15
 800170c:	2301      	movs	r3, #1
 800170e:	210a      	movs	r1, #10
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff feea 	bl	80014ea <max30102_write>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800172a:	f107 020f 	add.w	r2, r7, #15
 800172e:	2301      	movs	r3, #1
 8001730:	210a      	movs	r1, #10
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff0d 	bl	8001552 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	b25b      	sxtb	r3, r3
 800173c:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001740:	b25a      	sxtb	r2, r3
 8001742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001746:	4313      	orrs	r3, r2
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800174e:	f107 020f 	add.w	r2, r7, #15
 8001752:	2301      	movs	r3, #1
 8001754:	210a      	movs	r1, #10
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fec7 	bl	80014ea <max30102_write>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001770:	f107 020f 	add.w	r2, r7, #15
 8001774:	2301      	movs	r3, #1
 8001776:	210a      	movs	r1, #10
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff feea 	bl	8001552 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	b25a      	sxtb	r2, r3
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001796:	f107 020f 	add.w	r2, r7, #15
 800179a:	2301      	movs	r3, #1
 800179c:	210a      	movs	r1, #10
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fea3 	bl	80014ea <max30102_write>
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f7fe fedb 	bl	8000578 <__aeabi_f2d>
 80017c2:	a30d      	add	r3, pc, #52	@ (adr r3, 80017f8 <max30102_set_led_current_1+0x48>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7ff f858 	bl	800087c <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff fa00 	bl	8000bd8 <__aeabi_d2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80017de:	f107 020f 	add.w	r2, r7, #15
 80017e2:	2301      	movs	r3, #1
 80017e4:	210c      	movs	r1, #12
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fe7f 	bl	80014ea <max30102_write>
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	9999999a 	.word	0x9999999a
 80017fc:	3fc99999 	.word	0x3fc99999

08001800 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800180c:	6838      	ldr	r0, [r7, #0]
 800180e:	f7fe feb3 	bl	8000578 <__aeabi_f2d>
 8001812:	a30d      	add	r3, pc, #52	@ (adr r3, 8001848 <max30102_set_led_current_2+0x48>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7ff f830 	bl	800087c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f9d8 	bl	8000bd8 <__aeabi_d2uiz>
 8001828:	4603      	mov	r3, r0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800182e:	f107 020f 	add.w	r2, r7, #15
 8001832:	2301      	movs	r3, #1
 8001834:	210d      	movs	r1, #13
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fe57 	bl	80014ea <max30102_write>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	9999999a 	.word	0x9999999a
 800184c:	3fc99999 	.word	0x3fc99999

08001850 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	460b      	mov	r3, r1
 8001864:	70bb      	strb	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	b25a      	sxtb	r2, r3
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	b25b      	sxtb	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001880:	78bb      	ldrb	r3, [r7, #2]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	b25b      	sxtb	r3, r3
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	b25a      	sxtb	r2, r3
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b25b      	sxtb	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001898:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	b25a      	sxtb	r2, r3
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 80018ae:	f107 020f 	add.w	r2, r7, #15
 80018b2:	2301      	movs	r3, #1
 80018b4:	2108      	movs	r1, #8
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fe17 	bl	80014ea <max30102_write>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80018d0:	f107 020f 	add.w	r2, r7, #15
 80018d4:	2303      	movs	r3, #3
 80018d6:	2104      	movs	r1, #4
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fe06 	bl	80014ea <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80018de:	f107 020f 	add.w	r2, r7, #15
 80018e2:	2303      	movs	r3, #3
 80018e4:	2106      	movs	r1, #6
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fdff 	bl	80014ea <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80018ec:	f107 020f 	add.w	r2, r7, #15
 80018f0:	2303      	movs	r3, #3
 80018f2:	2105      	movs	r1, #5
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fdf8 	bl	80014ea <max30102_write>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b088      	sub	sp, #32
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	74fb      	strb	r3, [r7, #19]
 800190e:	2300      	movs	r3, #0
 8001910:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8001912:	f107 0213 	add.w	r2, r7, #19
 8001916:	2301      	movs	r3, #1
 8001918:	2104      	movs	r1, #4
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fe19 	bl	8001552 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001920:	f107 0212 	add.w	r2, r7, #18
 8001924:	2301      	movs	r3, #1
 8001926:	2106      	movs	r1, #6
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fe12 	bl	8001552 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800192e:	7cfa      	ldrb	r2, [r7, #19]
 8001930:	7cbb      	ldrb	r3, [r7, #18]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001938:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dc03      	bgt.n	8001948 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	3320      	adds	r3, #32
 8001944:	b2db      	uxtb	r3, r3
 8001946:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	77bb      	strb	r3, [r7, #30]
 800194c:	e033      	b.n	80019b6 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800194e:	f107 020c 	add.w	r2, r7, #12
 8001952:	2306      	movs	r3, #6
 8001954:	2107      	movs	r1, #7
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fdfb 	bl	8001552 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800195c:	7b3b      	ldrb	r3, [r7, #12]
 800195e:	041a      	lsls	r2, r3, #16
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	4313      	orrs	r3, r2
 8001966:	7bba      	ldrb	r2, [r7, #14]
 8001968:	4313      	orrs	r3, r2
 800196a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800196e:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	7c3b      	ldrb	r3, [r7, #16]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	4313      	orrs	r3, r2
 800197a:	7c7a      	ldrb	r2, [r7, #17]
 800197c:	4313      	orrs	r3, r2
 800197e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001982:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8001984:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8001992:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	3320      	adds	r3, #32
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80019a2:	6979      	ldr	r1, [r7, #20]
 80019a4:	69b8      	ldr	r0, [r7, #24]
 80019a6:	f7ff fd77 	bl	8001498 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 80019aa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	77bb      	strb	r3, [r7, #30]
 80019b6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80019ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dbc5      	blt.n	800194e <max30102_read_fifo+0x4c>
    }
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <checkForBeat>:
int16_t lowPassFIRFilter(int16_t din);
int32_t mul16(int16_t x, int16_t y);

// Function to check for a heartbeat
bool checkForBeat(int32_t sample)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    bool beatDetected = false;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

    IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <checkForBeat+0x12c>)
 80019da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <checkForBeat+0x130>)
 80019e0:	801a      	strh	r2, [r3, #0]

    IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, (uint16_t)sample);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	4845      	ldr	r0, [pc, #276]	@ (8001b00 <checkForBeat+0x134>)
 80019ea:	f000 f899 	bl	8001b20 <averageDCEstimator>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <checkForBeat+0x138>)
 80019f4:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_Current = lowPassFIRFilter((int16_t)(sample - IR_Average_Estimated));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b42      	ldr	r3, [pc, #264]	@ (8001b04 <checkForBeat+0x138>)
 80019fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f8a5 	bl	8001b58 <lowPassFIRFilter>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <checkForBeat+0x12c>)
 8001a14:	801a      	strh	r2, [r3, #0]

    // Detect positive zero crossing (rising edge)
    if ((IR_AC_Signal_Previous < 0) && (IR_AC_Signal_Current >= 0))
 8001a16:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <checkForBeat+0x130>)
 8001a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da2e      	bge.n	8001a7e <checkForBeat+0xb2>
 8001a20:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <checkForBeat+0x12c>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db29      	blt.n	8001a7e <checkForBeat+0xb2>

    {
        IR_AC_Max = IR_AC_Signal_max;
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <checkForBeat+0x13c>)
 8001a2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a30:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <checkForBeat+0x140>)
 8001a32:	801a      	strh	r2, [r3, #0]
        IR_AC_Min = IR_AC_Signal_min;
 8001a34:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <checkForBeat+0x144>)
 8001a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a3a:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <checkForBeat+0x148>)
 8001a3c:	801a      	strh	r2, [r3, #0]

        positiveEdge = 1;
 8001a3e:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <checkForBeat+0x14c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	801a      	strh	r2, [r3, #0]
        negativeEdge = 0;
 8001a44:	4b35      	ldr	r3, [pc, #212]	@ (8001b1c <checkForBeat+0x150>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
        IR_AC_Signal_max = 0;
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b08 <checkForBeat+0x13c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]

        if ((IR_AC_Max - IR_AC_Min) > 20 && (IR_AC_Max - IR_AC_Min) < 1000)
 8001a50:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <checkForBeat+0x140>)
 8001a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b2e      	ldr	r3, [pc, #184]	@ (8001b14 <checkForBeat+0x148>)
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b14      	cmp	r3, #20
 8001a62:	dd0c      	ble.n	8001a7e <checkForBeat+0xb2>
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <checkForBeat+0x140>)
 8001a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <checkForBeat+0x148>)
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a78:	da01      	bge.n	8001a7e <checkForBeat+0xb2>
        {
            beatDetected = true;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
        }
    }

    // Detect negative zero crossing (falling edge)
    if ((IR_AC_Signal_Previous > 0) && (IR_AC_Signal_Current <= 0))
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <checkForBeat+0x130>)
 8001a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dd0d      	ble.n	8001aa4 <checkForBeat+0xd8>
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <checkForBeat+0x12c>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	dc08      	bgt.n	8001aa4 <checkForBeat+0xd8>
    {
        positiveEdge = 0;
 8001a92:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <checkForBeat+0x14c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
        negativeEdge = 1;
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <checkForBeat+0x150>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	801a      	strh	r2, [r3, #0]
        IR_AC_Signal_min = 0;
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <checkForBeat+0x144>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
    }

    // Find maximum in positive cycle
    if (positiveEdge && (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <checkForBeat+0x14c>)
 8001aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00c      	beq.n	8001ac8 <checkForBeat+0xfc>
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <checkForBeat+0x12c>)
 8001ab0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <checkForBeat+0x130>)
 8001ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	dd04      	ble.n	8001ac8 <checkForBeat+0xfc>
    {
        IR_AC_Signal_max = IR_AC_Signal_Current;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <checkForBeat+0x12c>)
 8001ac0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <checkForBeat+0x13c>)
 8001ac6:	801a      	strh	r2, [r3, #0]
    }

    // Find minimum in negative cycle
    if (negativeEdge && (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <checkForBeat+0x150>)
 8001aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00c      	beq.n	8001aec <checkForBeat+0x120>
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <checkForBeat+0x12c>)
 8001ad4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <checkForBeat+0x130>)
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	da04      	bge.n	8001aec <checkForBeat+0x120>
    {
        IR_AC_Signal_min = IR_AC_Signal_Current;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <checkForBeat+0x12c>)
 8001ae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <checkForBeat+0x144>)
 8001aea:	801a      	strh	r2, [r3, #0]
    }

    return beatDetected;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200003f2 	.word	0x200003f2
 8001afc:	200003f4 	.word	0x200003f4
 8001b00:	20000400 	.word	0x20000400
 8001b04:	200003fa 	.word	0x200003fa
 8001b08:	200003f8 	.word	0x200003f8
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	200003f6 	.word	0x200003f6
 8001b14:	20000002 	.word	0x20000002
 8001b18:	200003fc 	.word	0x200003fc
 8001b1c:	200003fe 	.word	0x200003fe

08001b20 <averageDCEstimator>:

// DC average estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
    *p += (((int32_t)x << 15) - *p) >> 4;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	03d9      	lsls	r1, r3, #15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1acb      	subs	r3, r1, r3
 8001b3a:	111b      	asrs	r3, r3, #4
 8001b3c:	441a      	add	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
    return (int16_t)(*p >> 15);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	13db      	asrs	r3, r3, #15
 8001b48:	b21b      	sxth	r3, r3
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <lowPassFIRFilter>:

// FIR Low-pass filter
int16_t lowPassFIRFilter(int16_t din)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
    cbuf[offset] = din;
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <lowPassFIRFilter+0xc0>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <lowPassFIRFilter+0xc4>)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

    int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 8001b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4b28      	ldr	r3, [pc, #160]	@ (8001c18 <lowPassFIRFilter+0xc0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3b0b      	subs	r3, #11
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	4926      	ldr	r1, [pc, #152]	@ (8001c1c <lowPassFIRFilter+0xc4>)
 8001b82:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f000 f84b 	bl	8001c24 <mul16>
 8001b8e:	60f8      	str	r0, [r7, #12]

    for (uint8_t i = 0; i < 11; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	72fb      	strb	r3, [r7, #11]
 8001b94:	e028      	b.n	8001be8 <lowPassFIRFilter+0x90>
    {
        z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <lowPassFIRFilter+0xc8>)
 8001b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9e:	b218      	sxth	r0, r3
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <lowPassFIRFilter+0xc0>)
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <lowPassFIRFilter+0xc4>)
 8001bb0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <lowPassFIRFilter+0xc0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f1a3 0116 	sub.w	r1, r3, #22
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	4915      	ldr	r1, [pc, #84]	@ (8001c1c <lowPassFIRFilter+0xc4>)
 8001bc8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f000 f825 	bl	8001c24 <mul16>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 11; i++)
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	3301      	adds	r3, #1
 8001be6:	72fb      	strb	r3, [r7, #11]
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	d9d3      	bls.n	8001b96 <lowPassFIRFilter+0x3e>
    }

    offset = (offset + 1) % 32;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <lowPassFIRFilter+0xc0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	425a      	negs	r2, r3
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	f002 021f 	and.w	r2, r2, #31
 8001bfe:	bf58      	it	pl
 8001c00:	4253      	negpl	r3, r2
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <lowPassFIRFilter+0xc0>)
 8001c06:	701a      	strb	r2, [r3, #0]

    return (int16_t)(z >> 15);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	13db      	asrs	r3, r3, #15
 8001c0c:	b21b      	sxth	r3, r3
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000444 	.word	0x20000444
 8001c1c:	20000404 	.word	0x20000404
 8001c20:	0800a22c 	.word	0x0800a22c

08001c24 <mul16>:

// Integer multiplication helper
int32_t mul16(int16_t x, int16_t y)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4613      	mov	r3, r2
 8001c32:	80bb      	strh	r3, [r7, #4]
    return (int32_t)x * (int32_t)y;
 8001c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c38:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0ae      	sub	sp, #184	@ 0xb8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2294      	movs	r2, #148	@ 0x94
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fff9 	bl	8006cac <memset>
  if(hi2c->Instance==I2C1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <HAL_I2C_MspInit+0xb0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d13b      	bne.n	8001d3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cc4:	2340      	movs	r3, #64	@ 0x40
 8001cc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 fa83 	bl	80041dc <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cdc:	f7ff fbd6 	bl	800148c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_I2C_MspInit+0xb4>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce4:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <HAL_I2C_MspInit+0xb4>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cec:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_I2C_MspInit+0xb4>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d00:	2312      	movs	r3, #18
 8001d02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <HAL_I2C_MspInit+0xb8>)
 8001d20:	f000 fb24 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_I2C_MspInit+0xb4>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_I2C_MspInit+0xb4>)
 8001d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_I2C_MspInit+0xb4>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d3c:	bf00      	nop
 8001d3e:	37b8      	adds	r7, #184	@ 0xb8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40005400 	.word	0x40005400
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	48000400 	.word	0x48000400

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ae      	sub	sp, #184	@ 0xb8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	2294      	movs	r2, #148	@ 0x94
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 ff9b 	bl	8006cac <memset>
  if(huart->Instance==USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_UART_MspInit+0xb0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d13a      	bne.n	8001df6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 fa25 	bl	80041dc <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d98:	f7ff fb78 	bl	800148c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da0:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dcc:	23c0      	movs	r3, #192	@ 0xc0
 8001dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de4:	2307      	movs	r3, #7
 8001de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_UART_MspInit+0xb8>)
 8001df2:	f000 fabb 	bl	800236c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001df6:	bf00      	nop
 8001df8:	37b8      	adds	r7, #184	@ 0xb8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48000400 	.word	0x48000400

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <NMI_Handler+0x4>

08001e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <MemManage_Handler+0x4>

08001e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e62:	f000 f951 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e6e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e72:	f000 fc0d 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <EXTI3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e80:	2008      	movs	r0, #8
 8001e82:	f000 fc05 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  max30102_on_interrupt(&max30102);
 8001e86:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <EXTI3_IRQHandler+0x14>)
 8001e88:	f7ff fbf1 	bl	800166e <max30102_on_interrupt>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200002dc 	.word	0x200002dc

08001e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return 1;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_kill>:

int _kill(int pid, int sig)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eae:	f004 ff5f 	bl	8006d70 <__errno>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2216      	movs	r2, #22
 8001eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_exit>:

void _exit (int status)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ffe7 	bl	8001ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ed6:	bf00      	nop
 8001ed8:	e7fd      	b.n	8001ed6 <_exit+0x12>

08001eda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e00a      	b.n	8001f02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eec:	f3af 8000 	nop.w
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	60ba      	str	r2, [r7, #8]
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf0      	blt.n	8001eec <_read+0x12>
  }

  return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_isatty>:

int _isatty(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f004 fee0 	bl	8006d70 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200a0000 	.word	0x200a0000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	20000448 	.word	0x20000448
 8001fe4:	200005a0 	.word	0x200005a0

08001fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002010:	f7ff ffea 	bl	8001fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoopForever+0x6>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	@ (800204c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <LoopForever+0xe>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	@ (8002058 <LoopForever+0x16>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203a:	f004 fe9f 	bl	8006d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800203e:	f7fe ffff 	bl	8001040 <main>

08002042 <LoopForever>:

LoopForever:
    b LoopForever
 8002042:	e7fe      	b.n	8002042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002044:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002050:	0800a6f0 	.word	0x0800a6f0
  ldr r2, =_sbss
 8002054:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002058:	2000059c 	.word	0x2000059c

0800205c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_IRQHandler>

0800205e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f93d 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f80e 	bl	8002090 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e001      	b.n	8002084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002080:	f7ff fde4 	bl	8001c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002084:	79fb      	ldrb	r3, [r7, #7]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800209c:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <HAL_InitTick+0x6c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d023      	beq.n	80020ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_InitTick+0x70>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_InitTick+0x6c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f949 	bl	8002352 <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d809      	bhi.n	80020e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f000 f913 	bl	80022fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_InitTick+0x74>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e007      	b.n	80020f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e004      	b.n	80020f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e001      	b.n	80020f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000000c 	.word	0x2000000c
 8002100:	20000004 	.word	0x20000004
 8002104:	20000008 	.word	0x20000008

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c
 800212c:	2000044c 	.word	0x2000044c

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000044c 	.word	0x2000044c

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	@ (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff29 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff3e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff31 	bl	80021ac <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237a:	e166      	b.n	800264a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8158 	beq.w	8002644 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d005      	beq.n	80023ac <HAL_GPIO_Init+0x40>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d130      	bne.n	800240e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e2:	2201      	movs	r2, #1
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0201 	and.w	r2, r3, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b03      	cmp	r3, #3
 8002418:	d017      	beq.n	800244a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d123      	bne.n	800249e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	6939      	ldr	r1, [r7, #16]
 800249a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80b2 	beq.w	8002644 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e0:	4b61      	ldr	r3, [pc, #388]	@ (8002668 <HAL_GPIO_Init+0x2fc>)
 80024e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e4:	4a60      	ldr	r2, [pc, #384]	@ (8002668 <HAL_GPIO_Init+0x2fc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002668 <HAL_GPIO_Init+0x2fc>)
 80024ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f8:	4a5c      	ldr	r2, [pc, #368]	@ (800266c <HAL_GPIO_Init+0x300>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002522:	d02b      	beq.n	800257c <HAL_GPIO_Init+0x210>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_GPIO_Init+0x304>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d025      	beq.n	8002578 <HAL_GPIO_Init+0x20c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a51      	ldr	r2, [pc, #324]	@ (8002674 <HAL_GPIO_Init+0x308>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d01f      	beq.n	8002574 <HAL_GPIO_Init+0x208>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a50      	ldr	r2, [pc, #320]	@ (8002678 <HAL_GPIO_Init+0x30c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x204>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4f      	ldr	r2, [pc, #316]	@ (800267c <HAL_GPIO_Init+0x310>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x200>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a4e      	ldr	r2, [pc, #312]	@ (8002680 <HAL_GPIO_Init+0x314>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1fc>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a4d      	ldr	r2, [pc, #308]	@ (8002684 <HAL_GPIO_Init+0x318>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1f8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a4c      	ldr	r2, [pc, #304]	@ (8002688 <HAL_GPIO_Init+0x31c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1f4>
 800255c:	2307      	movs	r3, #7
 800255e:	e00e      	b.n	800257e <HAL_GPIO_Init+0x212>
 8002560:	2308      	movs	r3, #8
 8002562:	e00c      	b.n	800257e <HAL_GPIO_Init+0x212>
 8002564:	2306      	movs	r3, #6
 8002566:	e00a      	b.n	800257e <HAL_GPIO_Init+0x212>
 8002568:	2305      	movs	r3, #5
 800256a:	e008      	b.n	800257e <HAL_GPIO_Init+0x212>
 800256c:	2304      	movs	r3, #4
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x212>
 8002570:	2303      	movs	r3, #3
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x212>
 8002574:	2302      	movs	r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x212>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x212>
 800257c:	2300      	movs	r3, #0
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800258e:	4937      	ldr	r1, [pc, #220]	@ (800266c <HAL_GPIO_Init+0x300>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_GPIO_Init+0x320>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c0:	4a32      	ldr	r2, [pc, #200]	@ (800268c <HAL_GPIO_Init+0x320>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c6:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_GPIO_Init+0x320>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ea:	4a28      	ldr	r2, [pc, #160]	@ (800268c <HAL_GPIO_Init+0x320>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_GPIO_Init+0x320>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002614:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <HAL_GPIO_Init+0x320>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800261a:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <HAL_GPIO_Init+0x320>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_GPIO_Init+0x320>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f ae91 	bne.w	800237c <HAL_GPIO_Init+0x10>
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	40010000 	.word	0x40010000
 8002670:	48000400 	.word	0x48000400
 8002674:	48000800 	.word	0x48000800
 8002678:	48000c00 	.word	0x48000c00
 800267c:	48001000 	.word	0x48001000
 8002680:	48001400 	.word	0x48001400
 8002684:	48001800 	.word	0x48001800
 8002688:	48001c00 	.word	0x48001c00
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800269a:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a6:	4a05      	ldr	r2, [pc, #20]	@ (80026bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f806 	bl	80026c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e08d      	b.n	8002804 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fac9 	bl	8001c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2224      	movs	r2, #36	@ 0x24
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002726:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002736:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	e006      	b.n	800275e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800275c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d108      	bne.n	8002778 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	e007      	b.n	8002788 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002786:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69d9      	ldr	r1, [r3, #28]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	461a      	mov	r2, r3
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
 800281c:	4613      	mov	r3, r2
 800281e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	f040 80fd 	bne.w	8002a28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2C_Master_Transmit+0x30>
 8002838:	2302      	movs	r3, #2
 800283a:	e0f6      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x21e>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002844:	f7ff fc74 	bl	8002130 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2319      	movs	r3, #25
 8002850:	2201      	movs	r2, #1
 8002852:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa0a 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0e1      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	@ 0x21
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2210      	movs	r2, #16
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	2bff      	cmp	r3, #255	@ 0xff
 8002896:	d906      	bls.n	80028a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	22ff      	movs	r2, #255	@ 0xff
 800289c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800289e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e007      	b.n	80028b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d024      	beq.n	8002908 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	8979      	ldrh	r1, [r7, #10]
 80028fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002a34 <HAL_I2C_Master_Transmit+0x228>)
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fc05 	bl	8003110 <I2C_TransferConfig>
 8002906:	e066      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	b2da      	uxtb	r2, r3
 800290e:	8979      	ldrh	r1, [r7, #10]
 8002910:	4b48      	ldr	r3, [pc, #288]	@ (8002a34 <HAL_I2C_Master_Transmit+0x228>)
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fbfa 	bl	8003110 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800291c:	e05b      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9fd 	bl	8002d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e07b      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	781a      	ldrb	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d034      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x1ca>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d130      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2200      	movs	r2, #0
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f976 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e04d      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	2bff      	cmp	r3, #255	@ 0xff
 8002996:	d90e      	bls.n	80029b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	22ff      	movs	r2, #255	@ 0xff
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	8979      	ldrh	r1, [r7, #10]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fbae 	bl	8003110 <I2C_TransferConfig>
 80029b4:	e00f      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fb9d 	bl	8003110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d19e      	bne.n	800291e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	6a39      	ldr	r1, [r7, #32]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f9e3 	bl	8002db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01a      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_I2C_Master_Transmit+0x22c>)
 8002a08:	400b      	ands	r3, r1
 8002a0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	80002000 	.word	0x80002000
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	817b      	strh	r3, [r7, #10]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	f040 80db 	bne.w	8002c14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_I2C_Master_Receive+0x30>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0d4      	b.n	8002c16 <HAL_I2C_Master_Receive+0x1da>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a74:	f7ff fb5c 	bl	8002130 <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2319      	movs	r3, #25
 8002a80:	2201      	movs	r2, #1
 8002a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f8f2 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0bf      	b.n	8002c16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2222      	movs	r2, #34	@ 0x22
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	893a      	ldrh	r2, [r7, #8]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2bff      	cmp	r3, #255	@ 0xff
 8002ac6:	d90e      	bls.n	8002ae6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	4b52      	ldr	r3, [pc, #328]	@ (8002c20 <HAL_I2C_Master_Receive+0x1e4>)
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fb16 	bl	8003110 <I2C_TransferConfig>
 8002ae4:	e06d      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	8979      	ldrh	r1, [r7, #10]
 8002af8:	4b49      	ldr	r3, [pc, #292]	@ (8002c20 <HAL_I2C_Master_Receive+0x1e4>)
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fb05 	bl	8003110 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b06:	e05c      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	6a39      	ldr	r1, [r7, #32]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f993 	bl	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e07c      	b.n	8002c16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d034      	beq.n	8002bc2 <HAL_I2C_Master_Receive+0x186>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d130      	bne.n	8002bc2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	@ 0x80
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f880 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e04d      	b.n	8002c16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2bff      	cmp	r3, #255	@ 0xff
 8002b82:	d90e      	bls.n	8002ba2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	2300      	movs	r3, #0
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fab8 	bl	8003110 <I2C_TransferConfig>
 8002ba0:	e00f      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 faa7 	bl	8003110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d19d      	bne.n	8002b08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6a39      	ldr	r1, [r7, #32]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f8ed 	bl	8002db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e01a      	b.n	8002c16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2220      	movs	r2, #32
 8002be6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_I2C_Master_Receive+0x1e8>)
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	80002400 	.word	0x80002400
 8002c24:	fe00e800 	.word	0xfe00e800

08002c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d007      	beq.n	8002c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	619a      	str	r2, [r3, #24]
  }
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	e03b      	b.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f962 	bl	8002f50 <I2C_IsErrorOccurred>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e041      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d02d      	beq.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7ff fa47 	bl	8002130 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d122      	bne.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d113      	bne.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d0b4      	beq.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d2e:	e033      	b.n	8002d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f90b 	bl	8002f50 <I2C_IsErrorOccurred>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e031      	b.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d025      	beq.n	8002d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4c:	f7ff f9f0 	bl	8002130 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d302      	bcc.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11a      	bne.n	8002d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d013      	beq.n	8002d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d1c4      	bne.n	8002d30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbc:	e02f      	b.n	8002e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f8c4 	bl	8002f50 <I2C_IsErrorOccurred>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e02d      	b.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7ff f9ad 	bl	8002130 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11a      	bne.n	8002e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d013      	beq.n	8002e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e007      	b.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d1c8      	bne.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e48:	e071      	b.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f87e 	bl	8002f50 <I2C_IsErrorOccurred>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d13b      	bne.n	8002ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d138      	bne.n	8002ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d105      	bne.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d121      	bne.n	8002ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2220      	movs	r2, #32
 8002eae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	75fb      	strb	r3, [r7, #23]
 8002edc:	e002      	b.n	8002ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ee4:	f7ff f924 	bl	8002130 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d119      	bne.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d00f      	beq.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d002      	beq.n	8002f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d083      	beq.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	fe00e800 	.word	0xfe00e800

08002f50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	@ 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d068      	beq.n	800304e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f84:	e049      	b.n	800301a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d045      	beq.n	800301a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7ff f8cf 	bl	8002130 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_IsErrorOccurred+0x54>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d13a      	bne.n	800301a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc6:	d121      	bne.n	800300c <I2C_IsErrorOccurred+0xbc>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fce:	d01d      	beq.n	800300c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d01a      	beq.n	800300c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fe4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fe6:	f7ff f8a3 	bl	8002130 <HAL_GetTick>
 8002fea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fec:	e00e      	b.n	800300c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fee:	f7ff f89f 	bl	8002130 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b19      	cmp	r3, #25
 8002ffa:	d907      	bls.n	800300c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f043 0320 	orr.w	r3, r3, #32
 8003002:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800300a:	e006      	b.n	800301a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d1e9      	bne.n	8002fee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b20      	cmp	r3, #32
 8003026:	d003      	beq.n	8003030 <I2C_IsErrorOccurred+0xe0>
 8003028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0aa      	beq.n	8002f86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2220      	movs	r2, #32
 800303e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003070:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003092:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01c      	beq.n	80030fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fdaf 	bl	8002c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <I2C_IsErrorOccurred+0x1bc>)
 80030d6:	400b      	ands	r3, r1
 80030d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003102:	4618      	mov	r0, r3
 8003104:	3728      	adds	r7, #40	@ 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	fe00e800 	.word	0xfe00e800

08003110 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	4613      	mov	r3, r2
 8003120:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003128:	7a7b      	ldrb	r3, [r7, #9]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003130:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	4313      	orrs	r3, r2
 800313a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800313e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	0d5b      	lsrs	r3, r3, #21
 800314a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800314e:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <I2C_TransferConfig+0x60>)
 8003150:	430b      	orrs	r3, r1
 8003152:	43db      	mvns	r3, r3
 8003154:	ea02 0103 	and.w	r1, r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	03ff63ff 	.word	0x03ff63ff

08003174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b20      	cmp	r3, #32
 8003188:	d138      	bne.n	80031fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003194:	2302      	movs	r3, #2
 8003196:	e032      	b.n	80031fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	@ 0x24
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b20      	cmp	r3, #32
 800321e:	d139      	bne.n	8003294 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800322a:	2302      	movs	r3, #2
 800322c:	e033      	b.n	8003296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2224      	movs	r2, #36	@ 0x24
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800325c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a8:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b4:	d102      	bne.n	80032bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80032b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032ba:	e00b      	b.n	80032d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80032bc:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ca:	d102      	bne.n	80032d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80032cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032d0:	e000      	b.n	80032d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80032d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40007000 	.word	0x40007000

080032e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d141      	bne.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fe:	d131      	bne.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003300:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003306:	4a46      	ldr	r2, [pc, #280]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003310:	4b43      	ldr	r3, [pc, #268]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003318:	4a41      	ldr	r2, [pc, #260]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800331e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003320:	4b40      	ldr	r3, [pc, #256]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2232      	movs	r2, #50	@ 0x32
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a3f      	ldr	r2, [pc, #252]	@ (8003428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9b      	lsrs	r3, r3, #18
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003336:	e002      	b.n	800333e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3b01      	subs	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334a:	d102      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f2      	bne.n	8003338 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003352:	4b33      	ldr	r3, [pc, #204]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335e:	d158      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e057      	b.n	8003414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003364:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336a:	4a2d      	ldr	r2, [pc, #180]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003374:	e04d      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800337c:	d141      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338a:	d131      	bne.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800338c:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003392:	4a23      	ldr	r2, [pc, #140]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800339c:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2232      	movs	r2, #50	@ 0x32
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0c9b      	lsrs	r3, r3, #18
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c2:	e002      	b.n	80033ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ca:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d6:	d102      	bne.n	80033de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f2      	bne.n	80033c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ea:	d112      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e011      	b.n	8003414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003400:	e007      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800340a:	4a05      	ldr	r2, [pc, #20]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003410:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40007000 	.word	0x40007000
 8003424:	20000004 	.word	0x20000004
 8003428:	431bde83 	.word	0x431bde83

0800342c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f000 bc08 	b.w	8003c50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003440:	4b96      	ldr	r3, [pc, #600]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344a:	4b94      	ldr	r3, [pc, #592]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80e4 	beq.w	800362a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_RCC_OscConfig+0x4c>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b0c      	cmp	r3, #12
 800346c:	f040 808b 	bne.w	8003586 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b01      	cmp	r3, #1
 8003474:	f040 8087 	bne.w	8003586 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003478:	4b88      	ldr	r3, [pc, #544]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_OscConfig+0x64>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e3df      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	4b81      	ldr	r3, [pc, #516]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_RCC_OscConfig+0x7e>
 80034a0:	4b7e      	ldr	r3, [pc, #504]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034a8:	e005      	b.n	80034b6 <HAL_RCC_OscConfig+0x8a>
 80034aa:	4b7c      	ldr	r3, [pc, #496]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d223      	bcs.n	8003502 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fdcc 	bl	800405c <RCC_SetFlashLatencyFromMSIRange>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e3c0      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ce:	4b73      	ldr	r3, [pc, #460]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a72      	ldr	r2, [pc, #456]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b70      	ldr	r3, [pc, #448]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	496d      	ldr	r1, [pc, #436]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ec:	4b6b      	ldr	r3, [pc, #428]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	4968      	ldr	r1, [pc, #416]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e025      	b.n	800354e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003502:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003508:	f043 0308 	orr.w	r3, r3, #8
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b63      	ldr	r3, [pc, #396]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4960      	ldr	r1, [pc, #384]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003520:	4b5e      	ldr	r3, [pc, #376]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	495b      	ldr	r1, [pc, #364]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fd8c 	bl	800405c <RCC_SetFlashLatencyFromMSIRange>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e380      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800354e:	f000 fcc1 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003552:	4602      	mov	r2, r0
 8003554:	4b51      	ldr	r3, [pc, #324]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	4950      	ldr	r1, [pc, #320]	@ (80036a0 <HAL_RCC_OscConfig+0x274>)
 8003560:	5ccb      	ldrb	r3, [r1, r3]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a4e      	ldr	r2, [pc, #312]	@ (80036a4 <HAL_RCC_OscConfig+0x278>)
 800356c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800356e:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fd8c 	bl	8002090 <HAL_InitTick>
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d052      	beq.n	8003628 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	e364      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d032      	beq.n	80035f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800358e:	4b43      	ldr	r3, [pc, #268]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a42      	ldr	r2, [pc, #264]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800359a:	f7fe fdc9 	bl	8002130 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a2:	f7fe fdc5 	bl	8002130 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e34d      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b4:	4b39      	ldr	r3, [pc, #228]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c0:	4b36      	ldr	r3, [pc, #216]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a35      	ldr	r2, [pc, #212]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b33      	ldr	r3, [pc, #204]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4930      	ldr	r1, [pc, #192]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035de:	4b2f      	ldr	r3, [pc, #188]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	492b      	ldr	r1, [pc, #172]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
 80035f2:	e01a      	b.n	800362a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035f4:	4b29      	ldr	r3, [pc, #164]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a28      	ldr	r2, [pc, #160]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003600:	f7fe fd96 	bl	8002130 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003608:	f7fe fd92 	bl	8002130 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e31a      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1dc>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d073      	beq.n	800371e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x21c>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d10e      	bne.n	8003660 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d10b      	bne.n	8003660 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d063      	beq.n	800371c <HAL_RCC_OscConfig+0x2f0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d15f      	bne.n	800371c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e2f7      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x24c>
 800366a:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e025      	b.n	80036c4 <HAL_RCC_OscConfig+0x298>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003680:	d114      	bne.n	80036ac <HAL_RCC_OscConfig+0x280>
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b03      	ldr	r3, [pc, #12]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a02      	ldr	r2, [pc, #8]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e013      	b.n	80036c4 <HAL_RCC_OscConfig+0x298>
 800369c:	40021000 	.word	0x40021000
 80036a0:	0800a244 	.word	0x0800a244
 80036a4:	20000004 	.word	0x20000004
 80036a8:	20000008 	.word	0x20000008
 80036ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fd30 	bl	8002130 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fd2c 	bl	8002130 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e2b4      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e6:	4b92      	ldr	r3, [pc, #584]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2a8>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fd1c 	bl	8002130 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe fd18 	bl	8002130 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e2a0      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370e:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x2d0>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d060      	beq.n	80037ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x310>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d119      	bne.n	800376a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d116      	bne.n	800376a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373c:	4b7c      	ldr	r3, [pc, #496]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x328>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e27d      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b76      	ldr	r3, [pc, #472]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	4973      	ldr	r1, [pc, #460]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003768:	e040      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003772:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6e      	ldr	r2, [pc, #440]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fe fcd7 	bl	8002130 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7fe fcd3 	bl	8002130 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e25b      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003798:	4b65      	ldr	r3, [pc, #404]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b62      	ldr	r3, [pc, #392]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	495f      	ldr	r1, [pc, #380]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e018      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe fcb3 	bl	8002130 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe fcaf 	bl	8002130 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e237      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03c      	beq.n	8003872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01c      	beq.n	800383a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003800:	4b4b      	ldr	r3, [pc, #300]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003806:	4a4a      	ldr	r2, [pc, #296]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe fc8e 	bl	8002130 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fe fc8a 	bl	8002130 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e212      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800382a:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ef      	beq.n	8003818 <HAL_RCC_OscConfig+0x3ec>
 8003838:	e01b      	b.n	8003872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003840:	4a3b      	ldr	r2, [pc, #236]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fe fc71 	bl	8002130 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003852:	f7fe fc6d 	bl	8002130 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1f5      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003864:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ef      	bne.n	8003852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a6 	beq.w	80039cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003884:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	@ 0x58
 800389c:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a8:	2301      	movs	r3, #1
 80038aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ac:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d118      	bne.n	80038ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fc34 	bl	8002130 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fe fc30 	bl	8002130 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1b8      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038de:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <HAL_RCC_OscConfig+0x4d8>
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003902:	e029      	b.n	8003958 <HAL_RCC_OscConfig+0x52c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d115      	bne.n	8003938 <HAL_RCC_OscConfig+0x50c>
 800390c:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003912:	4a07      	ldr	r2, [pc, #28]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	4a03      	ldr	r2, [pc, #12]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800392c:	e014      	b.n	8003958 <HAL_RCC_OscConfig+0x52c>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	4b9d      	ldr	r3, [pc, #628]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a9c      	ldr	r2, [pc, #624]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003948:	4b99      	ldr	r3, [pc, #612]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	4a98      	ldr	r2, [pc, #608]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe fbe6 	bl	8002130 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fe fbe2 	bl	8002130 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e168      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397e:	4b8c      	ldr	r3, [pc, #560]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ed      	beq.n	8003968 <HAL_RCC_OscConfig+0x53c>
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fbcf 	bl	8002130 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe fbcb 	bl	8002130 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e151      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ac:	4b80      	ldr	r3, [pc, #512]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ed      	bne.n	8003996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ba:	7ffb      	ldrb	r3, [r7, #31]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d03c      	beq.n	8003a52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01c      	beq.n	8003a1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e0:	4b73      	ldr	r3, [pc, #460]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039e6:	4a72      	ldr	r2, [pc, #456]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe fb9e 	bl	8002130 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f8:	f7fe fb9a 	bl	8002130 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e122      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a0a:	4b69      	ldr	r3, [pc, #420]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ef      	beq.n	80039f8 <HAL_RCC_OscConfig+0x5cc>
 8003a18:	e01b      	b.n	8003a52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a1a:	4b65      	ldr	r3, [pc, #404]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a20:	4a63      	ldr	r2, [pc, #396]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fb81 	bl	8002130 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a32:	f7fe fb7d 	bl	8002130 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e105      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a44:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ef      	bne.n	8003a32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80f9 	beq.w	8003c4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f040 80cf 	bne.w	8003c04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a66:	4b52      	ldr	r3, [pc, #328]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0203 	and.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d12c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	3b01      	subs	r3, #1
 8003a86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d123      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d113      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d071      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d068      	beq.n	8003bac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ada:	4b35      	ldr	r3, [pc, #212]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ae6:	4b32      	ldr	r3, [pc, #200]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0ac      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003af6:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b02:	f7fe fb15 	bl	8002130 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe fb11 	bl	8002130 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e099      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b28:	4b21      	ldr	r3, [pc, #132]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	4b21      	ldr	r3, [pc, #132]	@ (8003bb4 <HAL_RCC_OscConfig+0x788>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b38:	3a01      	subs	r2, #1
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b42:	0212      	lsls	r2, r2, #8
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b4a:	0852      	lsrs	r2, r2, #1
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0552      	lsls	r2, r2, #21
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b56:	0852      	lsrs	r2, r2, #1
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	0652      	lsls	r2, r2, #25
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b62:	06d2      	lsls	r2, r2, #27
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4912      	ldr	r1, [pc, #72]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0f      	ldr	r2, [pc, #60]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b78:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b84:	f7fe fad4 	bl	8002130 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe fad0 	bl	8002130 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e058      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003baa:	e050      	b.n	8003c4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e04f      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb8:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d144      	bne.n	8003c4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b24      	ldr	r3, [pc, #144]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a23      	ldr	r2, [pc, #140]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd0:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bdc:	f7fe faa8 	bl	8002130 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fe faa4 	bl	8002130 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e02c      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	4b18      	ldr	r3, [pc, #96]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x7b8>
 8003c02:	e024      	b.n	8003c4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d01f      	beq.n	8003c4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003c10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fe fa8b 	bl	8002130 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fe fa87 	bl	8002130 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e00f      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4905      	ldr	r1, [pc, #20]	@ (8003c58 <HAL_RCC_OscConfig+0x82c>)
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_OscConfig+0x830>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
 8003c48:	e001      	b.n	8003c4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	feeefffc 	.word	0xfeeefffc

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e11d      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b90      	ldr	r3, [pc, #576]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d910      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b8d      	ldr	r3, [pc, #564]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 020f 	bic.w	r2, r3, #15
 8003c8e:	498b      	ldr	r1, [pc, #556]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b89      	ldr	r3, [pc, #548]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e105      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	4b81      	ldr	r3, [pc, #516]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d908      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	497b      	ldr	r1, [pc, #492]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d079      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d11e      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	4b75      	ldr	r3, [pc, #468]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0dc      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003cfa:	f000 fa09 	bl	8004110 <RCC_GetSysClockFreqFromPLLSource>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4a70      	ldr	r2, [pc, #448]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d946      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d06:	4b6e      	ldr	r3, [pc, #440]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d140      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d12:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d1a:	4a69      	ldr	r2, [pc, #420]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e035      	b.n	8003d94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d30:	4b63      	ldr	r3, [pc, #396]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d115      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b9      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d48:	4b5d      	ldr	r3, [pc, #372]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ad      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0a5      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d68:	f000 f8b4 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4a55      	ldr	r2, [pc, #340]	@ (8003ec4 <HAL_RCC_ClockConfig+0x264>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d90f      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d74:	4b52      	ldr	r3, [pc, #328]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d80:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d88:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d94:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 0203 	bic.w	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4947      	ldr	r1, [pc, #284]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da6:	f7fe f9c3 	bl	8002130 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dae:	f7fe f9bf 	bl	8002130 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e077      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 020c 	and.w	r2, r3, #12
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d1eb      	bne.n	8003dae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b80      	cmp	r3, #128	@ 0x80
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ddc:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a37      	ldr	r2, [pc, #220]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003de6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d010      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d208      	bcs.n	8003e16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	492b      	ldr	r1, [pc, #172]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d210      	bcs.n	8003e46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 020f 	bic.w	r2, r3, #15
 8003e2c:	4923      	ldr	r1, [pc, #140]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e34:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_RCC_ClockConfig+0x25c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e036      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	4918      	ldr	r1, [pc, #96]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4910      	ldr	r1, [pc, #64]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e84:	f000 f826 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	490c      	ldr	r1, [pc, #48]	@ (8003ec8 <HAL_RCC_ClockConfig+0x268>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ecc <HAL_RCC_ClockConfig+0x26c>)
 8003ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_RCC_ClockConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fe f8f1 	bl	8002090 <HAL_InitTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40022000 	.word	0x40022000
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	04c4b400 	.word	0x04c4b400
 8003ec8:	0800a244 	.word	0x0800a244
 8003ecc:	20000004 	.word	0x20000004
 8003ed0:	20000008 	.word	0x20000008

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	@ 0x24
 8003ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eec:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x34>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d121      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d11e      	bne.n	8003f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f08:	4b34      	ldr	r3, [pc, #208]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f14:	4b31      	ldr	r3, [pc, #196]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	e005      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f24:	4b2d      	ldr	r3, [pc, #180]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f30:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10d      	bne.n	8003f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d102      	bne.n	8003f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f4c:	4b25      	ldr	r3, [pc, #148]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e004      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f58:	4b23      	ldr	r3, [pc, #140]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d134      	bne.n	8003fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d003      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0xac>
 8003f78:	e005      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f7c:	617b      	str	r3, [r7, #20]
      break;
 8003f7e:	e005      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f80:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f82:	617b      	str	r3, [r7, #20]
      break;
 8003f84:	e002      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	617b      	str	r3, [r7, #20]
      break;
 8003f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f8c:	4b13      	ldr	r3, [pc, #76]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	3301      	adds	r3, #1
 8003f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f9a:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	fb03 f202 	mul.w	r2, r3, r2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	0e5b      	lsrs	r3, r3, #25
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	@ 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	0800a25c 	.word	0x0800a25c
 8003fe4:	00f42400 	.word	0x00f42400
 8003fe8:	007a1200 	.word	0x007a1200

08003fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	@ (8004000 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004008:	f7ff fff0 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4904      	ldr	r1, [pc, #16]	@ (800402c <HAL_RCC_GetPCLK1Freq+0x28>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000
 800402c:	0800a254 	.word	0x0800a254

08004030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004034:	f7ff ffda 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0adb      	lsrs	r3, r3, #11
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4904      	ldr	r1, [pc, #16]	@ (8004058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	0800a254 	.word	0x0800a254

0800405c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004068:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004074:	f7ff f916 	bl	80032a4 <HAL_PWREx_GetVoltageRange>
 8004078:	6178      	str	r0, [r7, #20]
 800407a:	e014      	b.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	4a21      	ldr	r2, [pc, #132]	@ (8004108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004086:	6593      	str	r3, [r2, #88]	@ 0x58
 8004088:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004094:	f7ff f906 	bl	80032a4 <HAL_PWREx_GetVoltageRange>
 8004098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	4a1a      	ldr	r2, [pc, #104]	@ (8004108 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ac:	d10b      	bne.n	80040c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b80      	cmp	r3, #128	@ 0x80
 80040b2:	d913      	bls.n	80040dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80040b8:	d902      	bls.n	80040c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ba:	2302      	movs	r3, #2
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	e00d      	b.n	80040dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040c0:	2301      	movs	r3, #1
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	e00a      	b.n	80040dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80040ca:	d902      	bls.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80040cc:	2302      	movs	r3, #2
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e004      	b.n	80040dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b70      	cmp	r3, #112	@ 0x70
 80040d6:	d101      	bne.n	80040dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d8:	2301      	movs	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 020f 	bic.w	r2, r3, #15
 80040e4:	4909      	ldr	r1, [pc, #36]	@ (800410c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040ec:	4b07      	ldr	r3, [pc, #28]	@ (800410c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d001      	beq.n	80040fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	40022000 	.word	0x40022000

08004110 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004116:	4b2d      	ldr	r3, [pc, #180]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d00b      	beq.n	800413e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d825      	bhi.n	8004178 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d008      	beq.n	8004144 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d11f      	bne.n	8004178 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800413a:	613b      	str	r3, [r7, #16]
    break;
 800413c:	e01f      	b.n	800417e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800413e:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004140:	613b      	str	r3, [r7, #16]
    break;
 8004142:	e01c      	b.n	800417e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004144:	4b21      	ldr	r3, [pc, #132]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d107      	bne.n	8004160 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004150:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e005      	b.n	800416c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004160:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800416c:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004174:	613b      	str	r3, [r7, #16]
    break;
 8004176:	e002      	b.n	800417e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
    break;
 800417c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800417e:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	3301      	adds	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800418c:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	fb03 f202 	mul.w	r2, r3, r2
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0e5b      	lsrs	r3, r3, #25
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80041be:	683b      	ldr	r3, [r7, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40021000 	.word	0x40021000
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	007a1200 	.word	0x007a1200
 80041d8:	0800a25c 	.word	0x0800a25c

080041dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041e4:	2300      	movs	r3, #0
 80041e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e8:	2300      	movs	r3, #0
 80041ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d040      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d02a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004200:	2b80      	cmp	r3, #128	@ 0x80
 8004202:	d825      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d026      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d821      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d006      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d81d      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d010      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800421c:	e018      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800421e:	4b89      	ldr	r3, [pc, #548]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4a88      	ldr	r2, [pc, #544]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004228:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800422a:	e015      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb02 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800423c:	e00c      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3320      	adds	r3, #32
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fbed 	bl	8004a24 <RCCEx_PLLSAI2_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	74fb      	strb	r3, [r7, #19]
      break;
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800425e:	4b79      	ldr	r3, [pc, #484]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004264:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426c:	4975      	ldr	r1, [pc, #468]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004274:	e001      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d047      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428e:	d030      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004294:	d82a      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429a:	d02a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800429c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a0:	d824      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a6:	d008      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ac:	d81e      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80042b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b6:	d010      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042b8:	e018      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042ba:	4b62      	ldr	r3, [pc, #392]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	4a61      	ldr	r2, [pc, #388]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c6:	e015      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fab4 	bl	800483c <RCCEx_PLLSAI1_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d8:	e00c      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3320      	adds	r3, #32
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fb9f 	bl	8004a24 <RCCEx_PLLSAI2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	74fb      	strb	r3, [r7, #19]
      break;
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042fa:	4b52      	ldr	r3, [pc, #328]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	494e      	ldr	r1, [pc, #312]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004310:	e001      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 809f 	beq.w	8004462 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004324:	2300      	movs	r3, #0
 8004326:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004328:	4b46      	ldr	r3, [pc, #280]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004338:	2300      	movs	r3, #0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	4b41      	ldr	r3, [pc, #260]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	4a40      	ldr	r2, [pc, #256]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004348:	6593      	str	r3, [r2, #88]	@ 0x58
 800434a:	4b3e      	ldr	r3, [pc, #248]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435a:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3a      	ldr	r2, [pc, #232]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004366:	f7fd fee3 	bl	8002130 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800436c:	e009      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fd fedf 	bl	8002130 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d902      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	74fb      	strb	r3, [r7, #19]
        break;
 8004380:	e005      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004382:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0ef      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d15b      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004394:	4b2b      	ldr	r3, [pc, #172]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800439e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01f      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d019      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043b2:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043be:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043de:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d016      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fe9e 	bl	8002130 <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f6:	e00b      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fd fe9a 	bl	8002130 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d902      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	74fb      	strb	r3, [r7, #19]
            break;
 800440e:	e006      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ec      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10c      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004434:	4903      	ldr	r1, [pc, #12]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800443c:	e008      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	74bb      	strb	r3, [r7, #18]
 8004442:	e005      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004444:	40021000 	.word	0x40021000
 8004448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004450:	7c7b      	ldrb	r3, [r7, #17]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4ba0      	ldr	r3, [pc, #640]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445a:	4a9f      	ldr	r2, [pc, #636]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004460:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446e:	4b9a      	ldr	r3, [pc, #616]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f023 0203 	bic.w	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	4996      	ldr	r1, [pc, #600]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004490:	4b91      	ldr	r3, [pc, #580]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f023 020c 	bic.w	r2, r3, #12
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	498e      	ldr	r1, [pc, #568]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b2:	4b89      	ldr	r3, [pc, #548]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c0:	4985      	ldr	r1, [pc, #532]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044d4:	4b80      	ldr	r3, [pc, #512]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e2:	497d      	ldr	r1, [pc, #500]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044f6:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004504:	4974      	ldr	r1, [pc, #464]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004518:	4b6f      	ldr	r3, [pc, #444]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004526:	496c      	ldr	r1, [pc, #432]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453a:	4b67      	ldr	r3, [pc, #412]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004548:	4963      	ldr	r1, [pc, #396]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800455c:	4b5e      	ldr	r3, [pc, #376]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800456a:	495b      	ldr	r1, [pc, #364]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457e:	4b56      	ldr	r3, [pc, #344]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458c:	4952      	ldr	r1, [pc, #328]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045a0:	4b4d      	ldr	r3, [pc, #308]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	494a      	ldr	r1, [pc, #296]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c2:	4b45      	ldr	r3, [pc, #276]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	4941      	ldr	r1, [pc, #260]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045e4:	4b3c      	ldr	r3, [pc, #240]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f2:	4939      	ldr	r1, [pc, #228]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d028      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004614:	4930      	ldr	r1, [pc, #192]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004624:	d106      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004626:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4a2b      	ldr	r2, [pc, #172]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004630:	60d3      	str	r3, [r2, #12]
 8004632:	e011      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004638:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800463c:	d10c      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3304      	adds	r3, #4
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f8f9 	bl	800483c <RCCEx_PLLSAI1_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800464e:	7cfb      	ldrb	r3, [r7, #19]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d04d      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004668:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800466c:	d108      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800466e:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004674:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800467a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800467e:	e012      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004680:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004686:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800468c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004690:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469e:	490e      	ldr	r1, [pc, #56]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ae:	d106      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b0:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a08      	ldr	r2, [pc, #32]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ba:	60d3      	str	r3, [r2, #12]
 80046bc:	e020      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c6:	d109      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046c8:	4b03      	ldr	r3, [pc, #12]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a02      	ldr	r2, [pc, #8]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d2:	60d3      	str	r3, [r2, #12]
 80046d4:	e014      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f8a5 	bl	800483c <RCCEx_PLLSAI1_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d028      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800470c:	4b4a      	ldr	r3, [pc, #296]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800471a:	4947      	ldr	r1, [pc, #284]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800472a:	d106      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472c:	4b42      	ldr	r3, [pc, #264]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a41      	ldr	r2, [pc, #260]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004736:	60d3      	str	r3, [r2, #12]
 8004738:	e011      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800473e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004742:	d10c      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f876 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800476a:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800477a:	492f      	ldr	r1, [pc, #188]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3304      	adds	r3, #4
 8004792:	2102      	movs	r1, #2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f851 	bl	800483c <RCCEx_PLLSAI1_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047b4:	4b20      	ldr	r3, [pc, #128]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ba:	f023 0204 	bic.w	r2, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c4:	491c      	ldr	r1, [pc, #112]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047d8:	4b17      	ldr	r3, [pc, #92]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047de:	f023 0218 	bic.w	r2, r3, #24
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	4913      	ldr	r1, [pc, #76]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d017      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80047fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800480c:	490a      	ldr	r1, [pc, #40]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800481a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800481e:	d105      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a04      	ldr	r2, [pc, #16]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800482a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800482c:	7cbb      	ldrb	r3, [r7, #18]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800484a:	4b72      	ldr	r3, [pc, #456]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00e      	beq.n	8004874 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004856:	4b6f      	ldr	r3, [pc, #444]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0203 	and.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d103      	bne.n	800486e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
       ||
 800486a:	2b00      	cmp	r3, #0
 800486c:	d142      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e03f      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d018      	beq.n	80048ae <RCCEx_PLLSAI1_Config+0x72>
 800487c:	2b03      	cmp	r3, #3
 800487e:	d825      	bhi.n	80048cc <RCCEx_PLLSAI1_Config+0x90>
 8004880:	2b01      	cmp	r3, #1
 8004882:	d002      	beq.n	800488a <RCCEx_PLLSAI1_Config+0x4e>
 8004884:	2b02      	cmp	r3, #2
 8004886:	d009      	beq.n	800489c <RCCEx_PLLSAI1_Config+0x60>
 8004888:	e020      	b.n	80048cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800488a:	4b62      	ldr	r3, [pc, #392]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11d      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800489a:	e01a      	b.n	80048d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800489c:	4b5d      	ldr	r3, [pc, #372]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ac:	e013      	b.n	80048d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ae:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ba:	4b56      	ldr	r3, [pc, #344]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048ca:	e006      	b.n	80048da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      break;
 80048d0:	e004      	b.n	80048dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048d2:	bf00      	nop
 80048d4:	e002      	b.n	80048dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048d6:	bf00      	nop
 80048d8:	e000      	b.n	80048dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048da:	bf00      	nop
    }

    if(status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80048e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4949      	ldr	r1, [pc, #292]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 8086 	bne.w	8004a08 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048fc:	4b45      	ldr	r3, [pc, #276]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a44      	ldr	r2, [pc, #272]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004902:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004908:	f7fd fc12 	bl	8002130 <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800490e:	e009      	b.n	8004924 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004910:	f7fd fc0e 	bl	8002130 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	73fb      	strb	r3, [r7, #15]
        break;
 8004922:	e005      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004924:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ef      	bne.n	8004910 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d168      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d113      	bne.n	8004964 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	4b35      	ldr	r3, [pc, #212]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004942:	4013      	ands	r3, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	0211      	lsls	r1, r2, #8
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	06d2      	lsls	r2, r2, #27
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6852      	ldr	r2, [r2, #4]
 8004956:	3a01      	subs	r2, #1
 8004958:	0112      	lsls	r2, r2, #4
 800495a:	430a      	orrs	r2, r1
 800495c:	492d      	ldr	r1, [pc, #180]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	610b      	str	r3, [r1, #16]
 8004962:	e02d      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d115      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6892      	ldr	r2, [r2, #8]
 8004976:	0211      	lsls	r1, r2, #8
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6912      	ldr	r2, [r2, #16]
 800497c:	0852      	lsrs	r2, r2, #1
 800497e:	3a01      	subs	r2, #1
 8004980:	0552      	lsls	r2, r2, #21
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6852      	ldr	r2, [r2, #4]
 8004988:	3a01      	subs	r2, #1
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	430a      	orrs	r2, r1
 800498e:	4921      	ldr	r1, [pc, #132]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	610b      	str	r3, [r1, #16]
 8004994:	e014      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004996:	4b1f      	ldr	r3, [pc, #124]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	4b21      	ldr	r3, [pc, #132]	@ (8004a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6892      	ldr	r2, [r2, #8]
 80049a2:	0211      	lsls	r1, r2, #8
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6952      	ldr	r2, [r2, #20]
 80049a8:	0852      	lsrs	r2, r2, #1
 80049aa:	3a01      	subs	r2, #1
 80049ac:	0652      	lsls	r2, r2, #25
 80049ae:	4311      	orrs	r1, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0112      	lsls	r2, r2, #4
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4916      	ldr	r1, [pc, #88]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fd fbb0 	bl	8002130 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d4:	f7fd fbac 	bl	8002130 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
          break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	07ff800f 	.word	0x07ff800f
 8004a1c:	ff9f800f 	.word	0xff9f800f
 8004a20:	f9ff800f 	.word	0xf9ff800f

08004a24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a32:	4b72      	ldr	r3, [pc, #456]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0203 	and.w	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d103      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
       ||
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d142      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e03f      	b.n	8004adc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d018      	beq.n	8004a96 <RCCEx_PLLSAI2_Config+0x72>
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d825      	bhi.n	8004ab4 <RCCEx_PLLSAI2_Config+0x90>
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <RCCEx_PLLSAI2_Config+0x4e>
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d009      	beq.n	8004a84 <RCCEx_PLLSAI2_Config+0x60>
 8004a70:	e020      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a72:	4b62      	ldr	r3, [pc, #392]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11d      	bne.n	8004aba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a82:	e01a      	b.n	8004aba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a84:	4b5d      	ldr	r3, [pc, #372]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d116      	bne.n	8004abe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a94:	e013      	b.n	8004abe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a96:	4b59      	ldr	r3, [pc, #356]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa2:	4b56      	ldr	r3, [pc, #344]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab2:	e006      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e004      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d108      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004aca:	4b4c      	ldr	r3, [pc, #304]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4949      	ldr	r1, [pc, #292]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 8086 	bne.w	8004bf0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ae4:	4b45      	ldr	r3, [pc, #276]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a44      	ldr	r2, [pc, #272]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fd fb1e 	bl	8002130 <HAL_GetTick>
 8004af4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af6:	e009      	b.n	8004b0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004af8:	f7fd fb1a 	bl	8002130 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d902      	bls.n	8004b0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	73fb      	strb	r3, [r7, #15]
        break;
 8004b0a:	e005      	b.n	8004b18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ef      	bne.n	8004af8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d168      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d113      	bne.n	8004b4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b24:	4b35      	ldr	r3, [pc, #212]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	4b35      	ldr	r3, [pc, #212]	@ (8004c00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	06d2      	lsls	r2, r2, #27
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6852      	ldr	r2, [r2, #4]
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	430a      	orrs	r2, r1
 8004b44:	492d      	ldr	r1, [pc, #180]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	614b      	str	r3, [r1, #20]
 8004b4a:	e02d      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d115      	bne.n	8004b7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b52:	4b2a      	ldr	r3, [pc, #168]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	4b2b      	ldr	r3, [pc, #172]	@ (8004c04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6892      	ldr	r2, [r2, #8]
 8004b5e:	0211      	lsls	r1, r2, #8
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6912      	ldr	r2, [r2, #16]
 8004b64:	0852      	lsrs	r2, r2, #1
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0552      	lsls	r2, r2, #21
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6852      	ldr	r2, [r2, #4]
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	430a      	orrs	r2, r1
 8004b76:	4921      	ldr	r1, [pc, #132]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	614b      	str	r3, [r1, #20]
 8004b7c:	e014      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	4b21      	ldr	r3, [pc, #132]	@ (8004c08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6892      	ldr	r2, [r2, #8]
 8004b8a:	0211      	lsls	r1, r2, #8
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6952      	ldr	r2, [r2, #20]
 8004b90:	0852      	lsrs	r2, r2, #1
 8004b92:	3a01      	subs	r2, #1
 8004b94:	0652      	lsls	r2, r2, #25
 8004b96:	4311      	orrs	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6852      	ldr	r2, [r2, #4]
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0112      	lsls	r2, r2, #4
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	4916      	ldr	r1, [pc, #88]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ba8:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a13      	ldr	r2, [pc, #76]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fabc 	bl	8002130 <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bba:	e009      	b.n	8004bd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bbc:	f7fd fab8 	bl	8002130 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d902      	bls.n	8004bd0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8004bce:	e005      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004be2:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	4904      	ldr	r1, [pc, #16]	@ (8004bfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	07ff800f 	.word	0x07ff800f
 8004c04:	ff9f800f 	.word	0xff9f800f
 8004c08:	f9ff800f 	.word	0xf9ff800f

08004c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e042      	b.n	8004ca4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fd f88d 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2224      	movs	r2, #36	@ 0x24
 8004c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fbb2 	bl	80053c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f8b3 	bl	8004dc8 <UART_SetConfig>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e01b      	b.n	8004ca4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fc31 	bl	8005504 <UART_CheckIdleState>
 8004ca2:	4603      	mov	r3, r0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	@ 0x28
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d17b      	bne.n	8004dbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_UART_Transmit+0x26>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e074      	b.n	8004dc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2221      	movs	r2, #33	@ 0x21
 8004ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce6:	f7fd fa23 	bl	8002130 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d04:	d108      	bne.n	8004d18 <HAL_UART_Transmit+0x6c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e003      	b.n	8004d20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d20:	e030      	b.n	8004d84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	@ 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fc93 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e03d      	b.n	8004dc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d56:	b292      	uxth	r2, r2
 8004d58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	e007      	b.n	8004d72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1c8      	bne.n	8004d22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2140      	movs	r1, #64	@ 0x40
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fc5c 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e006      	b.n	8004dc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e000      	b.n	8004dc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
  }
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b08c      	sub	sp, #48	@ 0x30
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4baa      	ldr	r3, [pc, #680]	@ (80050a0 <UART_SetConfig+0x2d8>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a9f      	ldr	r2, [pc, #636]	@ (80050a4 <UART_SetConfig+0x2dc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e30:	4313      	orrs	r3, r2
 8004e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f023 010f 	bic.w	r1, r3, #15
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a90      	ldr	r2, [pc, #576]	@ (80050a8 <UART_SetConfig+0x2e0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d125      	bne.n	8004eb8 <UART_SetConfig+0xf0>
 8004e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80050ac <UART_SetConfig+0x2e4>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d81a      	bhi.n	8004eb0 <UART_SetConfig+0xe8>
 8004e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <UART_SetConfig+0xb8>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e116      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e112      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e10e      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e10a      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb6:	e106      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a7c      	ldr	r2, [pc, #496]	@ (80050b0 <UART_SetConfig+0x2e8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d138      	bne.n	8004f34 <UART_SetConfig+0x16c>
 8004ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80050ac <UART_SetConfig+0x2e4>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b0c      	cmp	r3, #12
 8004ece:	d82d      	bhi.n	8004f2c <UART_SetConfig+0x164>
 8004ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <UART_SetConfig+0x110>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f2d 	.word	0x08004f2d
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f15 	.word	0x08004f15
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	e0d8      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e0d4      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e0d0      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e0cc      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e0c8      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a5e      	ldr	r2, [pc, #376]	@ (80050b4 <UART_SetConfig+0x2ec>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d125      	bne.n	8004f8a <UART_SetConfig+0x1c2>
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80050ac <UART_SetConfig+0x2e4>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f48:	2b30      	cmp	r3, #48	@ 0x30
 8004f4a:	d016      	beq.n	8004f7a <UART_SetConfig+0x1b2>
 8004f4c:	2b30      	cmp	r3, #48	@ 0x30
 8004f4e:	d818      	bhi.n	8004f82 <UART_SetConfig+0x1ba>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d00a      	beq.n	8004f6a <UART_SetConfig+0x1a2>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d814      	bhi.n	8004f82 <UART_SetConfig+0x1ba>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <UART_SetConfig+0x19a>
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d008      	beq.n	8004f72 <UART_SetConfig+0x1aa>
 8004f60:	e00f      	b.n	8004f82 <UART_SetConfig+0x1ba>
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f68:	e0ad      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f70:	e0a9      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f72:	2304      	movs	r3, #4
 8004f74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f78:	e0a5      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f80:	e0a1      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f82:	2310      	movs	r3, #16
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f88:	e09d      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <UART_SetConfig+0x2f0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d125      	bne.n	8004fe0 <UART_SetConfig+0x218>
 8004f94:	4b45      	ldr	r3, [pc, #276]	@ (80050ac <UART_SetConfig+0x2e4>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa0:	d016      	beq.n	8004fd0 <UART_SetConfig+0x208>
 8004fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fa4:	d818      	bhi.n	8004fd8 <UART_SetConfig+0x210>
 8004fa6:	2b80      	cmp	r3, #128	@ 0x80
 8004fa8:	d00a      	beq.n	8004fc0 <UART_SetConfig+0x1f8>
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d814      	bhi.n	8004fd8 <UART_SetConfig+0x210>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <UART_SetConfig+0x1f0>
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	d008      	beq.n	8004fc8 <UART_SetConfig+0x200>
 8004fb6:	e00f      	b.n	8004fd8 <UART_SetConfig+0x210>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fbe:	e082      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e07e      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e07a      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e076      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e072      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	@ (80050bc <UART_SetConfig+0x2f4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d12a      	bne.n	8005040 <UART_SetConfig+0x278>
 8004fea:	4b30      	ldr	r3, [pc, #192]	@ (80050ac <UART_SetConfig+0x2e4>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff8:	d01a      	beq.n	8005030 <UART_SetConfig+0x268>
 8004ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffe:	d81b      	bhi.n	8005038 <UART_SetConfig+0x270>
 8005000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005004:	d00c      	beq.n	8005020 <UART_SetConfig+0x258>
 8005006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800500a:	d815      	bhi.n	8005038 <UART_SetConfig+0x270>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <UART_SetConfig+0x250>
 8005010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005014:	d008      	beq.n	8005028 <UART_SetConfig+0x260>
 8005016:	e00f      	b.n	8005038 <UART_SetConfig+0x270>
 8005018:	2300      	movs	r3, #0
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501e:	e052      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005020:	2302      	movs	r3, #2
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e04e      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e04a      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e046      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e042      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a17      	ldr	r2, [pc, #92]	@ (80050a4 <UART_SetConfig+0x2dc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d13a      	bne.n	80050c0 <UART_SetConfig+0x2f8>
 800504a:	4b18      	ldr	r3, [pc, #96]	@ (80050ac <UART_SetConfig+0x2e4>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005054:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005058:	d01a      	beq.n	8005090 <UART_SetConfig+0x2c8>
 800505a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800505e:	d81b      	bhi.n	8005098 <UART_SetConfig+0x2d0>
 8005060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005064:	d00c      	beq.n	8005080 <UART_SetConfig+0x2b8>
 8005066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506a:	d815      	bhi.n	8005098 <UART_SetConfig+0x2d0>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <UART_SetConfig+0x2b0>
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005074:	d008      	beq.n	8005088 <UART_SetConfig+0x2c0>
 8005076:	e00f      	b.n	8005098 <UART_SetConfig+0x2d0>
 8005078:	2300      	movs	r3, #0
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507e:	e022      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005080:	2302      	movs	r3, #2
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005086:	e01e      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005088:	2304      	movs	r3, #4
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508e:	e01a      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005090:	2308      	movs	r3, #8
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005096:	e016      	b.n	80050c6 <UART_SetConfig+0x2fe>
 8005098:	2310      	movs	r3, #16
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509e:	e012      	b.n	80050c6 <UART_SetConfig+0x2fe>
 80050a0:	cfff69f3 	.word	0xcfff69f3
 80050a4:	40008000 	.word	0x40008000
 80050a8:	40013800 	.word	0x40013800
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40004400 	.word	0x40004400
 80050b4:	40004800 	.word	0x40004800
 80050b8:	40004c00 	.word	0x40004c00
 80050bc:	40005000 	.word	0x40005000
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4aae      	ldr	r2, [pc, #696]	@ (8005384 <UART_SetConfig+0x5bc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	f040 8097 	bne.w	8005200 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d823      	bhi.n	8005122 <UART_SetConfig+0x35a>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0x318>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005105 	.word	0x08005105
 80050e4:	08005123 	.word	0x08005123
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005123 	.word	0x08005123
 80050f0:	08005113 	.word	0x08005113
 80050f4:	08005123 	.word	0x08005123
 80050f8:	08005123 	.word	0x08005123
 80050fc:	08005123 	.word	0x08005123
 8005100:	0800511b 	.word	0x0800511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005104:	f7fe ff7e 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8005108:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800510a:	e010      	b.n	800512e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800510c:	4b9e      	ldr	r3, [pc, #632]	@ (8005388 <UART_SetConfig+0x5c0>)
 800510e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005110:	e00d      	b.n	800512e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005112:	f7fe fedf 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8005116:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005118:	e009      	b.n	800512e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005120:	e005      	b.n	800512e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800512c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8130 	beq.w	8005396 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	4a94      	ldr	r2, [pc, #592]	@ (800538c <UART_SetConfig+0x5c4>)
 800513c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005140:	461a      	mov	r2, r3
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	fbb3 f3f2 	udiv	r3, r3, r2
 8005148:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	429a      	cmp	r2, r3
 8005158:	d305      	bcc.n	8005166 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	429a      	cmp	r2, r3
 8005164:	d903      	bls.n	800516e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800516c:	e113      	b.n	8005396 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	2200      	movs	r2, #0
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	60fa      	str	r2, [r7, #12]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	4a84      	ldr	r2, [pc, #528]	@ (800538c <UART_SetConfig+0x5c4>)
 800517c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005180:	b29b      	uxth	r3, r3
 8005182:	2200      	movs	r2, #0
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800518c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005190:	f7fb fd92 	bl	8000cb8 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	020b      	lsls	r3, r1, #8
 80051a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051aa:	0202      	lsls	r2, r0, #8
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	6849      	ldr	r1, [r1, #4]
 80051b0:	0849      	lsrs	r1, r1, #1
 80051b2:	2000      	movs	r0, #0
 80051b4:	460c      	mov	r4, r1
 80051b6:	4605      	mov	r5, r0
 80051b8:	eb12 0804 	adds.w	r8, r2, r4
 80051bc:	eb43 0905 	adc.w	r9, r3, r5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	469a      	mov	sl, r3
 80051c8:	4693      	mov	fp, r2
 80051ca:	4652      	mov	r2, sl
 80051cc:	465b      	mov	r3, fp
 80051ce:	4640      	mov	r0, r8
 80051d0:	4649      	mov	r1, r9
 80051d2:	f7fb fd71 	bl	8000cb8 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4613      	mov	r3, r2
 80051dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051e4:	d308      	bcc.n	80051f8 <UART_SetConfig+0x430>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ec:	d204      	bcs.n	80051f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	e0ce      	b.n	8005396 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051fe:	e0ca      	b.n	8005396 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005208:	d166      	bne.n	80052d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800520a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800520e:	2b08      	cmp	r3, #8
 8005210:	d827      	bhi.n	8005262 <UART_SetConfig+0x49a>
 8005212:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <UART_SetConfig+0x450>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	08005263 	.word	0x08005263
 8005228:	08005253 	.word	0x08005253
 800522c:	08005263 	.word	0x08005263
 8005230:	08005263 	.word	0x08005263
 8005234:	08005263 	.word	0x08005263
 8005238:	0800525b 	.word	0x0800525b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523c:	f7fe fee2 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8005240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005242:	e014      	b.n	800526e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005244:	f7fe fef4 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800524a:	e010      	b.n	800526e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800524c:	4b4e      	ldr	r3, [pc, #312]	@ (8005388 <UART_SetConfig+0x5c0>)
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005250:	e00d      	b.n	800526e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005252:	f7fe fe3f 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8005256:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005258:	e009      	b.n	800526e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005260:	e005      	b.n	800526e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800526c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8090 	beq.w	8005396 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	4a44      	ldr	r2, [pc, #272]	@ (800538c <UART_SetConfig+0x5c4>)
 800527c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005280:	461a      	mov	r2, r3
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	fbb3 f3f2 	udiv	r3, r3, r2
 8005288:	005a      	lsls	r2, r3, #1
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	441a      	add	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	d916      	bls.n	80052d0 <UART_SetConfig+0x508>
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a8:	d212      	bcs.n	80052d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f023 030f 	bic.w	r3, r3, #15
 80052b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	b29a      	uxth	r2, r3
 80052c0:	8bfb      	ldrh	r3, [r7, #30]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	8bfa      	ldrh	r2, [r7, #30]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	e062      	b.n	8005396 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052d6:	e05e      	b.n	8005396 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d828      	bhi.n	8005332 <UART_SetConfig+0x56a>
 80052e0:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <UART_SetConfig+0x520>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800530d 	.word	0x0800530d
 80052ec:	08005315 	.word	0x08005315
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	08005333 	.word	0x08005333
 80052f8:	08005323 	.word	0x08005323
 80052fc:	08005333 	.word	0x08005333
 8005300:	08005333 	.word	0x08005333
 8005304:	08005333 	.word	0x08005333
 8005308:	0800532b 	.word	0x0800532b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800530c:	f7fe fe7a 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005312:	e014      	b.n	800533e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005314:	f7fe fe8c 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 8005318:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531a:	e010      	b.n	800533e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800531c:	4b1a      	ldr	r3, [pc, #104]	@ (8005388 <UART_SetConfig+0x5c0>)
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005320:	e00d      	b.n	800533e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005322:	f7fe fdd7 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8005326:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005328:	e009      	b.n	800533e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005330:	e005      	b.n	800533e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800533c:	bf00      	nop
    }

    if (pclk != 0U)
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d028      	beq.n	8005396 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	4a10      	ldr	r2, [pc, #64]	@ (800538c <UART_SetConfig+0x5c4>)
 800534a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800534e:	461a      	mov	r2, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	fbb3 f2f2 	udiv	r2, r3, r2
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	441a      	add	r2, r3
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b0f      	cmp	r3, #15
 800536c:	d910      	bls.n	8005390 <UART_SetConfig+0x5c8>
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005374:	d20c      	bcs.n	8005390 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	b29a      	uxth	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e009      	b.n	8005396 <UART_SetConfig+0x5ce>
 8005382:	bf00      	nop
 8005384:	40008000 	.word	0x40008000
 8005388:	00f42400 	.word	0x00f42400
 800538c:	0800a28c 	.word	0x0800a28c
      }
      else
      {
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2201      	movs	r2, #1
 800539a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3730      	adds	r7, #48	@ 0x30
 80053ba:	46bd      	mov	sp, r7
 80053bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054be:	d10a      	bne.n	80054d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b098      	sub	sp, #96	@ 0x60
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005514:	f7fc fe0c 	bl	8002130 <HAL_GetTick>
 8005518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b08      	cmp	r3, #8
 8005526:	d12f      	bne.n	8005588 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005530:	2200      	movs	r2, #0
 8005532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f88e 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d022      	beq.n	8005588 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005556:	653b      	str	r3, [r7, #80]	@ 0x50
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005560:	647b      	str	r3, [r7, #68]	@ 0x44
 8005562:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800556e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e063      	b.n	8005650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b04      	cmp	r3, #4
 8005594:	d149      	bne.n	800562a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005596:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559e:	2200      	movs	r2, #0
 80055a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f857 	bl	8005658 <UART_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d03c      	beq.n	800562a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	623b      	str	r3, [r7, #32]
   return(result);
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005602:	61fa      	str	r2, [r7, #28]
 8005604:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69b9      	ldr	r1, [r7, #24]
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	617b      	str	r3, [r7, #20]
   return(result);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e012      	b.n	8005650 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3758      	adds	r7, #88	@ 0x58
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	e04f      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d04b      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fc fd5d 	bl	8002130 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <UART_WaitOnFlagUntilTimeout+0x30>
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e04e      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d037      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb2>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b80      	cmp	r3, #128	@ 0x80
 800569e:	d034      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b40      	cmp	r3, #64	@ 0x40
 80056a4:	d031      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d110      	bne.n	80056d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2208      	movs	r2, #8
 80056ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f838 	bl	8005732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2208      	movs	r2, #8
 80056c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e029      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e4:	d111      	bne.n	800570a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f81e 	bl	8005732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d0a0      	beq.n	800566a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005732:	b480      	push	{r7}
 8005734:	b095      	sub	sp, #84	@ 0x54
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005758:	643b      	str	r3, [r7, #64]	@ 0x40
 800575a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800575e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e6      	bne.n	800573a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	61fb      	str	r3, [r7, #28]
   return(result);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e3      	bne.n	800576c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d118      	bne.n	80057de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f023 0310 	bic.w	r3, r3, #16
 80057c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	613b      	str	r3, [r7, #16]
   return(result);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e6      	bne.n	80057ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057f2:	bf00      	nop
 80057f4:	3754      	adds	r7, #84	@ 0x54
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UARTEx_DisableFifoMode+0x16>
 8005810:	2302      	movs	r3, #2
 8005812:	e027      	b.n	8005864 <HAL_UARTEx_DisableFifoMode+0x66>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	@ 0x24
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005842:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005884:	2302      	movs	r3, #2
 8005886:	e02d      	b.n	80058e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	@ 0x24
 8005894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0201 	bic.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f84f 	bl	8005968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005900:	2302      	movs	r3, #2
 8005902:	e02d      	b.n	8005960 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	@ 0x24
 8005910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f811 	bl	8005968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005974:	2b00      	cmp	r3, #0
 8005976:	d108      	bne.n	800598a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005988:	e031      	b.n	80059ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800598a:	2308      	movs	r3, #8
 800598c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800598e:	2308      	movs	r3, #8
 8005990:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	0e5b      	lsrs	r3, r3, #25
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	0f5b      	lsrs	r3, r3, #29
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	7b3a      	ldrb	r2, [r7, #12]
 80059b6:	4911      	ldr	r1, [pc, #68]	@ (80059fc <UARTEx_SetNbDataToProcess+0x94>)
 80059b8:	5c8a      	ldrb	r2, [r1, r2]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059be:	7b3a      	ldrb	r2, [r7, #12]
 80059c0:	490f      	ldr	r1, [pc, #60]	@ (8005a00 <UARTEx_SetNbDataToProcess+0x98>)
 80059c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	7b7a      	ldrb	r2, [r7, #13]
 80059d4:	4909      	ldr	r1, [pc, #36]	@ (80059fc <UARTEx_SetNbDataToProcess+0x94>)
 80059d6:	5c8a      	ldrb	r2, [r1, r2]
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059dc:	7b7a      	ldrb	r2, [r7, #13]
 80059de:	4908      	ldr	r1, [pc, #32]	@ (8005a00 <UARTEx_SetNbDataToProcess+0x98>)
 80059e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	0800a2a4 	.word	0x0800a2a4
 8005a00:	0800a2ac 	.word	0x0800a2ac

08005a04 <malloc>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	@ (8005a10 <malloc+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f000 b82d 	b.w	8005a68 <_malloc_r>
 8005a0e:	bf00      	nop
 8005a10:	2000001c 	.word	0x2000001c

08005a14 <free>:
 8005a14:	4b02      	ldr	r3, [pc, #8]	@ (8005a20 <free+0xc>)
 8005a16:	4601      	mov	r1, r0
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	f002 b839 	b.w	8007a90 <_free_r>
 8005a1e:	bf00      	nop
 8005a20:	2000001c 	.word	0x2000001c

08005a24 <sbrk_aligned>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4e0f      	ldr	r6, [pc, #60]	@ (8005a64 <sbrk_aligned+0x40>)
 8005a28:	460c      	mov	r4, r1
 8005a2a:	6831      	ldr	r1, [r6, #0]
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	b911      	cbnz	r1, 8005a36 <sbrk_aligned+0x12>
 8005a30:	f001 f97c 	bl	8006d2c <_sbrk_r>
 8005a34:	6030      	str	r0, [r6, #0]
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f001 f977 	bl	8006d2c <_sbrk_r>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d103      	bne.n	8005a4a <sbrk_aligned+0x26>
 8005a42:	f04f 34ff 	mov.w	r4, #4294967295
 8005a46:	4620      	mov	r0, r4
 8005a48:	bd70      	pop	{r4, r5, r6, pc}
 8005a4a:	1cc4      	adds	r4, r0, #3
 8005a4c:	f024 0403 	bic.w	r4, r4, #3
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d0f8      	beq.n	8005a46 <sbrk_aligned+0x22>
 8005a54:	1a21      	subs	r1, r4, r0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f001 f968 	bl	8006d2c <_sbrk_r>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d1f2      	bne.n	8005a46 <sbrk_aligned+0x22>
 8005a60:	e7ef      	b.n	8005a42 <sbrk_aligned+0x1e>
 8005a62:	bf00      	nop
 8005a64:	20000450 	.word	0x20000450

08005a68 <_malloc_r>:
 8005a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	1ccd      	adds	r5, r1, #3
 8005a6e:	f025 0503 	bic.w	r5, r5, #3
 8005a72:	3508      	adds	r5, #8
 8005a74:	2d0c      	cmp	r5, #12
 8005a76:	bf38      	it	cc
 8005a78:	250c      	movcc	r5, #12
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	db01      	blt.n	8005a84 <_malloc_r+0x1c>
 8005a80:	42a9      	cmp	r1, r5
 8005a82:	d904      	bls.n	8005a8e <_malloc_r+0x26>
 8005a84:	230c      	movs	r3, #12
 8005a86:	6033      	str	r3, [r6, #0]
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b64 <_malloc_r+0xfc>
 8005a92:	f000 f869 	bl	8005b68 <__malloc_lock>
 8005a96:	f8d8 3000 	ldr.w	r3, [r8]
 8005a9a:	461c      	mov	r4, r3
 8005a9c:	bb44      	cbnz	r4, 8005af0 <_malloc_r+0x88>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff ffbf 	bl	8005a24 <sbrk_aligned>
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	d158      	bne.n	8005b5e <_malloc_r+0xf6>
 8005aac:	f8d8 4000 	ldr.w	r4, [r8]
 8005ab0:	4627      	mov	r7, r4
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	d143      	bne.n	8005b3e <_malloc_r+0xd6>
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	d04b      	beq.n	8005b52 <_malloc_r+0xea>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	4639      	mov	r1, r7
 8005abe:	4630      	mov	r0, r6
 8005ac0:	eb04 0903 	add.w	r9, r4, r3
 8005ac4:	f001 f932 	bl	8006d2c <_sbrk_r>
 8005ac8:	4581      	cmp	r9, r0
 8005aca:	d142      	bne.n	8005b52 <_malloc_r+0xea>
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	1a6d      	subs	r5, r5, r1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff ffa6 	bl	8005a24 <sbrk_aligned>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d03a      	beq.n	8005b52 <_malloc_r+0xea>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	442b      	add	r3, r5
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	bb62      	cbnz	r2, 8005b44 <_malloc_r+0xdc>
 8005aea:	f8c8 7000 	str.w	r7, [r8]
 8005aee:	e00f      	b.n	8005b10 <_malloc_r+0xa8>
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	1b52      	subs	r2, r2, r5
 8005af4:	d420      	bmi.n	8005b38 <_malloc_r+0xd0>
 8005af6:	2a0b      	cmp	r2, #11
 8005af8:	d917      	bls.n	8005b2a <_malloc_r+0xc2>
 8005afa:	1961      	adds	r1, r4, r5
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	6025      	str	r5, [r4, #0]
 8005b00:	bf18      	it	ne
 8005b02:	6059      	strne	r1, [r3, #4]
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	bf08      	it	eq
 8005b08:	f8c8 1000 	streq.w	r1, [r8]
 8005b0c:	5162      	str	r2, [r4, r5]
 8005b0e:	604b      	str	r3, [r1, #4]
 8005b10:	4630      	mov	r0, r6
 8005b12:	f000 f82f 	bl	8005b74 <__malloc_unlock>
 8005b16:	f104 000b 	add.w	r0, r4, #11
 8005b1a:	1d23      	adds	r3, r4, #4
 8005b1c:	f020 0007 	bic.w	r0, r0, #7
 8005b20:	1ac2      	subs	r2, r0, r3
 8005b22:	bf1c      	itt	ne
 8005b24:	1a1b      	subne	r3, r3, r0
 8005b26:	50a3      	strne	r3, [r4, r2]
 8005b28:	e7af      	b.n	8005a8a <_malloc_r+0x22>
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	bf0c      	ite	eq
 8005b30:	f8c8 2000 	streq.w	r2, [r8]
 8005b34:	605a      	strne	r2, [r3, #4]
 8005b36:	e7eb      	b.n	8005b10 <_malloc_r+0xa8>
 8005b38:	4623      	mov	r3, r4
 8005b3a:	6864      	ldr	r4, [r4, #4]
 8005b3c:	e7ae      	b.n	8005a9c <_malloc_r+0x34>
 8005b3e:	463c      	mov	r4, r7
 8005b40:	687f      	ldr	r7, [r7, #4]
 8005b42:	e7b6      	b.n	8005ab2 <_malloc_r+0x4a>
 8005b44:	461a      	mov	r2, r3
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	d1fb      	bne.n	8005b44 <_malloc_r+0xdc>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6053      	str	r3, [r2, #4]
 8005b50:	e7de      	b.n	8005b10 <_malloc_r+0xa8>
 8005b52:	230c      	movs	r3, #12
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 f80c 	bl	8005b74 <__malloc_unlock>
 8005b5c:	e794      	b.n	8005a88 <_malloc_r+0x20>
 8005b5e:	6005      	str	r5, [r0, #0]
 8005b60:	e7d6      	b.n	8005b10 <_malloc_r+0xa8>
 8005b62:	bf00      	nop
 8005b64:	20000454 	.word	0x20000454

08005b68 <__malloc_lock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	@ (8005b70 <__malloc_lock+0x8>)
 8005b6a:	f001 b92c 	b.w	8006dc6 <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	20000598 	.word	0x20000598

08005b74 <__malloc_unlock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	@ (8005b7c <__malloc_unlock+0x8>)
 8005b76:	f001 b927 	b.w	8006dc8 <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	20000598 	.word	0x20000598

08005b80 <__cvt>:
 8005b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	ec57 6b10 	vmov	r6, r7, d0
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	463b      	mov	r3, r7
 8005b90:	bfbb      	ittet	lt
 8005b92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b96:	461f      	movlt	r7, r3
 8005b98:	2300      	movge	r3, #0
 8005b9a:	232d      	movlt	r3, #45	@ 0x2d
 8005b9c:	700b      	strb	r3, [r1, #0]
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ba4:	4691      	mov	r9, r2
 8005ba6:	f023 0820 	bic.w	r8, r3, #32
 8005baa:	bfbc      	itt	lt
 8005bac:	4632      	movlt	r2, r6
 8005bae:	4616      	movlt	r6, r2
 8005bb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bb4:	d005      	beq.n	8005bc2 <__cvt+0x42>
 8005bb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bba:	d100      	bne.n	8005bbe <__cvt+0x3e>
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	e000      	b.n	8005bc4 <__cvt+0x44>
 8005bc2:	2103      	movs	r1, #3
 8005bc4:	ab03      	add	r3, sp, #12
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	ab02      	add	r3, sp, #8
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	ec47 6b10 	vmov	d0, r6, r7
 8005bd0:	4653      	mov	r3, sl
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	f001 f998 	bl	8006f08 <_dtoa_r>
 8005bd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bdc:	4605      	mov	r5, r0
 8005bde:	d119      	bne.n	8005c14 <__cvt+0x94>
 8005be0:	f019 0f01 	tst.w	r9, #1
 8005be4:	d00e      	beq.n	8005c04 <__cvt+0x84>
 8005be6:	eb00 0904 	add.w	r9, r0, r4
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa ff81 	bl	8000af8 <__aeabi_dcmpeq>
 8005bf6:	b108      	cbz	r0, 8005bfc <__cvt+0x7c>
 8005bf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bfc:	2230      	movs	r2, #48	@ 0x30
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	454b      	cmp	r3, r9
 8005c02:	d31e      	bcc.n	8005c42 <__cvt+0xc2>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c08:	1b5b      	subs	r3, r3, r5
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	b004      	add	sp, #16
 8005c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c18:	eb00 0904 	add.w	r9, r0, r4
 8005c1c:	d1e5      	bne.n	8005bea <__cvt+0x6a>
 8005c1e:	7803      	ldrb	r3, [r0, #0]
 8005c20:	2b30      	cmp	r3, #48	@ 0x30
 8005c22:	d10a      	bne.n	8005c3a <__cvt+0xba>
 8005c24:	2200      	movs	r2, #0
 8005c26:	2300      	movs	r3, #0
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa ff64 	bl	8000af8 <__aeabi_dcmpeq>
 8005c30:	b918      	cbnz	r0, 8005c3a <__cvt+0xba>
 8005c32:	f1c4 0401 	rsb	r4, r4, #1
 8005c36:	f8ca 4000 	str.w	r4, [sl]
 8005c3a:	f8da 3000 	ldr.w	r3, [sl]
 8005c3e:	4499      	add	r9, r3
 8005c40:	e7d3      	b.n	8005bea <__cvt+0x6a>
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	9103      	str	r1, [sp, #12]
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e7d9      	b.n	8005bfe <__cvt+0x7e>

08005c4a <__exponent>:
 8005c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	bfba      	itte	lt
 8005c50:	4249      	neglt	r1, r1
 8005c52:	232d      	movlt	r3, #45	@ 0x2d
 8005c54:	232b      	movge	r3, #43	@ 0x2b
 8005c56:	2909      	cmp	r1, #9
 8005c58:	7002      	strb	r2, [r0, #0]
 8005c5a:	7043      	strb	r3, [r0, #1]
 8005c5c:	dd29      	ble.n	8005cb2 <__exponent+0x68>
 8005c5e:	f10d 0307 	add.w	r3, sp, #7
 8005c62:	461d      	mov	r5, r3
 8005c64:	270a      	movs	r7, #10
 8005c66:	461a      	mov	r2, r3
 8005c68:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c6c:	fb07 1416 	mls	r4, r7, r6, r1
 8005c70:	3430      	adds	r4, #48	@ 0x30
 8005c72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c76:	460c      	mov	r4, r1
 8005c78:	2c63      	cmp	r4, #99	@ 0x63
 8005c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c7e:	4631      	mov	r1, r6
 8005c80:	dcf1      	bgt.n	8005c66 <__exponent+0x1c>
 8005c82:	3130      	adds	r1, #48	@ 0x30
 8005c84:	1e94      	subs	r4, r2, #2
 8005c86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c8a:	1c41      	adds	r1, r0, #1
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	42ab      	cmp	r3, r5
 8005c90:	d30a      	bcc.n	8005ca8 <__exponent+0x5e>
 8005c92:	f10d 0309 	add.w	r3, sp, #9
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	42ac      	cmp	r4, r5
 8005c9a:	bf88      	it	hi
 8005c9c:	2300      	movhi	r3, #0
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	4403      	add	r3, r0
 8005ca2:	1a18      	subs	r0, r3, r0
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005cac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005cb0:	e7ed      	b.n	8005c8e <__exponent+0x44>
 8005cb2:	2330      	movs	r3, #48	@ 0x30
 8005cb4:	3130      	adds	r1, #48	@ 0x30
 8005cb6:	7083      	strb	r3, [r0, #2]
 8005cb8:	70c1      	strb	r1, [r0, #3]
 8005cba:	1d03      	adds	r3, r0, #4
 8005cbc:	e7f1      	b.n	8005ca2 <__exponent+0x58>
	...

08005cc0 <_printf_float>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b08d      	sub	sp, #52	@ 0x34
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ccc:	4616      	mov	r6, r2
 8005cce:	461f      	mov	r7, r3
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f000 fff3 	bl	8006cbc <_localeconv_r>
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fae0 	bl	80002a0 <strlen>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	9005      	str	r0, [sp, #20]
 8005cea:	3307      	adds	r3, #7
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	f103 0208 	add.w	r2, r3, #8
 8005cf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cf8:	f8d4 b000 	ldr.w	fp, [r4]
 8005cfc:	f8c8 2000 	str.w	r2, [r8]
 8005d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d08:	9307      	str	r3, [sp, #28]
 8005d0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d16:	4b9c      	ldr	r3, [pc, #624]	@ (8005f88 <_printf_float+0x2c8>)
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	f7fa ff1e 	bl	8000b5c <__aeabi_dcmpun>
 8005d20:	bb70      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d26:	4b98      	ldr	r3, [pc, #608]	@ (8005f88 <_printf_float+0x2c8>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	f7fa fef8 	bl	8000b20 <__aeabi_dcmple>
 8005d30:	bb30      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fee7 	bl	8000b0c <__aeabi_dcmplt>
 8005d3e:	b110      	cbz	r0, 8005d46 <_printf_float+0x86>
 8005d40:	232d      	movs	r3, #45	@ 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d46:	4a91      	ldr	r2, [pc, #580]	@ (8005f8c <_printf_float+0x2cc>)
 8005d48:	4b91      	ldr	r3, [pc, #580]	@ (8005f90 <_printf_float+0x2d0>)
 8005d4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d4e:	bf94      	ite	ls
 8005d50:	4690      	movls	r8, r2
 8005d52:	4698      	movhi	r8, r3
 8005d54:	2303      	movs	r3, #3
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	f02b 0304 	bic.w	r3, fp, #4
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	9700      	str	r7, [sp, #0]
 8005d64:	4633      	mov	r3, r6
 8005d66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f9d2 	bl	8006114 <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f040 808d 	bne.w	8005e90 <_printf_float+0x1d0>
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	b00d      	add	sp, #52	@ 0x34
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fee8 	bl	8000b5c <__aeabi_dcmpun>
 8005d8c:	b140      	cbz	r0, 8005da0 <_printf_float+0xe0>
 8005d8e:	464b      	mov	r3, r9
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bfbc      	itt	lt
 8005d94:	232d      	movlt	r3, #45	@ 0x2d
 8005d96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f94 <_printf_float+0x2d4>)
 8005d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f98 <_printf_float+0x2d8>)
 8005d9e:	e7d4      	b.n	8005d4a <_printf_float+0x8a>
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005da6:	9206      	str	r2, [sp, #24]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	d13b      	bne.n	8005e24 <_printf_float+0x164>
 8005dac:	2306      	movs	r3, #6
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005db4:	2300      	movs	r3, #0
 8005db6:	6022      	str	r2, [r4, #0]
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	ab0a      	add	r3, sp, #40	@ 0x28
 8005dbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005dc0:	ab09      	add	r3, sp, #36	@ 0x24
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	ec49 8b10 	vmov	d0, r8, r9
 8005dca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f7ff fed6 	bl	8005b80 <__cvt>
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dd8:	2b47      	cmp	r3, #71	@ 0x47
 8005dda:	4680      	mov	r8, r0
 8005ddc:	d129      	bne.n	8005e32 <_printf_float+0x172>
 8005dde:	1cc8      	adds	r0, r1, #3
 8005de0:	db02      	blt.n	8005de8 <_printf_float+0x128>
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	4299      	cmp	r1, r3
 8005de6:	dd41      	ble.n	8005e6c <_printf_float+0x1ac>
 8005de8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dec:	fa5f fa8a 	uxtb.w	sl, sl
 8005df0:	3901      	subs	r1, #1
 8005df2:	4652      	mov	r2, sl
 8005df4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005df8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dfa:	f7ff ff26 	bl	8005c4a <__exponent>
 8005dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e00:	1813      	adds	r3, r2, r0
 8005e02:	2a01      	cmp	r2, #1
 8005e04:	4681      	mov	r9, r0
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	dc02      	bgt.n	8005e10 <_printf_float+0x150>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	07d2      	lsls	r2, r2, #31
 8005e0e:	d501      	bpl.n	8005e14 <_printf_float+0x154>
 8005e10:	3301      	adds	r3, #1
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0a2      	beq.n	8005d62 <_printf_float+0xa2>
 8005e1c:	232d      	movs	r3, #45	@ 0x2d
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e22:	e79e      	b.n	8005d62 <_printf_float+0xa2>
 8005e24:	9a06      	ldr	r2, [sp, #24]
 8005e26:	2a47      	cmp	r2, #71	@ 0x47
 8005e28:	d1c2      	bne.n	8005db0 <_printf_float+0xf0>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c0      	bne.n	8005db0 <_printf_float+0xf0>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e7bd      	b.n	8005dae <_printf_float+0xee>
 8005e32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e36:	d9db      	bls.n	8005df0 <_printf_float+0x130>
 8005e38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e3c:	d118      	bne.n	8005e70 <_printf_float+0x1b0>
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	dd0b      	ble.n	8005e5c <_printf_float+0x19c>
 8005e44:	6121      	str	r1, [r4, #16]
 8005e46:	b913      	cbnz	r3, 8005e4e <_printf_float+0x18e>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	07d0      	lsls	r0, r2, #31
 8005e4c:	d502      	bpl.n	8005e54 <_printf_float+0x194>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	440b      	add	r3, r1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	e7db      	b.n	8005e14 <_printf_float+0x154>
 8005e5c:	b913      	cbnz	r3, 8005e64 <_printf_float+0x1a4>
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	07d2      	lsls	r2, r2, #31
 8005e62:	d501      	bpl.n	8005e68 <_printf_float+0x1a8>
 8005e64:	3302      	adds	r3, #2
 8005e66:	e7f4      	b.n	8005e52 <_printf_float+0x192>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e7f2      	b.n	8005e52 <_printf_float+0x192>
 8005e6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e72:	4299      	cmp	r1, r3
 8005e74:	db05      	blt.n	8005e82 <_printf_float+0x1c2>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	6121      	str	r1, [r4, #16]
 8005e7a:	07d8      	lsls	r0, r3, #31
 8005e7c:	d5ea      	bpl.n	8005e54 <_printf_float+0x194>
 8005e7e:	1c4b      	adds	r3, r1, #1
 8005e80:	e7e7      	b.n	8005e52 <_printf_float+0x192>
 8005e82:	2900      	cmp	r1, #0
 8005e84:	bfd4      	ite	le
 8005e86:	f1c1 0202 	rsble	r2, r1, #2
 8005e8a:	2201      	movgt	r2, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	e7e0      	b.n	8005e52 <_printf_float+0x192>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	055a      	lsls	r2, r3, #21
 8005e94:	d407      	bmi.n	8005ea6 <_printf_float+0x1e6>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d12b      	bne.n	8005efc <_printf_float+0x23c>
 8005ea4:	e767      	b.n	8005d76 <_printf_float+0xb6>
 8005ea6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005eaa:	f240 80dd 	bls.w	8006068 <_printf_float+0x3a8>
 8005eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f7fa fe1f 	bl	8000af8 <__aeabi_dcmpeq>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d033      	beq.n	8005f26 <_printf_float+0x266>
 8005ebe:	4a37      	ldr	r2, [pc, #220]	@ (8005f9c <_printf_float+0x2dc>)
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f af54 	beq.w	8005d76 <_printf_float+0xb6>
 8005ece:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ed2:	4543      	cmp	r3, r8
 8005ed4:	db02      	blt.n	8005edc <_printf_float+0x21c>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	07d8      	lsls	r0, r3, #31
 8005eda:	d50f      	bpl.n	8005efc <_printf_float+0x23c>
 8005edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af45 	beq.w	8005d76 <_printf_float+0xb6>
 8005eec:	f04f 0900 	mov.w	r9, #0
 8005ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ef4:	f104 0a1a 	add.w	sl, r4, #26
 8005ef8:	45c8      	cmp	r8, r9
 8005efa:	dc09      	bgt.n	8005f10 <_printf_float+0x250>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	079b      	lsls	r3, r3, #30
 8005f00:	f100 8103 	bmi.w	800610a <_printf_float+0x44a>
 8005f04:	68e0      	ldr	r0, [r4, #12]
 8005f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f08:	4298      	cmp	r0, r3
 8005f0a:	bfb8      	it	lt
 8005f0c:	4618      	movlt	r0, r3
 8005f0e:	e734      	b.n	8005d7a <_printf_float+0xba>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4652      	mov	r2, sl
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af2b 	beq.w	8005d76 <_printf_float+0xb6>
 8005f20:	f109 0901 	add.w	r9, r9, #1
 8005f24:	e7e8      	b.n	8005ef8 <_printf_float+0x238>
 8005f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc39      	bgt.n	8005fa0 <_printf_float+0x2e0>
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <_printf_float+0x2dc>)
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f af1d 	beq.w	8005d76 <_printf_float+0xb6>
 8005f3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f40:	ea59 0303 	orrs.w	r3, r9, r3
 8005f44:	d102      	bne.n	8005f4c <_printf_float+0x28c>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	07d9      	lsls	r1, r3, #31
 8005f4a:	d5d7      	bpl.n	8005efc <_printf_float+0x23c>
 8005f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af0d 	beq.w	8005d76 <_printf_float+0xb6>
 8005f5c:	f04f 0a00 	mov.w	sl, #0
 8005f60:	f104 0b1a 	add.w	fp, r4, #26
 8005f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f66:	425b      	negs	r3, r3
 8005f68:	4553      	cmp	r3, sl
 8005f6a:	dc01      	bgt.n	8005f70 <_printf_float+0x2b0>
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	e793      	b.n	8005e98 <_printf_float+0x1d8>
 8005f70:	2301      	movs	r3, #1
 8005f72:	465a      	mov	r2, fp
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f aefb 	beq.w	8005d76 <_printf_float+0xb6>
 8005f80:	f10a 0a01 	add.w	sl, sl, #1
 8005f84:	e7ee      	b.n	8005f64 <_printf_float+0x2a4>
 8005f86:	bf00      	nop
 8005f88:	7fefffff 	.word	0x7fefffff
 8005f8c:	0800a2b4 	.word	0x0800a2b4
 8005f90:	0800a2b8 	.word	0x0800a2b8
 8005f94:	0800a2bc 	.word	0x0800a2bc
 8005f98:	0800a2c0 	.word	0x0800a2c0
 8005f9c:	0800a2c4 	.word	0x0800a2c4
 8005fa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fa6:	4553      	cmp	r3, sl
 8005fa8:	bfa8      	it	ge
 8005faa:	4653      	movge	r3, sl
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	4699      	mov	r9, r3
 8005fb0:	dc36      	bgt.n	8006020 <_printf_float+0x360>
 8005fb2:	f04f 0b00 	mov.w	fp, #0
 8005fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fba:	f104 021a 	add.w	r2, r4, #26
 8005fbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fc0:	9306      	str	r3, [sp, #24]
 8005fc2:	eba3 0309 	sub.w	r3, r3, r9
 8005fc6:	455b      	cmp	r3, fp
 8005fc8:	dc31      	bgt.n	800602e <_printf_float+0x36e>
 8005fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fcc:	459a      	cmp	sl, r3
 8005fce:	dc3a      	bgt.n	8006046 <_printf_float+0x386>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	07da      	lsls	r2, r3, #31
 8005fd4:	d437      	bmi.n	8006046 <_printf_float+0x386>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd8:	ebaa 0903 	sub.w	r9, sl, r3
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	ebaa 0303 	sub.w	r3, sl, r3
 8005fe2:	4599      	cmp	r9, r3
 8005fe4:	bfa8      	it	ge
 8005fe6:	4699      	movge	r9, r3
 8005fe8:	f1b9 0f00 	cmp.w	r9, #0
 8005fec:	dc33      	bgt.n	8006056 <_printf_float+0x396>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ff6:	f104 0b1a 	add.w	fp, r4, #26
 8005ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffc:	ebaa 0303 	sub.w	r3, sl, r3
 8006000:	eba3 0309 	sub.w	r3, r3, r9
 8006004:	4543      	cmp	r3, r8
 8006006:	f77f af79 	ble.w	8005efc <_printf_float+0x23c>
 800600a:	2301      	movs	r3, #1
 800600c:	465a      	mov	r2, fp
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f aeae 	beq.w	8005d76 <_printf_float+0xb6>
 800601a:	f108 0801 	add.w	r8, r8, #1
 800601e:	e7ec      	b.n	8005ffa <_printf_float+0x33a>
 8006020:	4642      	mov	r2, r8
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	d1c2      	bne.n	8005fb2 <_printf_float+0x2f2>
 800602c:	e6a3      	b.n	8005d76 <_printf_float+0xb6>
 800602e:	2301      	movs	r3, #1
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	9206      	str	r2, [sp, #24]
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae9c 	beq.w	8005d76 <_printf_float+0xb6>
 800603e:	9a06      	ldr	r2, [sp, #24]
 8006040:	f10b 0b01 	add.w	fp, fp, #1
 8006044:	e7bb      	b.n	8005fbe <_printf_float+0x2fe>
 8006046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	d1c0      	bne.n	8005fd6 <_printf_float+0x316>
 8006054:	e68f      	b.n	8005d76 <_printf_float+0xb6>
 8006056:	9a06      	ldr	r2, [sp, #24]
 8006058:	464b      	mov	r3, r9
 800605a:	4442      	add	r2, r8
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	d1c3      	bne.n	8005fee <_printf_float+0x32e>
 8006066:	e686      	b.n	8005d76 <_printf_float+0xb6>
 8006068:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800606c:	f1ba 0f01 	cmp.w	sl, #1
 8006070:	dc01      	bgt.n	8006076 <_printf_float+0x3b6>
 8006072:	07db      	lsls	r3, r3, #31
 8006074:	d536      	bpl.n	80060e4 <_printf_float+0x424>
 8006076:	2301      	movs	r3, #1
 8006078:	4642      	mov	r2, r8
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f ae78 	beq.w	8005d76 <_printf_float+0xb6>
 8006086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	f43f ae70 	beq.w	8005d76 <_printf_float+0xb6>
 8006096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a2:	f7fa fd29 	bl	8000af8 <__aeabi_dcmpeq>
 80060a6:	b9c0      	cbnz	r0, 80060da <_printf_float+0x41a>
 80060a8:	4653      	mov	r3, sl
 80060aa:	f108 0201 	add.w	r2, r8, #1
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d10c      	bne.n	80060d2 <_printf_float+0x412>
 80060b8:	e65d      	b.n	8005d76 <_printf_float+0xb6>
 80060ba:	2301      	movs	r3, #1
 80060bc:	465a      	mov	r2, fp
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f ae56 	beq.w	8005d76 <_printf_float+0xb6>
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	45d0      	cmp	r8, sl
 80060d0:	dbf3      	blt.n	80060ba <_printf_float+0x3fa>
 80060d2:	464b      	mov	r3, r9
 80060d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060d8:	e6df      	b.n	8005e9a <_printf_float+0x1da>
 80060da:	f04f 0800 	mov.w	r8, #0
 80060de:	f104 0b1a 	add.w	fp, r4, #26
 80060e2:	e7f4      	b.n	80060ce <_printf_float+0x40e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4642      	mov	r2, r8
 80060e8:	e7e1      	b.n	80060ae <_printf_float+0x3ee>
 80060ea:	2301      	movs	r3, #1
 80060ec:	464a      	mov	r2, r9
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	f43f ae3e 	beq.w	8005d76 <_printf_float+0xb6>
 80060fa:	f108 0801 	add.w	r8, r8, #1
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006102:	1a5b      	subs	r3, r3, r1
 8006104:	4543      	cmp	r3, r8
 8006106:	dcf0      	bgt.n	80060ea <_printf_float+0x42a>
 8006108:	e6fc      	b.n	8005f04 <_printf_float+0x244>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	f104 0919 	add.w	r9, r4, #25
 8006112:	e7f4      	b.n	80060fe <_printf_float+0x43e>

08006114 <_printf_common>:
 8006114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	4616      	mov	r6, r2
 800611a:	4698      	mov	r8, r3
 800611c:	688a      	ldr	r2, [r1, #8]
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006124:	4293      	cmp	r3, r2
 8006126:	bfb8      	it	lt
 8006128:	4613      	movlt	r3, r2
 800612a:	6033      	str	r3, [r6, #0]
 800612c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006130:	4607      	mov	r7, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b10a      	cbz	r2, 800613a <_printf_common+0x26>
 8006136:	3301      	adds	r3, #1
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	0699      	lsls	r1, r3, #26
 800613e:	bf42      	ittt	mi
 8006140:	6833      	ldrmi	r3, [r6, #0]
 8006142:	3302      	addmi	r3, #2
 8006144:	6033      	strmi	r3, [r6, #0]
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	f015 0506 	ands.w	r5, r5, #6
 800614c:	d106      	bne.n	800615c <_printf_common+0x48>
 800614e:	f104 0a19 	add.w	sl, r4, #25
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	6832      	ldr	r2, [r6, #0]
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	42ab      	cmp	r3, r5
 800615a:	dc26      	bgt.n	80061aa <_printf_common+0x96>
 800615c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	3b00      	subs	r3, #0
 8006164:	bf18      	it	ne
 8006166:	2301      	movne	r3, #1
 8006168:	0692      	lsls	r2, r2, #26
 800616a:	d42b      	bmi.n	80061c4 <_printf_common+0xb0>
 800616c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006170:	4641      	mov	r1, r8
 8006172:	4638      	mov	r0, r7
 8006174:	47c8      	blx	r9
 8006176:	3001      	adds	r0, #1
 8006178:	d01e      	beq.n	80061b8 <_printf_common+0xa4>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	f003 0306 	and.w	r3, r3, #6
 8006182:	2b04      	cmp	r3, #4
 8006184:	bf02      	ittt	eq
 8006186:	68e5      	ldreq	r5, [r4, #12]
 8006188:	6833      	ldreq	r3, [r6, #0]
 800618a:	1aed      	subeq	r5, r5, r3
 800618c:	68a3      	ldr	r3, [r4, #8]
 800618e:	bf0c      	ite	eq
 8006190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006194:	2500      	movne	r5, #0
 8006196:	4293      	cmp	r3, r2
 8006198:	bfc4      	itt	gt
 800619a:	1a9b      	subgt	r3, r3, r2
 800619c:	18ed      	addgt	r5, r5, r3
 800619e:	2600      	movs	r6, #0
 80061a0:	341a      	adds	r4, #26
 80061a2:	42b5      	cmp	r5, r6
 80061a4:	d11a      	bne.n	80061dc <_printf_common+0xc8>
 80061a6:	2000      	movs	r0, #0
 80061a8:	e008      	b.n	80061bc <_printf_common+0xa8>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4652      	mov	r2, sl
 80061ae:	4641      	mov	r1, r8
 80061b0:	4638      	mov	r0, r7
 80061b2:	47c8      	blx	r9
 80061b4:	3001      	adds	r0, #1
 80061b6:	d103      	bne.n	80061c0 <_printf_common+0xac>
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	3501      	adds	r5, #1
 80061c2:	e7c6      	b.n	8006152 <_printf_common+0x3e>
 80061c4:	18e1      	adds	r1, r4, r3
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	2030      	movs	r0, #48	@ 0x30
 80061ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ce:	4422      	add	r2, r4
 80061d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d8:	3302      	adds	r3, #2
 80061da:	e7c7      	b.n	800616c <_printf_common+0x58>
 80061dc:	2301      	movs	r3, #1
 80061de:	4622      	mov	r2, r4
 80061e0:	4641      	mov	r1, r8
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c8      	blx	r9
 80061e6:	3001      	adds	r0, #1
 80061e8:	d0e6      	beq.n	80061b8 <_printf_common+0xa4>
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7d9      	b.n	80061a2 <_printf_common+0x8e>
	...

080061f0 <_printf_i>:
 80061f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	7e0f      	ldrb	r7, [r1, #24]
 80061f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f8:	2f78      	cmp	r7, #120	@ 0x78
 80061fa:	4691      	mov	r9, r2
 80061fc:	4680      	mov	r8, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	469a      	mov	sl, r3
 8006202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006206:	d807      	bhi.n	8006218 <_printf_i+0x28>
 8006208:	2f62      	cmp	r7, #98	@ 0x62
 800620a:	d80a      	bhi.n	8006222 <_printf_i+0x32>
 800620c:	2f00      	cmp	r7, #0
 800620e:	f000 80d2 	beq.w	80063b6 <_printf_i+0x1c6>
 8006212:	2f58      	cmp	r7, #88	@ 0x58
 8006214:	f000 80b9 	beq.w	800638a <_printf_i+0x19a>
 8006218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800621c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006220:	e03a      	b.n	8006298 <_printf_i+0xa8>
 8006222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006226:	2b15      	cmp	r3, #21
 8006228:	d8f6      	bhi.n	8006218 <_printf_i+0x28>
 800622a:	a101      	add	r1, pc, #4	@ (adr r1, 8006230 <_printf_i+0x40>)
 800622c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006230:	08006289 	.word	0x08006289
 8006234:	0800629d 	.word	0x0800629d
 8006238:	08006219 	.word	0x08006219
 800623c:	08006219 	.word	0x08006219
 8006240:	08006219 	.word	0x08006219
 8006244:	08006219 	.word	0x08006219
 8006248:	0800629d 	.word	0x0800629d
 800624c:	08006219 	.word	0x08006219
 8006250:	08006219 	.word	0x08006219
 8006254:	08006219 	.word	0x08006219
 8006258:	08006219 	.word	0x08006219
 800625c:	0800639d 	.word	0x0800639d
 8006260:	080062c7 	.word	0x080062c7
 8006264:	08006357 	.word	0x08006357
 8006268:	08006219 	.word	0x08006219
 800626c:	08006219 	.word	0x08006219
 8006270:	080063bf 	.word	0x080063bf
 8006274:	08006219 	.word	0x08006219
 8006278:	080062c7 	.word	0x080062c7
 800627c:	08006219 	.word	0x08006219
 8006280:	08006219 	.word	0x08006219
 8006284:	0800635f 	.word	0x0800635f
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6032      	str	r2, [r6, #0]
 8006290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006298:	2301      	movs	r3, #1
 800629a:	e09d      	b.n	80063d8 <_printf_i+0x1e8>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	6820      	ldr	r0, [r4, #0]
 80062a0:	1d19      	adds	r1, r3, #4
 80062a2:	6031      	str	r1, [r6, #0]
 80062a4:	0606      	lsls	r6, r0, #24
 80062a6:	d501      	bpl.n	80062ac <_printf_i+0xbc>
 80062a8:	681d      	ldr	r5, [r3, #0]
 80062aa:	e003      	b.n	80062b4 <_printf_i+0xc4>
 80062ac:	0645      	lsls	r5, r0, #25
 80062ae:	d5fb      	bpl.n	80062a8 <_printf_i+0xb8>
 80062b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0xd0>
 80062b8:	232d      	movs	r3, #45	@ 0x2d
 80062ba:	426d      	negs	r5, r5
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c0:	4859      	ldr	r0, [pc, #356]	@ (8006428 <_printf_i+0x238>)
 80062c2:	230a      	movs	r3, #10
 80062c4:	e011      	b.n	80062ea <_printf_i+0xfa>
 80062c6:	6821      	ldr	r1, [r4, #0]
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	0608      	lsls	r0, r1, #24
 80062cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80062d0:	d402      	bmi.n	80062d8 <_printf_i+0xe8>
 80062d2:	0649      	lsls	r1, r1, #25
 80062d4:	bf48      	it	mi
 80062d6:	b2ad      	uxthmi	r5, r5
 80062d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062da:	4853      	ldr	r0, [pc, #332]	@ (8006428 <_printf_i+0x238>)
 80062dc:	6033      	str	r3, [r6, #0]
 80062de:	bf14      	ite	ne
 80062e0:	230a      	movne	r3, #10
 80062e2:	2308      	moveq	r3, #8
 80062e4:	2100      	movs	r1, #0
 80062e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ea:	6866      	ldr	r6, [r4, #4]
 80062ec:	60a6      	str	r6, [r4, #8]
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	bfa2      	ittt	ge
 80062f2:	6821      	ldrge	r1, [r4, #0]
 80062f4:	f021 0104 	bicge.w	r1, r1, #4
 80062f8:	6021      	strge	r1, [r4, #0]
 80062fa:	b90d      	cbnz	r5, 8006300 <_printf_i+0x110>
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	d04b      	beq.n	8006398 <_printf_i+0x1a8>
 8006300:	4616      	mov	r6, r2
 8006302:	fbb5 f1f3 	udiv	r1, r5, r3
 8006306:	fb03 5711 	mls	r7, r3, r1, r5
 800630a:	5dc7      	ldrb	r7, [r0, r7]
 800630c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006310:	462f      	mov	r7, r5
 8006312:	42bb      	cmp	r3, r7
 8006314:	460d      	mov	r5, r1
 8006316:	d9f4      	bls.n	8006302 <_printf_i+0x112>
 8006318:	2b08      	cmp	r3, #8
 800631a:	d10b      	bne.n	8006334 <_printf_i+0x144>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	07df      	lsls	r7, r3, #31
 8006320:	d508      	bpl.n	8006334 <_printf_i+0x144>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	6861      	ldr	r1, [r4, #4]
 8006326:	4299      	cmp	r1, r3
 8006328:	bfde      	ittt	le
 800632a:	2330      	movle	r3, #48	@ 0x30
 800632c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006334:	1b92      	subs	r2, r2, r6
 8006336:	6122      	str	r2, [r4, #16]
 8006338:	f8cd a000 	str.w	sl, [sp]
 800633c:	464b      	mov	r3, r9
 800633e:	aa03      	add	r2, sp, #12
 8006340:	4621      	mov	r1, r4
 8006342:	4640      	mov	r0, r8
 8006344:	f7ff fee6 	bl	8006114 <_printf_common>
 8006348:	3001      	adds	r0, #1
 800634a:	d14a      	bne.n	80063e2 <_printf_i+0x1f2>
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	b004      	add	sp, #16
 8006352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f043 0320 	orr.w	r3, r3, #32
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	4833      	ldr	r0, [pc, #204]	@ (800642c <_printf_i+0x23c>)
 8006360:	2778      	movs	r7, #120	@ 0x78
 8006362:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	6831      	ldr	r1, [r6, #0]
 800636a:	061f      	lsls	r7, r3, #24
 800636c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006370:	d402      	bmi.n	8006378 <_printf_i+0x188>
 8006372:	065f      	lsls	r7, r3, #25
 8006374:	bf48      	it	mi
 8006376:	b2ad      	uxthmi	r5, r5
 8006378:	6031      	str	r1, [r6, #0]
 800637a:	07d9      	lsls	r1, r3, #31
 800637c:	bf44      	itt	mi
 800637e:	f043 0320 	orrmi.w	r3, r3, #32
 8006382:	6023      	strmi	r3, [r4, #0]
 8006384:	b11d      	cbz	r5, 800638e <_printf_i+0x19e>
 8006386:	2310      	movs	r3, #16
 8006388:	e7ac      	b.n	80062e4 <_printf_i+0xf4>
 800638a:	4827      	ldr	r0, [pc, #156]	@ (8006428 <_printf_i+0x238>)
 800638c:	e7e9      	b.n	8006362 <_printf_i+0x172>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	f023 0320 	bic.w	r3, r3, #32
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	e7f6      	b.n	8006386 <_printf_i+0x196>
 8006398:	4616      	mov	r6, r2
 800639a:	e7bd      	b.n	8006318 <_printf_i+0x128>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	6825      	ldr	r5, [r4, #0]
 80063a0:	6961      	ldr	r1, [r4, #20]
 80063a2:	1d18      	adds	r0, r3, #4
 80063a4:	6030      	str	r0, [r6, #0]
 80063a6:	062e      	lsls	r6, r5, #24
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0x1c0>
 80063ac:	6019      	str	r1, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0x1c6>
 80063b0:	0668      	lsls	r0, r5, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0x1bc>
 80063b4:	8019      	strh	r1, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	4616      	mov	r6, r2
 80063bc:	e7bc      	b.n	8006338 <_printf_i+0x148>
 80063be:	6833      	ldr	r3, [r6, #0]
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	6032      	str	r2, [r6, #0]
 80063c4:	681e      	ldr	r6, [r3, #0]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7f9 ff18 	bl	8000200 <memchr>
 80063d0:	b108      	cbz	r0, 80063d6 <_printf_i+0x1e6>
 80063d2:	1b80      	subs	r0, r0, r6
 80063d4:	6060      	str	r0, [r4, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	2300      	movs	r3, #0
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e0:	e7aa      	b.n	8006338 <_printf_i+0x148>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d0ad      	beq.n	800634c <_printf_i+0x15c>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	079b      	lsls	r3, r3, #30
 80063f4:	d413      	bmi.n	800641e <_printf_i+0x22e>
 80063f6:	68e0      	ldr	r0, [r4, #12]
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	4298      	cmp	r0, r3
 80063fc:	bfb8      	it	lt
 80063fe:	4618      	movlt	r0, r3
 8006400:	e7a6      	b.n	8006350 <_printf_i+0x160>
 8006402:	2301      	movs	r3, #1
 8006404:	4632      	mov	r2, r6
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	47d0      	blx	sl
 800640c:	3001      	adds	r0, #1
 800640e:	d09d      	beq.n	800634c <_printf_i+0x15c>
 8006410:	3501      	adds	r5, #1
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	9903      	ldr	r1, [sp, #12]
 8006416:	1a5b      	subs	r3, r3, r1
 8006418:	42ab      	cmp	r3, r5
 800641a:	dcf2      	bgt.n	8006402 <_printf_i+0x212>
 800641c:	e7eb      	b.n	80063f6 <_printf_i+0x206>
 800641e:	2500      	movs	r5, #0
 8006420:	f104 0619 	add.w	r6, r4, #25
 8006424:	e7f5      	b.n	8006412 <_printf_i+0x222>
 8006426:	bf00      	nop
 8006428:	0800a2c6 	.word	0x0800a2c6
 800642c:	0800a2d7 	.word	0x0800a2d7

08006430 <_scanf_float>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	b087      	sub	sp, #28
 8006436:	4617      	mov	r7, r2
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	688b      	ldr	r3, [r1, #8]
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006442:	bf81      	itttt	hi
 8006444:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006448:	eb03 0b05 	addhi.w	fp, r3, r5
 800644c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006450:	608b      	strhi	r3, [r1, #8]
 8006452:	680b      	ldr	r3, [r1, #0]
 8006454:	460a      	mov	r2, r1
 8006456:	f04f 0500 	mov.w	r5, #0
 800645a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800645e:	f842 3b1c 	str.w	r3, [r2], #28
 8006462:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006466:	4680      	mov	r8, r0
 8006468:	460c      	mov	r4, r1
 800646a:	bf98      	it	ls
 800646c:	f04f 0b00 	movls.w	fp, #0
 8006470:	9201      	str	r2, [sp, #4]
 8006472:	4616      	mov	r6, r2
 8006474:	46aa      	mov	sl, r5
 8006476:	46a9      	mov	r9, r5
 8006478:	9502      	str	r5, [sp, #8]
 800647a:	68a2      	ldr	r2, [r4, #8]
 800647c:	b152      	cbz	r2, 8006494 <_scanf_float+0x64>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b4e      	cmp	r3, #78	@ 0x4e
 8006484:	d864      	bhi.n	8006550 <_scanf_float+0x120>
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d83c      	bhi.n	8006504 <_scanf_float+0xd4>
 800648a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800648e:	b2c8      	uxtb	r0, r1
 8006490:	280e      	cmp	r0, #14
 8006492:	d93a      	bls.n	800650a <_scanf_float+0xda>
 8006494:	f1b9 0f00 	cmp.w	r9, #0
 8006498:	d003      	beq.n	80064a2 <_scanf_float+0x72>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064a6:	f1ba 0f01 	cmp.w	sl, #1
 80064aa:	f200 8117 	bhi.w	80066dc <_scanf_float+0x2ac>
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	429e      	cmp	r6, r3
 80064b2:	f200 8108 	bhi.w	80066c6 <_scanf_float+0x296>
 80064b6:	2001      	movs	r0, #1
 80064b8:	b007      	add	sp, #28
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064be:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80064c2:	2a0d      	cmp	r2, #13
 80064c4:	d8e6      	bhi.n	8006494 <_scanf_float+0x64>
 80064c6:	a101      	add	r1, pc, #4	@ (adr r1, 80064cc <_scanf_float+0x9c>)
 80064c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064cc:	08006613 	.word	0x08006613
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006495 	.word	0x08006495
 80064dc:	08006673 	.word	0x08006673
 80064e0:	0800664b 	.word	0x0800664b
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	08006621 	.word	0x08006621
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006495 	.word	0x08006495
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065d9 	.word	0x080065d9
 8006504:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006508:	e7db      	b.n	80064c2 <_scanf_float+0x92>
 800650a:	290e      	cmp	r1, #14
 800650c:	d8c2      	bhi.n	8006494 <_scanf_float+0x64>
 800650e:	a001      	add	r0, pc, #4	@ (adr r0, 8006514 <_scanf_float+0xe4>)
 8006510:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006514:	080065c9 	.word	0x080065c9
 8006518:	08006495 	.word	0x08006495
 800651c:	080065c9 	.word	0x080065c9
 8006520:	0800665f 	.word	0x0800665f
 8006524:	08006495 	.word	0x08006495
 8006528:	08006571 	.word	0x08006571
 800652c:	080065af 	.word	0x080065af
 8006530:	080065af 	.word	0x080065af
 8006534:	080065af 	.word	0x080065af
 8006538:	080065af 	.word	0x080065af
 800653c:	080065af 	.word	0x080065af
 8006540:	080065af 	.word	0x080065af
 8006544:	080065af 	.word	0x080065af
 8006548:	080065af 	.word	0x080065af
 800654c:	080065af 	.word	0x080065af
 8006550:	2b6e      	cmp	r3, #110	@ 0x6e
 8006552:	d809      	bhi.n	8006568 <_scanf_float+0x138>
 8006554:	2b60      	cmp	r3, #96	@ 0x60
 8006556:	d8b2      	bhi.n	80064be <_scanf_float+0x8e>
 8006558:	2b54      	cmp	r3, #84	@ 0x54
 800655a:	d07b      	beq.n	8006654 <_scanf_float+0x224>
 800655c:	2b59      	cmp	r3, #89	@ 0x59
 800655e:	d199      	bne.n	8006494 <_scanf_float+0x64>
 8006560:	2d07      	cmp	r5, #7
 8006562:	d197      	bne.n	8006494 <_scanf_float+0x64>
 8006564:	2508      	movs	r5, #8
 8006566:	e02c      	b.n	80065c2 <_scanf_float+0x192>
 8006568:	2b74      	cmp	r3, #116	@ 0x74
 800656a:	d073      	beq.n	8006654 <_scanf_float+0x224>
 800656c:	2b79      	cmp	r3, #121	@ 0x79
 800656e:	e7f6      	b.n	800655e <_scanf_float+0x12e>
 8006570:	6821      	ldr	r1, [r4, #0]
 8006572:	05c8      	lsls	r0, r1, #23
 8006574:	d51b      	bpl.n	80065ae <_scanf_float+0x17e>
 8006576:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800657a:	6021      	str	r1, [r4, #0]
 800657c:	f109 0901 	add.w	r9, r9, #1
 8006580:	f1bb 0f00 	cmp.w	fp, #0
 8006584:	d003      	beq.n	800658e <_scanf_float+0x15e>
 8006586:	3201      	adds	r2, #1
 8006588:	f10b 3bff 	add.w	fp, fp, #4294967295
 800658c:	60a2      	str	r2, [r4, #8]
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	3b01      	subs	r3, #1
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	3301      	adds	r3, #1
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3b01      	subs	r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
 80065a2:	f340 8087 	ble.w	80066b4 <_scanf_float+0x284>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	e765      	b.n	800647a <_scanf_float+0x4a>
 80065ae:	eb1a 0105 	adds.w	r1, sl, r5
 80065b2:	f47f af6f 	bne.w	8006494 <_scanf_float+0x64>
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80065bc:	6022      	str	r2, [r4, #0]
 80065be:	460d      	mov	r5, r1
 80065c0:	468a      	mov	sl, r1
 80065c2:	f806 3b01 	strb.w	r3, [r6], #1
 80065c6:	e7e2      	b.n	800658e <_scanf_float+0x15e>
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	0610      	lsls	r0, r2, #24
 80065cc:	f57f af62 	bpl.w	8006494 <_scanf_float+0x64>
 80065d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	e7f4      	b.n	80065c2 <_scanf_float+0x192>
 80065d8:	f1ba 0f00 	cmp.w	sl, #0
 80065dc:	d10e      	bne.n	80065fc <_scanf_float+0x1cc>
 80065de:	f1b9 0f00 	cmp.w	r9, #0
 80065e2:	d10e      	bne.n	8006602 <_scanf_float+0x1d2>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065ee:	d108      	bne.n	8006602 <_scanf_float+0x1d2>
 80065f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	f04f 0a01 	mov.w	sl, #1
 80065fa:	e7e2      	b.n	80065c2 <_scanf_float+0x192>
 80065fc:	f1ba 0f02 	cmp.w	sl, #2
 8006600:	d055      	beq.n	80066ae <_scanf_float+0x27e>
 8006602:	2d01      	cmp	r5, #1
 8006604:	d002      	beq.n	800660c <_scanf_float+0x1dc>
 8006606:	2d04      	cmp	r5, #4
 8006608:	f47f af44 	bne.w	8006494 <_scanf_float+0x64>
 800660c:	3501      	adds	r5, #1
 800660e:	b2ed      	uxtb	r5, r5
 8006610:	e7d7      	b.n	80065c2 <_scanf_float+0x192>
 8006612:	f1ba 0f01 	cmp.w	sl, #1
 8006616:	f47f af3d 	bne.w	8006494 <_scanf_float+0x64>
 800661a:	f04f 0a02 	mov.w	sl, #2
 800661e:	e7d0      	b.n	80065c2 <_scanf_float+0x192>
 8006620:	b97d      	cbnz	r5, 8006642 <_scanf_float+0x212>
 8006622:	f1b9 0f00 	cmp.w	r9, #0
 8006626:	f47f af38 	bne.w	800649a <_scanf_float+0x6a>
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006630:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006634:	f040 8108 	bne.w	8006848 <_scanf_float+0x418>
 8006638:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	2501      	movs	r5, #1
 8006640:	e7bf      	b.n	80065c2 <_scanf_float+0x192>
 8006642:	2d03      	cmp	r5, #3
 8006644:	d0e2      	beq.n	800660c <_scanf_float+0x1dc>
 8006646:	2d05      	cmp	r5, #5
 8006648:	e7de      	b.n	8006608 <_scanf_float+0x1d8>
 800664a:	2d02      	cmp	r5, #2
 800664c:	f47f af22 	bne.w	8006494 <_scanf_float+0x64>
 8006650:	2503      	movs	r5, #3
 8006652:	e7b6      	b.n	80065c2 <_scanf_float+0x192>
 8006654:	2d06      	cmp	r5, #6
 8006656:	f47f af1d 	bne.w	8006494 <_scanf_float+0x64>
 800665a:	2507      	movs	r5, #7
 800665c:	e7b1      	b.n	80065c2 <_scanf_float+0x192>
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	0591      	lsls	r1, r2, #22
 8006662:	f57f af17 	bpl.w	8006494 <_scanf_float+0x64>
 8006666:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006670:	e7a7      	b.n	80065c2 <_scanf_float+0x192>
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006678:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800667c:	d006      	beq.n	800668c <_scanf_float+0x25c>
 800667e:	0550      	lsls	r0, r2, #21
 8006680:	f57f af08 	bpl.w	8006494 <_scanf_float+0x64>
 8006684:	f1b9 0f00 	cmp.w	r9, #0
 8006688:	f000 80de 	beq.w	8006848 <_scanf_float+0x418>
 800668c:	0591      	lsls	r1, r2, #22
 800668e:	bf58      	it	pl
 8006690:	9902      	ldrpl	r1, [sp, #8]
 8006692:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006696:	bf58      	it	pl
 8006698:	eba9 0101 	subpl.w	r1, r9, r1
 800669c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80066a0:	bf58      	it	pl
 80066a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	f04f 0900 	mov.w	r9, #0
 80066ac:	e789      	b.n	80065c2 <_scanf_float+0x192>
 80066ae:	f04f 0a03 	mov.w	sl, #3
 80066b2:	e786      	b.n	80065c2 <_scanf_float+0x192>
 80066b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80066b8:	4639      	mov	r1, r7
 80066ba:	4640      	mov	r0, r8
 80066bc:	4798      	blx	r3
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f aedb 	beq.w	800647a <_scanf_float+0x4a>
 80066c4:	e6e6      	b.n	8006494 <_scanf_float+0x64>
 80066c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066ce:	463a      	mov	r2, r7
 80066d0:	4640      	mov	r0, r8
 80066d2:	4798      	blx	r3
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	6123      	str	r3, [r4, #16]
 80066da:	e6e8      	b.n	80064ae <_scanf_float+0x7e>
 80066dc:	1e6b      	subs	r3, r5, #1
 80066de:	2b06      	cmp	r3, #6
 80066e0:	d824      	bhi.n	800672c <_scanf_float+0x2fc>
 80066e2:	2d02      	cmp	r5, #2
 80066e4:	d836      	bhi.n	8006754 <_scanf_float+0x324>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	429e      	cmp	r6, r3
 80066ea:	f67f aee4 	bls.w	80064b6 <_scanf_float+0x86>
 80066ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066f6:	463a      	mov	r2, r7
 80066f8:	4640      	mov	r0, r8
 80066fa:	4798      	blx	r3
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	e7f0      	b.n	80066e6 <_scanf_float+0x2b6>
 8006704:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006708:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800670c:	463a      	mov	r2, r7
 800670e:	4640      	mov	r0, r8
 8006710:	4798      	blx	r3
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	3b01      	subs	r3, #1
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	f10a 3aff 	add.w	sl, sl, #4294967295
 800671c:	fa5f fa8a 	uxtb.w	sl, sl
 8006720:	f1ba 0f02 	cmp.w	sl, #2
 8006724:	d1ee      	bne.n	8006704 <_scanf_float+0x2d4>
 8006726:	3d03      	subs	r5, #3
 8006728:	b2ed      	uxtb	r5, r5
 800672a:	1b76      	subs	r6, r6, r5
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	05da      	lsls	r2, r3, #23
 8006730:	d530      	bpl.n	8006794 <_scanf_float+0x364>
 8006732:	055b      	lsls	r3, r3, #21
 8006734:	d511      	bpl.n	800675a <_scanf_float+0x32a>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	429e      	cmp	r6, r3
 800673a:	f67f aebc 	bls.w	80064b6 <_scanf_float+0x86>
 800673e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006746:	463a      	mov	r2, r7
 8006748:	4640      	mov	r0, r8
 800674a:	4798      	blx	r3
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	3b01      	subs	r3, #1
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	e7f0      	b.n	8006736 <_scanf_float+0x306>
 8006754:	46aa      	mov	sl, r5
 8006756:	46b3      	mov	fp, r6
 8006758:	e7de      	b.n	8006718 <_scanf_float+0x2e8>
 800675a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	2965      	cmp	r1, #101	@ 0x65
 8006762:	f103 33ff 	add.w	r3, r3, #4294967295
 8006766:	f106 35ff 	add.w	r5, r6, #4294967295
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	d00c      	beq.n	8006788 <_scanf_float+0x358>
 800676e:	2945      	cmp	r1, #69	@ 0x45
 8006770:	d00a      	beq.n	8006788 <_scanf_float+0x358>
 8006772:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006776:	463a      	mov	r2, r7
 8006778:	4640      	mov	r0, r8
 800677a:	4798      	blx	r3
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006782:	3b01      	subs	r3, #1
 8006784:	1eb5      	subs	r5, r6, #2
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800678c:	463a      	mov	r2, r7
 800678e:	4640      	mov	r0, r8
 8006790:	4798      	blx	r3
 8006792:	462e      	mov	r6, r5
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	f012 0210 	ands.w	r2, r2, #16
 800679a:	d001      	beq.n	80067a0 <_scanf_float+0x370>
 800679c:	2000      	movs	r0, #0
 800679e:	e68b      	b.n	80064b8 <_scanf_float+0x88>
 80067a0:	7032      	strb	r2, [r6, #0]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ac:	d11c      	bne.n	80067e8 <_scanf_float+0x3b8>
 80067ae:	9b02      	ldr	r3, [sp, #8]
 80067b0:	454b      	cmp	r3, r9
 80067b2:	eba3 0209 	sub.w	r2, r3, r9
 80067b6:	d123      	bne.n	8006800 <_scanf_float+0x3d0>
 80067b8:	9901      	ldr	r1, [sp, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	4640      	mov	r0, r8
 80067be:	f002 fc67 	bl	8009090 <_strtod_r>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	6821      	ldr	r1, [r4, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f011 0f02 	tst.w	r1, #2
 80067cc:	ec57 6b10 	vmov	r6, r7, d0
 80067d0:	f103 0204 	add.w	r2, r3, #4
 80067d4:	d01f      	beq.n	8006816 <_scanf_float+0x3e6>
 80067d6:	9903      	ldr	r1, [sp, #12]
 80067d8:	600a      	str	r2, [r1, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	e9c3 6700 	strd	r6, r7, [r3]
 80067e0:	68e3      	ldr	r3, [r4, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60e3      	str	r3, [r4, #12]
 80067e6:	e7d9      	b.n	800679c <_scanf_float+0x36c>
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0e4      	beq.n	80067b8 <_scanf_float+0x388>
 80067ee:	9905      	ldr	r1, [sp, #20]
 80067f0:	230a      	movs	r3, #10
 80067f2:	3101      	adds	r1, #1
 80067f4:	4640      	mov	r0, r8
 80067f6:	f002 fccb 	bl	8009190 <_strtol_r>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	9e05      	ldr	r6, [sp, #20]
 80067fe:	1ac2      	subs	r2, r0, r3
 8006800:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006804:	429e      	cmp	r6, r3
 8006806:	bf28      	it	cs
 8006808:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800680c:	4910      	ldr	r1, [pc, #64]	@ (8006850 <_scanf_float+0x420>)
 800680e:	4630      	mov	r0, r6
 8006810:	f000 f954 	bl	8006abc <siprintf>
 8006814:	e7d0      	b.n	80067b8 <_scanf_float+0x388>
 8006816:	f011 0f04 	tst.w	r1, #4
 800681a:	9903      	ldr	r1, [sp, #12]
 800681c:	600a      	str	r2, [r1, #0]
 800681e:	d1dc      	bne.n	80067da <_scanf_float+0x3aa>
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	4632      	mov	r2, r6
 8006824:	463b      	mov	r3, r7
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f997 	bl	8000b5c <__aeabi_dcmpun>
 800682e:	b128      	cbz	r0, 800683c <_scanf_float+0x40c>
 8006830:	4808      	ldr	r0, [pc, #32]	@ (8006854 <_scanf_float+0x424>)
 8006832:	f000 fad9 	bl	8006de8 <nanf>
 8006836:	ed85 0a00 	vstr	s0, [r5]
 800683a:	e7d1      	b.n	80067e0 <_scanf_float+0x3b0>
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f9ea 	bl	8000c18 <__aeabi_d2f>
 8006844:	6028      	str	r0, [r5, #0]
 8006846:	e7cb      	b.n	80067e0 <_scanf_float+0x3b0>
 8006848:	f04f 0900 	mov.w	r9, #0
 800684c:	e629      	b.n	80064a2 <_scanf_float+0x72>
 800684e:	bf00      	nop
 8006850:	0800a2e8 	.word	0x0800a2e8
 8006854:	0800a67d 	.word	0x0800a67d

08006858 <std>:
 8006858:	2300      	movs	r3, #0
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	e9c0 3300 	strd	r3, r3, [r0]
 8006862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006866:	6083      	str	r3, [r0, #8]
 8006868:	8181      	strh	r1, [r0, #12]
 800686a:	6643      	str	r3, [r0, #100]	@ 0x64
 800686c:	81c2      	strh	r2, [r0, #14]
 800686e:	6183      	str	r3, [r0, #24]
 8006870:	4619      	mov	r1, r3
 8006872:	2208      	movs	r2, #8
 8006874:	305c      	adds	r0, #92	@ 0x5c
 8006876:	f000 fa19 	bl	8006cac <memset>
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <std+0x58>)
 800687c:	6263      	str	r3, [r4, #36]	@ 0x24
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <std+0x5c>)
 8006880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <std+0x60>)
 8006884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <std+0x64>)
 8006888:	6323      	str	r3, [r4, #48]	@ 0x30
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <std+0x68>)
 800688c:	6224      	str	r4, [r4, #32]
 800688e:	429c      	cmp	r4, r3
 8006890:	d006      	beq.n	80068a0 <std+0x48>
 8006892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006896:	4294      	cmp	r4, r2
 8006898:	d002      	beq.n	80068a0 <std+0x48>
 800689a:	33d0      	adds	r3, #208	@ 0xd0
 800689c:	429c      	cmp	r4, r3
 800689e:	d105      	bne.n	80068ac <std+0x54>
 80068a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a8:	f000 ba8c 	b.w	8006dc4 <__retarget_lock_init_recursive>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	bf00      	nop
 80068b0:	08006afd 	.word	0x08006afd
 80068b4:	08006b1f 	.word	0x08006b1f
 80068b8:	08006b57 	.word	0x08006b57
 80068bc:	08006b7b 	.word	0x08006b7b
 80068c0:	20000458 	.word	0x20000458

080068c4 <stdio_exit_handler>:
 80068c4:	4a02      	ldr	r2, [pc, #8]	@ (80068d0 <stdio_exit_handler+0xc>)
 80068c6:	4903      	ldr	r1, [pc, #12]	@ (80068d4 <stdio_exit_handler+0x10>)
 80068c8:	4803      	ldr	r0, [pc, #12]	@ (80068d8 <stdio_exit_handler+0x14>)
 80068ca:	f000 b869 	b.w	80069a0 <_fwalk_sglue>
 80068ce:	bf00      	nop
 80068d0:	20000010 	.word	0x20000010
 80068d4:	080097d1 	.word	0x080097d1
 80068d8:	20000020 	.word	0x20000020

080068dc <cleanup_stdio>:
 80068dc:	6841      	ldr	r1, [r0, #4]
 80068de:	4b0c      	ldr	r3, [pc, #48]	@ (8006910 <cleanup_stdio+0x34>)
 80068e0:	4299      	cmp	r1, r3
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	d001      	beq.n	80068ec <cleanup_stdio+0x10>
 80068e8:	f002 ff72 	bl	80097d0 <_fflush_r>
 80068ec:	68a1      	ldr	r1, [r4, #8]
 80068ee:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <cleanup_stdio+0x38>)
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d002      	beq.n	80068fa <cleanup_stdio+0x1e>
 80068f4:	4620      	mov	r0, r4
 80068f6:	f002 ff6b 	bl	80097d0 <_fflush_r>
 80068fa:	68e1      	ldr	r1, [r4, #12]
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <cleanup_stdio+0x3c>)
 80068fe:	4299      	cmp	r1, r3
 8006900:	d004      	beq.n	800690c <cleanup_stdio+0x30>
 8006902:	4620      	mov	r0, r4
 8006904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006908:	f002 bf62 	b.w	80097d0 <_fflush_r>
 800690c:	bd10      	pop	{r4, pc}
 800690e:	bf00      	nop
 8006910:	20000458 	.word	0x20000458
 8006914:	200004c0 	.word	0x200004c0
 8006918:	20000528 	.word	0x20000528

0800691c <global_stdio_init.part.0>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <global_stdio_init.part.0+0x30>)
 8006920:	4c0b      	ldr	r4, [pc, #44]	@ (8006950 <global_stdio_init.part.0+0x34>)
 8006922:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <global_stdio_init.part.0+0x38>)
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	4620      	mov	r0, r4
 8006928:	2200      	movs	r2, #0
 800692a:	2104      	movs	r1, #4
 800692c:	f7ff ff94 	bl	8006858 <std>
 8006930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006934:	2201      	movs	r2, #1
 8006936:	2109      	movs	r1, #9
 8006938:	f7ff ff8e 	bl	8006858 <std>
 800693c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006940:	2202      	movs	r2, #2
 8006942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006946:	2112      	movs	r1, #18
 8006948:	f7ff bf86 	b.w	8006858 <std>
 800694c:	20000590 	.word	0x20000590
 8006950:	20000458 	.word	0x20000458
 8006954:	080068c5 	.word	0x080068c5

08006958 <__sfp_lock_acquire>:
 8006958:	4801      	ldr	r0, [pc, #4]	@ (8006960 <__sfp_lock_acquire+0x8>)
 800695a:	f000 ba34 	b.w	8006dc6 <__retarget_lock_acquire_recursive>
 800695e:	bf00      	nop
 8006960:	20000599 	.word	0x20000599

08006964 <__sfp_lock_release>:
 8006964:	4801      	ldr	r0, [pc, #4]	@ (800696c <__sfp_lock_release+0x8>)
 8006966:	f000 ba2f 	b.w	8006dc8 <__retarget_lock_release_recursive>
 800696a:	bf00      	nop
 800696c:	20000599 	.word	0x20000599

08006970 <__sinit>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	f7ff fff0 	bl	8006958 <__sfp_lock_acquire>
 8006978:	6a23      	ldr	r3, [r4, #32]
 800697a:	b11b      	cbz	r3, 8006984 <__sinit+0x14>
 800697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006980:	f7ff bff0 	b.w	8006964 <__sfp_lock_release>
 8006984:	4b04      	ldr	r3, [pc, #16]	@ (8006998 <__sinit+0x28>)
 8006986:	6223      	str	r3, [r4, #32]
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <__sinit+0x2c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f5      	bne.n	800697c <__sinit+0xc>
 8006990:	f7ff ffc4 	bl	800691c <global_stdio_init.part.0>
 8006994:	e7f2      	b.n	800697c <__sinit+0xc>
 8006996:	bf00      	nop
 8006998:	080068dd 	.word	0x080068dd
 800699c:	20000590 	.word	0x20000590

080069a0 <_fwalk_sglue>:
 80069a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	4607      	mov	r7, r0
 80069a6:	4688      	mov	r8, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	2600      	movs	r6, #0
 80069ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069b0:	f1b9 0901 	subs.w	r9, r9, #1
 80069b4:	d505      	bpl.n	80069c2 <_fwalk_sglue+0x22>
 80069b6:	6824      	ldr	r4, [r4, #0]
 80069b8:	2c00      	cmp	r4, #0
 80069ba:	d1f7      	bne.n	80069ac <_fwalk_sglue+0xc>
 80069bc:	4630      	mov	r0, r6
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d907      	bls.n	80069d8 <_fwalk_sglue+0x38>
 80069c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069cc:	3301      	adds	r3, #1
 80069ce:	d003      	beq.n	80069d8 <_fwalk_sglue+0x38>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	4306      	orrs	r6, r0
 80069d8:	3568      	adds	r5, #104	@ 0x68
 80069da:	e7e9      	b.n	80069b0 <_fwalk_sglue+0x10>

080069dc <iprintf>:
 80069dc:	b40f      	push	{r0, r1, r2, r3}
 80069de:	b507      	push	{r0, r1, r2, lr}
 80069e0:	4906      	ldr	r1, [pc, #24]	@ (80069fc <iprintf+0x20>)
 80069e2:	ab04      	add	r3, sp, #16
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ea:	6881      	ldr	r1, [r0, #8]
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f002 fd53 	bl	8009498 <_vfiprintf_r>
 80069f2:	b003      	add	sp, #12
 80069f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f8:	b004      	add	sp, #16
 80069fa:	4770      	bx	lr
 80069fc:	2000001c 	.word	0x2000001c

08006a00 <_puts_r>:
 8006a00:	6a03      	ldr	r3, [r0, #32]
 8006a02:	b570      	push	{r4, r5, r6, lr}
 8006a04:	6884      	ldr	r4, [r0, #8]
 8006a06:	4605      	mov	r5, r0
 8006a08:	460e      	mov	r6, r1
 8006a0a:	b90b      	cbnz	r3, 8006a10 <_puts_r+0x10>
 8006a0c:	f7ff ffb0 	bl	8006970 <__sinit>
 8006a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a12:	07db      	lsls	r3, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_puts_r+0x22>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	0598      	lsls	r0, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_puts_r+0x22>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a1e:	f000 f9d2 	bl	8006dc6 <__retarget_lock_acquire_recursive>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	0719      	lsls	r1, r3, #28
 8006a26:	d502      	bpl.n	8006a2e <_puts_r+0x2e>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d135      	bne.n	8006a9a <_puts_r+0x9a>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 f8e5 	bl	8006c00 <__swsetup_r>
 8006a36:	b380      	cbz	r0, 8006a9a <_puts_r+0x9a>
 8006a38:	f04f 35ff 	mov.w	r5, #4294967295
 8006a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a3e:	07da      	lsls	r2, r3, #31
 8006a40:	d405      	bmi.n	8006a4e <_puts_r+0x4e>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	059b      	lsls	r3, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <_puts_r+0x4e>
 8006a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a4a:	f000 f9bd 	bl	8006dc8 <__retarget_lock_release_recursive>
 8006a4e:	4628      	mov	r0, r5
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da04      	bge.n	8006a60 <_puts_r+0x60>
 8006a56:	69a2      	ldr	r2, [r4, #24]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	dc17      	bgt.n	8006a8c <_puts_r+0x8c>
 8006a5c:	290a      	cmp	r1, #10
 8006a5e:	d015      	beq.n	8006a8c <_puts_r+0x8c>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	6022      	str	r2, [r4, #0]
 8006a66:	7019      	strb	r1, [r3, #0]
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	2900      	cmp	r1, #0
 8006a74:	d1ed      	bne.n	8006a52 <_puts_r+0x52>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da11      	bge.n	8006a9e <_puts_r+0x9e>
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	210a      	movs	r1, #10
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 f87f 	bl	8006b82 <__swbuf_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	d0d7      	beq.n	8006a38 <_puts_r+0x38>
 8006a88:	250a      	movs	r5, #10
 8006a8a:	e7d7      	b.n	8006a3c <_puts_r+0x3c>
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f877 	bl	8006b82 <__swbuf_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d1e7      	bne.n	8006a68 <_puts_r+0x68>
 8006a98:	e7ce      	b.n	8006a38 <_puts_r+0x38>
 8006a9a:	3e01      	subs	r6, #1
 8006a9c:	e7e4      	b.n	8006a68 <_puts_r+0x68>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e7ee      	b.n	8006a88 <_puts_r+0x88>
	...

08006aac <puts>:
 8006aac:	4b02      	ldr	r3, [pc, #8]	@ (8006ab8 <puts+0xc>)
 8006aae:	4601      	mov	r1, r0
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f7ff bfa5 	b.w	8006a00 <_puts_r>
 8006ab6:	bf00      	nop
 8006ab8:	2000001c 	.word	0x2000001c

08006abc <siprintf>:
 8006abc:	b40e      	push	{r1, r2, r3}
 8006abe:	b500      	push	{lr}
 8006ac0:	b09c      	sub	sp, #112	@ 0x70
 8006ac2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ac4:	9002      	str	r0, [sp, #8]
 8006ac6:	9006      	str	r0, [sp, #24]
 8006ac8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006acc:	4809      	ldr	r0, [pc, #36]	@ (8006af4 <siprintf+0x38>)
 8006ace:	9107      	str	r1, [sp, #28]
 8006ad0:	9104      	str	r1, [sp, #16]
 8006ad2:	4909      	ldr	r1, [pc, #36]	@ (8006af8 <siprintf+0x3c>)
 8006ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	a902      	add	r1, sp, #8
 8006ae0:	f002 fbb4 	bl	800924c <_svfiprintf_r>
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	b01c      	add	sp, #112	@ 0x70
 8006aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006af0:	b003      	add	sp, #12
 8006af2:	4770      	bx	lr
 8006af4:	2000001c 	.word	0x2000001c
 8006af8:	ffff0208 	.word	0xffff0208

08006afc <__sread>:
 8006afc:	b510      	push	{r4, lr}
 8006afe:	460c      	mov	r4, r1
 8006b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b04:	f000 f900 	bl	8006d08 <_read_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	bfab      	itete	ge
 8006b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b10:	181b      	addge	r3, r3, r0
 8006b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b16:	bfac      	ite	ge
 8006b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b1a:	81a3      	strhlt	r3, [r4, #12]
 8006b1c:	bd10      	pop	{r4, pc}

08006b1e <__swrite>:
 8006b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b22:	461f      	mov	r7, r3
 8006b24:	898b      	ldrh	r3, [r1, #12]
 8006b26:	05db      	lsls	r3, r3, #23
 8006b28:	4605      	mov	r5, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	d505      	bpl.n	8006b3c <__swrite+0x1e>
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	2302      	movs	r3, #2
 8006b36:	2200      	movs	r2, #0
 8006b38:	f000 f8d4 	bl	8006ce4 <_lseek_r>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	4632      	mov	r2, r6
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	f000 b8fb 	b.w	8006d4c <_write_r>

08006b56 <__sseek>:
 8006b56:	b510      	push	{r4, lr}
 8006b58:	460c      	mov	r4, r1
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 f8c1 	bl	8006ce4 <_lseek_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	bf15      	itete	ne
 8006b68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b72:	81a3      	strheq	r3, [r4, #12]
 8006b74:	bf18      	it	ne
 8006b76:	81a3      	strhne	r3, [r4, #12]
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__sclose>:
 8006b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7e:	f000 b8a1 	b.w	8006cc4 <_close_r>

08006b82 <__swbuf_r>:
 8006b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b84:	460e      	mov	r6, r1
 8006b86:	4614      	mov	r4, r2
 8006b88:	4605      	mov	r5, r0
 8006b8a:	b118      	cbz	r0, 8006b94 <__swbuf_r+0x12>
 8006b8c:	6a03      	ldr	r3, [r0, #32]
 8006b8e:	b90b      	cbnz	r3, 8006b94 <__swbuf_r+0x12>
 8006b90:	f7ff feee 	bl	8006970 <__sinit>
 8006b94:	69a3      	ldr	r3, [r4, #24]
 8006b96:	60a3      	str	r3, [r4, #8]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	071a      	lsls	r2, r3, #28
 8006b9c:	d501      	bpl.n	8006ba2 <__swbuf_r+0x20>
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	b943      	cbnz	r3, 8006bb4 <__swbuf_r+0x32>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f82b 	bl	8006c00 <__swsetup_r>
 8006baa:	b118      	cbz	r0, 8006bb4 <__swbuf_r+0x32>
 8006bac:	f04f 37ff 	mov.w	r7, #4294967295
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	6922      	ldr	r2, [r4, #16]
 8006bb8:	1a98      	subs	r0, r3, r2
 8006bba:	6963      	ldr	r3, [r4, #20]
 8006bbc:	b2f6      	uxtb	r6, r6
 8006bbe:	4283      	cmp	r3, r0
 8006bc0:	4637      	mov	r7, r6
 8006bc2:	dc05      	bgt.n	8006bd0 <__swbuf_r+0x4e>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f002 fe02 	bl	80097d0 <_fflush_r>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d1ed      	bne.n	8006bac <__swbuf_r+0x2a>
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	701e      	strb	r6, [r3, #0]
 8006bde:	6962      	ldr	r2, [r4, #20]
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d004      	beq.n	8006bf0 <__swbuf_r+0x6e>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	07db      	lsls	r3, r3, #31
 8006bea:	d5e1      	bpl.n	8006bb0 <__swbuf_r+0x2e>
 8006bec:	2e0a      	cmp	r6, #10
 8006bee:	d1df      	bne.n	8006bb0 <__swbuf_r+0x2e>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f002 fdec 	bl	80097d0 <_fflush_r>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d0d9      	beq.n	8006bb0 <__swbuf_r+0x2e>
 8006bfc:	e7d6      	b.n	8006bac <__swbuf_r+0x2a>
	...

08006c00 <__swsetup_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4b29      	ldr	r3, [pc, #164]	@ (8006ca8 <__swsetup_r+0xa8>)
 8006c04:	4605      	mov	r5, r0
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	460c      	mov	r4, r1
 8006c0a:	b118      	cbz	r0, 8006c14 <__swsetup_r+0x14>
 8006c0c:	6a03      	ldr	r3, [r0, #32]
 8006c0e:	b90b      	cbnz	r3, 8006c14 <__swsetup_r+0x14>
 8006c10:	f7ff feae 	bl	8006970 <__sinit>
 8006c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c18:	0719      	lsls	r1, r3, #28
 8006c1a:	d422      	bmi.n	8006c62 <__swsetup_r+0x62>
 8006c1c:	06da      	lsls	r2, r3, #27
 8006c1e:	d407      	bmi.n	8006c30 <__swsetup_r+0x30>
 8006c20:	2209      	movs	r2, #9
 8006c22:	602a      	str	r2, [r5, #0]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2e:	e033      	b.n	8006c98 <__swsetup_r+0x98>
 8006c30:	0758      	lsls	r0, r3, #29
 8006c32:	d512      	bpl.n	8006c5a <__swsetup_r+0x5a>
 8006c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c36:	b141      	cbz	r1, 8006c4a <__swsetup_r+0x4a>
 8006c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	d002      	beq.n	8006c46 <__swsetup_r+0x46>
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 ff25 	bl	8007a90 <_free_r>
 8006c46:	2300      	movs	r3, #0
 8006c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	2300      	movs	r3, #0
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	f043 0308 	orr.w	r3, r3, #8
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	b94b      	cbnz	r3, 8006c7a <__swsetup_r+0x7a>
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c70:	d003      	beq.n	8006c7a <__swsetup_r+0x7a>
 8006c72:	4621      	mov	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f002 fdf9 	bl	800986c <__smakebuf_r>
 8006c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7e:	f013 0201 	ands.w	r2, r3, #1
 8006c82:	d00a      	beq.n	8006c9a <__swsetup_r+0x9a>
 8006c84:	2200      	movs	r2, #0
 8006c86:	60a2      	str	r2, [r4, #8]
 8006c88:	6962      	ldr	r2, [r4, #20]
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	61a2      	str	r2, [r4, #24]
 8006c8e:	6922      	ldr	r2, [r4, #16]
 8006c90:	b942      	cbnz	r2, 8006ca4 <__swsetup_r+0xa4>
 8006c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c96:	d1c5      	bne.n	8006c24 <__swsetup_r+0x24>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	0799      	lsls	r1, r3, #30
 8006c9c:	bf58      	it	pl
 8006c9e:	6962      	ldrpl	r2, [r4, #20]
 8006ca0:	60a2      	str	r2, [r4, #8]
 8006ca2:	e7f4      	b.n	8006c8e <__swsetup_r+0x8e>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7f7      	b.n	8006c98 <__swsetup_r+0x98>
 8006ca8:	2000001c 	.word	0x2000001c

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <_localeconv_r>:
 8006cbc:	4800      	ldr	r0, [pc, #0]	@ (8006cc0 <_localeconv_r+0x4>)
 8006cbe:	4770      	bx	lr
 8006cc0:	2000015c 	.word	0x2000015c

08006cc4 <_close_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d06      	ldr	r5, [pc, #24]	@ (8006ce0 <_close_r+0x1c>)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	f7fb f920 	bl	8001f14 <_close>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_close_r+0x1a>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_close_r+0x1a>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20000594 	.word	0x20000594

08006ce4 <_lseek_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d07      	ldr	r5, [pc, #28]	@ (8006d04 <_lseek_r+0x20>)
 8006ce8:	4604      	mov	r4, r0
 8006cea:	4608      	mov	r0, r1
 8006cec:	4611      	mov	r1, r2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	602a      	str	r2, [r5, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f7fb f935 	bl	8001f62 <_lseek>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d102      	bne.n	8006d02 <_lseek_r+0x1e>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	b103      	cbz	r3, 8006d02 <_lseek_r+0x1e>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	20000594 	.word	0x20000594

08006d08 <_read_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4d07      	ldr	r5, [pc, #28]	@ (8006d28 <_read_r+0x20>)
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	4608      	mov	r0, r1
 8006d10:	4611      	mov	r1, r2
 8006d12:	2200      	movs	r2, #0
 8006d14:	602a      	str	r2, [r5, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f7fb f8df 	bl	8001eda <_read>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_read_r+0x1e>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_read_r+0x1e>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000594 	.word	0x20000594

08006d2c <_sbrk_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4d06      	ldr	r5, [pc, #24]	@ (8006d48 <_sbrk_r+0x1c>)
 8006d30:	2300      	movs	r3, #0
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	f7fb f920 	bl	8001f7c <_sbrk>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_sbrk_r+0x1a>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_sbrk_r+0x1a>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	20000594 	.word	0x20000594

08006d4c <_write_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d07      	ldr	r5, [pc, #28]	@ (8006d6c <_write_r+0x20>)
 8006d50:	4604      	mov	r4, r0
 8006d52:	4608      	mov	r0, r1
 8006d54:	4611      	mov	r1, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f7fa f95a 	bl	8001014 <_write>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d102      	bne.n	8006d6a <_write_r+0x1e>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	b103      	cbz	r3, 8006d6a <_write_r+0x1e>
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20000594 	.word	0x20000594

08006d70 <__errno>:
 8006d70:	4b01      	ldr	r3, [pc, #4]	@ (8006d78 <__errno+0x8>)
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	2000001c 	.word	0x2000001c

08006d7c <__libc_init_array>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006db4 <__libc_init_array+0x38>)
 8006d80:	4c0d      	ldr	r4, [pc, #52]	@ (8006db8 <__libc_init_array+0x3c>)
 8006d82:	1b64      	subs	r4, r4, r5
 8006d84:	10a4      	asrs	r4, r4, #2
 8006d86:	2600      	movs	r6, #0
 8006d88:	42a6      	cmp	r6, r4
 8006d8a:	d109      	bne.n	8006da0 <__libc_init_array+0x24>
 8006d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006dbc <__libc_init_array+0x40>)
 8006d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006dc0 <__libc_init_array+0x44>)
 8006d90:	f003 fa1c 	bl	800a1cc <_init>
 8006d94:	1b64      	subs	r4, r4, r5
 8006d96:	10a4      	asrs	r4, r4, #2
 8006d98:	2600      	movs	r6, #0
 8006d9a:	42a6      	cmp	r6, r4
 8006d9c:	d105      	bne.n	8006daa <__libc_init_array+0x2e>
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da4:	4798      	blx	r3
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7ee      	b.n	8006d88 <__libc_init_array+0xc>
 8006daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dae:	4798      	blx	r3
 8006db0:	3601      	adds	r6, #1
 8006db2:	e7f2      	b.n	8006d9a <__libc_init_array+0x1e>
 8006db4:	0800a6e8 	.word	0x0800a6e8
 8006db8:	0800a6e8 	.word	0x0800a6e8
 8006dbc:	0800a6e8 	.word	0x0800a6e8
 8006dc0:	0800a6ec 	.word	0x0800a6ec

08006dc4 <__retarget_lock_init_recursive>:
 8006dc4:	4770      	bx	lr

08006dc6 <__retarget_lock_acquire_recursive>:
 8006dc6:	4770      	bx	lr

08006dc8 <__retarget_lock_release_recursive>:
 8006dc8:	4770      	bx	lr

08006dca <memcpy>:
 8006dca:	440a      	add	r2, r1
 8006dcc:	4291      	cmp	r1, r2
 8006dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd2:	d100      	bne.n	8006dd6 <memcpy+0xc>
 8006dd4:	4770      	bx	lr
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de0:	4291      	cmp	r1, r2
 8006de2:	d1f9      	bne.n	8006dd8 <memcpy+0xe>
 8006de4:	bd10      	pop	{r4, pc}
	...

08006de8 <nanf>:
 8006de8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006df0 <nanf+0x8>
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	7fc00000 	.word	0x7fc00000

08006df4 <quorem>:
 8006df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	6903      	ldr	r3, [r0, #16]
 8006dfa:	690c      	ldr	r4, [r1, #16]
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	4607      	mov	r7, r0
 8006e00:	db7e      	blt.n	8006f00 <quorem+0x10c>
 8006e02:	3c01      	subs	r4, #1
 8006e04:	f101 0814 	add.w	r8, r1, #20
 8006e08:	00a3      	lsls	r3, r4, #2
 8006e0a:	f100 0514 	add.w	r5, r0, #20
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	429a      	cmp	r2, r3
 8006e22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e26:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e2a:	d32e      	bcc.n	8006e8a <quorem+0x96>
 8006e2c:	f04f 0a00 	mov.w	sl, #0
 8006e30:	46c4      	mov	ip, r8
 8006e32:	46ae      	mov	lr, r5
 8006e34:	46d3      	mov	fp, sl
 8006e36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e3a:	b298      	uxth	r0, r3
 8006e3c:	fb06 a000 	mla	r0, r6, r0, sl
 8006e40:	0c02      	lsrs	r2, r0, #16
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	fb06 2303 	mla	r3, r6, r3, r2
 8006e48:	f8de 2000 	ldr.w	r2, [lr]
 8006e4c:	b280      	uxth	r0, r0
 8006e4e:	b292      	uxth	r2, r2
 8006e50:	1a12      	subs	r2, r2, r0
 8006e52:	445a      	add	r2, fp
 8006e54:	f8de 0000 	ldr.w	r0, [lr]
 8006e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e66:	b292      	uxth	r2, r2
 8006e68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e6c:	45e1      	cmp	r9, ip
 8006e6e:	f84e 2b04 	str.w	r2, [lr], #4
 8006e72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e76:	d2de      	bcs.n	8006e36 <quorem+0x42>
 8006e78:	9b00      	ldr	r3, [sp, #0]
 8006e7a:	58eb      	ldr	r3, [r5, r3]
 8006e7c:	b92b      	cbnz	r3, 8006e8a <quorem+0x96>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	3b04      	subs	r3, #4
 8006e82:	429d      	cmp	r5, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	d32f      	bcc.n	8006ee8 <quorem+0xf4>
 8006e88:	613c      	str	r4, [r7, #16]
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f001 f90e 	bl	80080ac <__mcmp>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	db25      	blt.n	8006ee0 <quorem+0xec>
 8006e94:	4629      	mov	r1, r5
 8006e96:	2000      	movs	r0, #0
 8006e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e9c:	f8d1 c000 	ldr.w	ip, [r1]
 8006ea0:	fa1f fe82 	uxth.w	lr, r2
 8006ea4:	fa1f f38c 	uxth.w	r3, ip
 8006ea8:	eba3 030e 	sub.w	r3, r3, lr
 8006eac:	4403      	add	r3, r0
 8006eae:	0c12      	lsrs	r2, r2, #16
 8006eb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006eb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ebe:	45c1      	cmp	r9, r8
 8006ec0:	f841 3b04 	str.w	r3, [r1], #4
 8006ec4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ec8:	d2e6      	bcs.n	8006e98 <quorem+0xa4>
 8006eca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ed2:	b922      	cbnz	r2, 8006ede <quorem+0xea>
 8006ed4:	3b04      	subs	r3, #4
 8006ed6:	429d      	cmp	r5, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	d30b      	bcc.n	8006ef4 <quorem+0x100>
 8006edc:	613c      	str	r4, [r7, #16]
 8006ede:	3601      	adds	r6, #1
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	b003      	add	sp, #12
 8006ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	3b04      	subs	r3, #4
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d1cb      	bne.n	8006e88 <quorem+0x94>
 8006ef0:	3c01      	subs	r4, #1
 8006ef2:	e7c6      	b.n	8006e82 <quorem+0x8e>
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	3b04      	subs	r3, #4
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	d1ef      	bne.n	8006edc <quorem+0xe8>
 8006efc:	3c01      	subs	r4, #1
 8006efe:	e7ea      	b.n	8006ed6 <quorem+0xe2>
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7ee      	b.n	8006ee2 <quorem+0xee>
 8006f04:	0000      	movs	r0, r0
	...

08006f08 <_dtoa_r>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	69c7      	ldr	r7, [r0, #28]
 8006f0e:	b099      	sub	sp, #100	@ 0x64
 8006f10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f14:	ec55 4b10 	vmov	r4, r5, d0
 8006f18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f1c:	4683      	mov	fp, r0
 8006f1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f22:	b97f      	cbnz	r7, 8006f44 <_dtoa_r+0x3c>
 8006f24:	2010      	movs	r0, #16
 8006f26:	f7fe fd6d 	bl	8005a04 <malloc>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f30:	b920      	cbnz	r0, 8006f3c <_dtoa_r+0x34>
 8006f32:	4ba7      	ldr	r3, [pc, #668]	@ (80071d0 <_dtoa_r+0x2c8>)
 8006f34:	21ef      	movs	r1, #239	@ 0xef
 8006f36:	48a7      	ldr	r0, [pc, #668]	@ (80071d4 <_dtoa_r+0x2cc>)
 8006f38:	f002 fd2a 	bl	8009990 <__assert_func>
 8006f3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f40:	6007      	str	r7, [r0, #0]
 8006f42:	60c7      	str	r7, [r0, #12]
 8006f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f48:	6819      	ldr	r1, [r3, #0]
 8006f4a:	b159      	cbz	r1, 8006f64 <_dtoa_r+0x5c>
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	604a      	str	r2, [r1, #4]
 8006f50:	2301      	movs	r3, #1
 8006f52:	4093      	lsls	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
 8006f56:	4658      	mov	r0, fp
 8006f58:	f000 fe24 	bl	8007ba4 <_Bfree>
 8006f5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	1e2b      	subs	r3, r5, #0
 8006f66:	bfb9      	ittee	lt
 8006f68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f6c:	9303      	strlt	r3, [sp, #12]
 8006f6e:	2300      	movge	r3, #0
 8006f70:	6033      	strge	r3, [r6, #0]
 8006f72:	9f03      	ldr	r7, [sp, #12]
 8006f74:	4b98      	ldr	r3, [pc, #608]	@ (80071d8 <_dtoa_r+0x2d0>)
 8006f76:	bfbc      	itt	lt
 8006f78:	2201      	movlt	r2, #1
 8006f7a:	6032      	strlt	r2, [r6, #0]
 8006f7c:	43bb      	bics	r3, r7
 8006f7e:	d112      	bne.n	8006fa6 <_dtoa_r+0x9e>
 8006f80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f8c:	4323      	orrs	r3, r4
 8006f8e:	f000 854d 	beq.w	8007a2c <_dtoa_r+0xb24>
 8006f92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80071ec <_dtoa_r+0x2e4>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 854f 	beq.w	8007a3c <_dtoa_r+0xb34>
 8006f9e:	f10a 0303 	add.w	r3, sl, #3
 8006fa2:	f000 bd49 	b.w	8007a38 <_dtoa_r+0xb30>
 8006fa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	ec51 0b17 	vmov	r0, r1, d7
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006fb6:	f7f9 fd9f 	bl	8000af8 <__aeabi_dcmpeq>
 8006fba:	4680      	mov	r8, r0
 8006fbc:	b158      	cbz	r0, 8006fd6 <_dtoa_r+0xce>
 8006fbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fc6:	b113      	cbz	r3, 8006fce <_dtoa_r+0xc6>
 8006fc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006fca:	4b84      	ldr	r3, [pc, #528]	@ (80071dc <_dtoa_r+0x2d4>)
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80071f0 <_dtoa_r+0x2e8>
 8006fd2:	f000 bd33 	b.w	8007a3c <_dtoa_r+0xb34>
 8006fd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006fda:	aa16      	add	r2, sp, #88	@ 0x58
 8006fdc:	a917      	add	r1, sp, #92	@ 0x5c
 8006fde:	4658      	mov	r0, fp
 8006fe0:	f001 f984 	bl	80082ec <__d2b>
 8006fe4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006fe8:	4681      	mov	r9, r0
 8006fea:	2e00      	cmp	r6, #0
 8006fec:	d077      	beq.n	80070de <_dtoa_r+0x1d6>
 8006fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ff0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ffc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007000:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007004:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007008:	4619      	mov	r1, r3
 800700a:	2200      	movs	r2, #0
 800700c:	4b74      	ldr	r3, [pc, #464]	@ (80071e0 <_dtoa_r+0x2d8>)
 800700e:	f7f9 f953 	bl	80002b8 <__aeabi_dsub>
 8007012:	a369      	add	r3, pc, #420	@ (adr r3, 80071b8 <_dtoa_r+0x2b0>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 fb06 	bl	8000628 <__aeabi_dmul>
 800701c:	a368      	add	r3, pc, #416	@ (adr r3, 80071c0 <_dtoa_r+0x2b8>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 f94b 	bl	80002bc <__adddf3>
 8007026:	4604      	mov	r4, r0
 8007028:	4630      	mov	r0, r6
 800702a:	460d      	mov	r5, r1
 800702c:	f7f9 fa92 	bl	8000554 <__aeabi_i2d>
 8007030:	a365      	add	r3, pc, #404	@ (adr r3, 80071c8 <_dtoa_r+0x2c0>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f7f9 faf7 	bl	8000628 <__aeabi_dmul>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 f93b 	bl	80002bc <__adddf3>
 8007046:	4604      	mov	r4, r0
 8007048:	460d      	mov	r5, r1
 800704a:	f7f9 fd9d 	bl	8000b88 <__aeabi_d2iz>
 800704e:	2200      	movs	r2, #0
 8007050:	4607      	mov	r7, r0
 8007052:	2300      	movs	r3, #0
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 fd58 	bl	8000b0c <__aeabi_dcmplt>
 800705c:	b140      	cbz	r0, 8007070 <_dtoa_r+0x168>
 800705e:	4638      	mov	r0, r7
 8007060:	f7f9 fa78 	bl	8000554 <__aeabi_i2d>
 8007064:	4622      	mov	r2, r4
 8007066:	462b      	mov	r3, r5
 8007068:	f7f9 fd46 	bl	8000af8 <__aeabi_dcmpeq>
 800706c:	b900      	cbnz	r0, 8007070 <_dtoa_r+0x168>
 800706e:	3f01      	subs	r7, #1
 8007070:	2f16      	cmp	r7, #22
 8007072:	d851      	bhi.n	8007118 <_dtoa_r+0x210>
 8007074:	4b5b      	ldr	r3, [pc, #364]	@ (80071e4 <_dtoa_r+0x2dc>)
 8007076:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007082:	f7f9 fd43 	bl	8000b0c <__aeabi_dcmplt>
 8007086:	2800      	cmp	r0, #0
 8007088:	d048      	beq.n	800711c <_dtoa_r+0x214>
 800708a:	3f01      	subs	r7, #1
 800708c:	2300      	movs	r3, #0
 800708e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007090:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007092:	1b9b      	subs	r3, r3, r6
 8007094:	1e5a      	subs	r2, r3, #1
 8007096:	bf44      	itt	mi
 8007098:	f1c3 0801 	rsbmi	r8, r3, #1
 800709c:	2300      	movmi	r3, #0
 800709e:	9208      	str	r2, [sp, #32]
 80070a0:	bf54      	ite	pl
 80070a2:	f04f 0800 	movpl.w	r8, #0
 80070a6:	9308      	strmi	r3, [sp, #32]
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	db39      	blt.n	8007120 <_dtoa_r+0x218>
 80070ac:	9b08      	ldr	r3, [sp, #32]
 80070ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80070b0:	443b      	add	r3, r7
 80070b2:	9308      	str	r3, [sp, #32]
 80070b4:	2300      	movs	r3, #0
 80070b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d864      	bhi.n	8007188 <_dtoa_r+0x280>
 80070be:	2b05      	cmp	r3, #5
 80070c0:	bfc4      	itt	gt
 80070c2:	3b04      	subgt	r3, #4
 80070c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80070c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c8:	f1a3 0302 	sub.w	r3, r3, #2
 80070cc:	bfcc      	ite	gt
 80070ce:	2400      	movgt	r4, #0
 80070d0:	2401      	movle	r4, #1
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d863      	bhi.n	800719e <_dtoa_r+0x296>
 80070d6:	e8df f003 	tbb	[pc, r3]
 80070da:	372a      	.short	0x372a
 80070dc:	5535      	.short	0x5535
 80070de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80070e2:	441e      	add	r6, r3
 80070e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	bfc1      	itttt	gt
 80070ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80070f0:	409f      	lslgt	r7, r3
 80070f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80070f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80070fa:	bfd6      	itet	le
 80070fc:	f1c3 0320 	rsble	r3, r3, #32
 8007100:	ea47 0003 	orrgt.w	r0, r7, r3
 8007104:	fa04 f003 	lslle.w	r0, r4, r3
 8007108:	f7f9 fa14 	bl	8000534 <__aeabi_ui2d>
 800710c:	2201      	movs	r2, #1
 800710e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007112:	3e01      	subs	r6, #1
 8007114:	9214      	str	r2, [sp, #80]	@ 0x50
 8007116:	e777      	b.n	8007008 <_dtoa_r+0x100>
 8007118:	2301      	movs	r3, #1
 800711a:	e7b8      	b.n	800708e <_dtoa_r+0x186>
 800711c:	9012      	str	r0, [sp, #72]	@ 0x48
 800711e:	e7b7      	b.n	8007090 <_dtoa_r+0x188>
 8007120:	427b      	negs	r3, r7
 8007122:	930a      	str	r3, [sp, #40]	@ 0x28
 8007124:	2300      	movs	r3, #0
 8007126:	eba8 0807 	sub.w	r8, r8, r7
 800712a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800712c:	e7c4      	b.n	80070b8 <_dtoa_r+0x1b0>
 800712e:	2300      	movs	r3, #0
 8007130:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	dc35      	bgt.n	80071a4 <_dtoa_r+0x29c>
 8007138:	2301      	movs	r3, #1
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	9307      	str	r3, [sp, #28]
 800713e:	461a      	mov	r2, r3
 8007140:	920e      	str	r2, [sp, #56]	@ 0x38
 8007142:	e00b      	b.n	800715c <_dtoa_r+0x254>
 8007144:	2301      	movs	r3, #1
 8007146:	e7f3      	b.n	8007130 <_dtoa_r+0x228>
 8007148:	2300      	movs	r3, #0
 800714a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800714c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800714e:	18fb      	adds	r3, r7, r3
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	bfb8      	it	lt
 800715a:	2301      	movlt	r3, #1
 800715c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007160:	2100      	movs	r1, #0
 8007162:	2204      	movs	r2, #4
 8007164:	f102 0514 	add.w	r5, r2, #20
 8007168:	429d      	cmp	r5, r3
 800716a:	d91f      	bls.n	80071ac <_dtoa_r+0x2a4>
 800716c:	6041      	str	r1, [r0, #4]
 800716e:	4658      	mov	r0, fp
 8007170:	f000 fcd8 	bl	8007b24 <_Balloc>
 8007174:	4682      	mov	sl, r0
 8007176:	2800      	cmp	r0, #0
 8007178:	d13c      	bne.n	80071f4 <_dtoa_r+0x2ec>
 800717a:	4b1b      	ldr	r3, [pc, #108]	@ (80071e8 <_dtoa_r+0x2e0>)
 800717c:	4602      	mov	r2, r0
 800717e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007182:	e6d8      	b.n	8006f36 <_dtoa_r+0x2e>
 8007184:	2301      	movs	r3, #1
 8007186:	e7e0      	b.n	800714a <_dtoa_r+0x242>
 8007188:	2401      	movs	r4, #1
 800718a:	2300      	movs	r3, #0
 800718c:	9309      	str	r3, [sp, #36]	@ 0x24
 800718e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	9307      	str	r3, [sp, #28]
 8007198:	2200      	movs	r2, #0
 800719a:	2312      	movs	r3, #18
 800719c:	e7d0      	b.n	8007140 <_dtoa_r+0x238>
 800719e:	2301      	movs	r3, #1
 80071a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071a2:	e7f5      	b.n	8007190 <_dtoa_r+0x288>
 80071a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	e7d7      	b.n	800715c <_dtoa_r+0x254>
 80071ac:	3101      	adds	r1, #1
 80071ae:	0052      	lsls	r2, r2, #1
 80071b0:	e7d8      	b.n	8007164 <_dtoa_r+0x25c>
 80071b2:	bf00      	nop
 80071b4:	f3af 8000 	nop.w
 80071b8:	636f4361 	.word	0x636f4361
 80071bc:	3fd287a7 	.word	0x3fd287a7
 80071c0:	8b60c8b3 	.word	0x8b60c8b3
 80071c4:	3fc68a28 	.word	0x3fc68a28
 80071c8:	509f79fb 	.word	0x509f79fb
 80071cc:	3fd34413 	.word	0x3fd34413
 80071d0:	0800a2fa 	.word	0x0800a2fa
 80071d4:	0800a311 	.word	0x0800a311
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	0800a2c5 	.word	0x0800a2c5
 80071e0:	3ff80000 	.word	0x3ff80000
 80071e4:	0800a408 	.word	0x0800a408
 80071e8:	0800a369 	.word	0x0800a369
 80071ec:	0800a2f6 	.word	0x0800a2f6
 80071f0:	0800a2c4 	.word	0x0800a2c4
 80071f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071f8:	6018      	str	r0, [r3, #0]
 80071fa:	9b07      	ldr	r3, [sp, #28]
 80071fc:	2b0e      	cmp	r3, #14
 80071fe:	f200 80a4 	bhi.w	800734a <_dtoa_r+0x442>
 8007202:	2c00      	cmp	r4, #0
 8007204:	f000 80a1 	beq.w	800734a <_dtoa_r+0x442>
 8007208:	2f00      	cmp	r7, #0
 800720a:	dd33      	ble.n	8007274 <_dtoa_r+0x36c>
 800720c:	4bad      	ldr	r3, [pc, #692]	@ (80074c4 <_dtoa_r+0x5bc>)
 800720e:	f007 020f 	and.w	r2, r7, #15
 8007212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007216:	ed93 7b00 	vldr	d7, [r3]
 800721a:	05f8      	lsls	r0, r7, #23
 800721c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007220:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007224:	d516      	bpl.n	8007254 <_dtoa_r+0x34c>
 8007226:	4ba8      	ldr	r3, [pc, #672]	@ (80074c8 <_dtoa_r+0x5c0>)
 8007228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800722c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007230:	f7f9 fb24 	bl	800087c <__aeabi_ddiv>
 8007234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007238:	f004 040f 	and.w	r4, r4, #15
 800723c:	2603      	movs	r6, #3
 800723e:	4da2      	ldr	r5, [pc, #648]	@ (80074c8 <_dtoa_r+0x5c0>)
 8007240:	b954      	cbnz	r4, 8007258 <_dtoa_r+0x350>
 8007242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724a:	f7f9 fb17 	bl	800087c <__aeabi_ddiv>
 800724e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007252:	e028      	b.n	80072a6 <_dtoa_r+0x39e>
 8007254:	2602      	movs	r6, #2
 8007256:	e7f2      	b.n	800723e <_dtoa_r+0x336>
 8007258:	07e1      	lsls	r1, r4, #31
 800725a:	d508      	bpl.n	800726e <_dtoa_r+0x366>
 800725c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007260:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007264:	f7f9 f9e0 	bl	8000628 <__aeabi_dmul>
 8007268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800726c:	3601      	adds	r6, #1
 800726e:	1064      	asrs	r4, r4, #1
 8007270:	3508      	adds	r5, #8
 8007272:	e7e5      	b.n	8007240 <_dtoa_r+0x338>
 8007274:	f000 80d2 	beq.w	800741c <_dtoa_r+0x514>
 8007278:	427c      	negs	r4, r7
 800727a:	4b92      	ldr	r3, [pc, #584]	@ (80074c4 <_dtoa_r+0x5bc>)
 800727c:	4d92      	ldr	r5, [pc, #584]	@ (80074c8 <_dtoa_r+0x5c0>)
 800727e:	f004 020f 	and.w	r2, r4, #15
 8007282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800728e:	f7f9 f9cb 	bl	8000628 <__aeabi_dmul>
 8007292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007296:	1124      	asrs	r4, r4, #4
 8007298:	2300      	movs	r3, #0
 800729a:	2602      	movs	r6, #2
 800729c:	2c00      	cmp	r4, #0
 800729e:	f040 80b2 	bne.w	8007406 <_dtoa_r+0x4fe>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1d3      	bne.n	800724e <_dtoa_r+0x346>
 80072a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 80b7 	beq.w	8007420 <_dtoa_r+0x518>
 80072b2:	4b86      	ldr	r3, [pc, #536]	@ (80074cc <_dtoa_r+0x5c4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f9 fc27 	bl	8000b0c <__aeabi_dcmplt>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f000 80ae 	beq.w	8007420 <_dtoa_r+0x518>
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80aa 	beq.w	8007420 <_dtoa_r+0x518>
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	dd37      	ble.n	8007342 <_dtoa_r+0x43a>
 80072d2:	1e7b      	subs	r3, r7, #1
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	4620      	mov	r0, r4
 80072d8:	4b7d      	ldr	r3, [pc, #500]	@ (80074d0 <_dtoa_r+0x5c8>)
 80072da:	2200      	movs	r2, #0
 80072dc:	4629      	mov	r1, r5
 80072de:	f7f9 f9a3 	bl	8000628 <__aeabi_dmul>
 80072e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e6:	9c00      	ldr	r4, [sp, #0]
 80072e8:	3601      	adds	r6, #1
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7f9 f932 	bl	8000554 <__aeabi_i2d>
 80072f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072f4:	f7f9 f998 	bl	8000628 <__aeabi_dmul>
 80072f8:	4b76      	ldr	r3, [pc, #472]	@ (80074d4 <_dtoa_r+0x5cc>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	f7f8 ffde 	bl	80002bc <__adddf3>
 8007300:	4605      	mov	r5, r0
 8007302:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007306:	2c00      	cmp	r4, #0
 8007308:	f040 808d 	bne.w	8007426 <_dtoa_r+0x51e>
 800730c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007310:	4b71      	ldr	r3, [pc, #452]	@ (80074d8 <_dtoa_r+0x5d0>)
 8007312:	2200      	movs	r2, #0
 8007314:	f7f8 ffd0 	bl	80002b8 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007320:	462a      	mov	r2, r5
 8007322:	4633      	mov	r3, r6
 8007324:	f7f9 fc10 	bl	8000b48 <__aeabi_dcmpgt>
 8007328:	2800      	cmp	r0, #0
 800732a:	f040 828b 	bne.w	8007844 <_dtoa_r+0x93c>
 800732e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007332:	462a      	mov	r2, r5
 8007334:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007338:	f7f9 fbe8 	bl	8000b0c <__aeabi_dcmplt>
 800733c:	2800      	cmp	r0, #0
 800733e:	f040 8128 	bne.w	8007592 <_dtoa_r+0x68a>
 8007342:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007346:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800734a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800734c:	2b00      	cmp	r3, #0
 800734e:	f2c0 815a 	blt.w	8007606 <_dtoa_r+0x6fe>
 8007352:	2f0e      	cmp	r7, #14
 8007354:	f300 8157 	bgt.w	8007606 <_dtoa_r+0x6fe>
 8007358:	4b5a      	ldr	r3, [pc, #360]	@ (80074c4 <_dtoa_r+0x5bc>)
 800735a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800735e:	ed93 7b00 	vldr	d7, [r3]
 8007362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	ed8d 7b00 	vstr	d7, [sp]
 800736a:	da03      	bge.n	8007374 <_dtoa_r+0x46c>
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f340 8101 	ble.w	8007576 <_dtoa_r+0x66e>
 8007374:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007378:	4656      	mov	r6, sl
 800737a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f9 fa7b 	bl	800087c <__aeabi_ddiv>
 8007386:	f7f9 fbff 	bl	8000b88 <__aeabi_d2iz>
 800738a:	4680      	mov	r8, r0
 800738c:	f7f9 f8e2 	bl	8000554 <__aeabi_i2d>
 8007390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007394:	f7f9 f948 	bl	8000628 <__aeabi_dmul>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073a4:	f7f8 ff88 	bl	80002b8 <__aeabi_dsub>
 80073a8:	f806 4b01 	strb.w	r4, [r6], #1
 80073ac:	9d07      	ldr	r5, [sp, #28]
 80073ae:	eba6 040a 	sub.w	r4, r6, sl
 80073b2:	42a5      	cmp	r5, r4
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	f040 8117 	bne.w	80075ea <_dtoa_r+0x6e2>
 80073bc:	f7f8 ff7e 	bl	80002bc <__adddf3>
 80073c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073c4:	4604      	mov	r4, r0
 80073c6:	460d      	mov	r5, r1
 80073c8:	f7f9 fbbe 	bl	8000b48 <__aeabi_dcmpgt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 80f9 	bne.w	80075c4 <_dtoa_r+0x6bc>
 80073d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f9 fb8d 	bl	8000af8 <__aeabi_dcmpeq>
 80073de:	b118      	cbz	r0, 80073e8 <_dtoa_r+0x4e0>
 80073e0:	f018 0f01 	tst.w	r8, #1
 80073e4:	f040 80ee 	bne.w	80075c4 <_dtoa_r+0x6bc>
 80073e8:	4649      	mov	r1, r9
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fbda 	bl	8007ba4 <_Bfree>
 80073f0:	2300      	movs	r3, #0
 80073f2:	7033      	strb	r3, [r6, #0]
 80073f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073f6:	3701      	adds	r7, #1
 80073f8:	601f      	str	r7, [r3, #0]
 80073fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 831d 	beq.w	8007a3c <_dtoa_r+0xb34>
 8007402:	601e      	str	r6, [r3, #0]
 8007404:	e31a      	b.n	8007a3c <_dtoa_r+0xb34>
 8007406:	07e2      	lsls	r2, r4, #31
 8007408:	d505      	bpl.n	8007416 <_dtoa_r+0x50e>
 800740a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800740e:	f7f9 f90b 	bl	8000628 <__aeabi_dmul>
 8007412:	3601      	adds	r6, #1
 8007414:	2301      	movs	r3, #1
 8007416:	1064      	asrs	r4, r4, #1
 8007418:	3508      	adds	r5, #8
 800741a:	e73f      	b.n	800729c <_dtoa_r+0x394>
 800741c:	2602      	movs	r6, #2
 800741e:	e742      	b.n	80072a6 <_dtoa_r+0x39e>
 8007420:	9c07      	ldr	r4, [sp, #28]
 8007422:	9704      	str	r7, [sp, #16]
 8007424:	e761      	b.n	80072ea <_dtoa_r+0x3e2>
 8007426:	4b27      	ldr	r3, [pc, #156]	@ (80074c4 <_dtoa_r+0x5bc>)
 8007428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800742a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800742e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007432:	4454      	add	r4, sl
 8007434:	2900      	cmp	r1, #0
 8007436:	d053      	beq.n	80074e0 <_dtoa_r+0x5d8>
 8007438:	4928      	ldr	r1, [pc, #160]	@ (80074dc <_dtoa_r+0x5d4>)
 800743a:	2000      	movs	r0, #0
 800743c:	f7f9 fa1e 	bl	800087c <__aeabi_ddiv>
 8007440:	4633      	mov	r3, r6
 8007442:	462a      	mov	r2, r5
 8007444:	f7f8 ff38 	bl	80002b8 <__aeabi_dsub>
 8007448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800744c:	4656      	mov	r6, sl
 800744e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007452:	f7f9 fb99 	bl	8000b88 <__aeabi_d2iz>
 8007456:	4605      	mov	r5, r0
 8007458:	f7f9 f87c 	bl	8000554 <__aeabi_i2d>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007464:	f7f8 ff28 	bl	80002b8 <__aeabi_dsub>
 8007468:	3530      	adds	r5, #48	@ 0x30
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007472:	f806 5b01 	strb.w	r5, [r6], #1
 8007476:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800747a:	f7f9 fb47 	bl	8000b0c <__aeabi_dcmplt>
 800747e:	2800      	cmp	r0, #0
 8007480:	d171      	bne.n	8007566 <_dtoa_r+0x65e>
 8007482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007486:	4911      	ldr	r1, [pc, #68]	@ (80074cc <_dtoa_r+0x5c4>)
 8007488:	2000      	movs	r0, #0
 800748a:	f7f8 ff15 	bl	80002b8 <__aeabi_dsub>
 800748e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007492:	f7f9 fb3b 	bl	8000b0c <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8095 	bne.w	80075c6 <_dtoa_r+0x6be>
 800749c:	42a6      	cmp	r6, r4
 800749e:	f43f af50 	beq.w	8007342 <_dtoa_r+0x43a>
 80074a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074a6:	4b0a      	ldr	r3, [pc, #40]	@ (80074d0 <_dtoa_r+0x5c8>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	f7f9 f8bd 	bl	8000628 <__aeabi_dmul>
 80074ae:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <_dtoa_r+0x5c8>)
 80074b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074b4:	2200      	movs	r2, #0
 80074b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ba:	f7f9 f8b5 	bl	8000628 <__aeabi_dmul>
 80074be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c2:	e7c4      	b.n	800744e <_dtoa_r+0x546>
 80074c4:	0800a408 	.word	0x0800a408
 80074c8:	0800a3e0 	.word	0x0800a3e0
 80074cc:	3ff00000 	.word	0x3ff00000
 80074d0:	40240000 	.word	0x40240000
 80074d4:	401c0000 	.word	0x401c0000
 80074d8:	40140000 	.word	0x40140000
 80074dc:	3fe00000 	.word	0x3fe00000
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	f7f9 f8a0 	bl	8000628 <__aeabi_dmul>
 80074e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80074ee:	4656      	mov	r6, sl
 80074f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f4:	f7f9 fb48 	bl	8000b88 <__aeabi_d2iz>
 80074f8:	4605      	mov	r5, r0
 80074fa:	f7f9 f82b 	bl	8000554 <__aeabi_i2d>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007506:	f7f8 fed7 	bl	80002b8 <__aeabi_dsub>
 800750a:	3530      	adds	r5, #48	@ 0x30
 800750c:	f806 5b01 	strb.w	r5, [r6], #1
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	42a6      	cmp	r6, r4
 8007516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	d124      	bne.n	800756a <_dtoa_r+0x662>
 8007520:	4bac      	ldr	r3, [pc, #688]	@ (80077d4 <_dtoa_r+0x8cc>)
 8007522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007526:	f7f8 fec9 	bl	80002bc <__adddf3>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007532:	f7f9 fb09 	bl	8000b48 <__aeabi_dcmpgt>
 8007536:	2800      	cmp	r0, #0
 8007538:	d145      	bne.n	80075c6 <_dtoa_r+0x6be>
 800753a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800753e:	49a5      	ldr	r1, [pc, #660]	@ (80077d4 <_dtoa_r+0x8cc>)
 8007540:	2000      	movs	r0, #0
 8007542:	f7f8 feb9 	bl	80002b8 <__aeabi_dsub>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754e:	f7f9 fadd 	bl	8000b0c <__aeabi_dcmplt>
 8007552:	2800      	cmp	r0, #0
 8007554:	f43f aef5 	beq.w	8007342 <_dtoa_r+0x43a>
 8007558:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800755a:	1e73      	subs	r3, r6, #1
 800755c:	9315      	str	r3, [sp, #84]	@ 0x54
 800755e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007562:	2b30      	cmp	r3, #48	@ 0x30
 8007564:	d0f8      	beq.n	8007558 <_dtoa_r+0x650>
 8007566:	9f04      	ldr	r7, [sp, #16]
 8007568:	e73e      	b.n	80073e8 <_dtoa_r+0x4e0>
 800756a:	4b9b      	ldr	r3, [pc, #620]	@ (80077d8 <_dtoa_r+0x8d0>)
 800756c:	f7f9 f85c 	bl	8000628 <__aeabi_dmul>
 8007570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007574:	e7bc      	b.n	80074f0 <_dtoa_r+0x5e8>
 8007576:	d10c      	bne.n	8007592 <_dtoa_r+0x68a>
 8007578:	4b98      	ldr	r3, [pc, #608]	@ (80077dc <_dtoa_r+0x8d4>)
 800757a:	2200      	movs	r2, #0
 800757c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007580:	f7f9 f852 	bl	8000628 <__aeabi_dmul>
 8007584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007588:	f7f9 fad4 	bl	8000b34 <__aeabi_dcmpge>
 800758c:	2800      	cmp	r0, #0
 800758e:	f000 8157 	beq.w	8007840 <_dtoa_r+0x938>
 8007592:	2400      	movs	r4, #0
 8007594:	4625      	mov	r5, r4
 8007596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007598:	43db      	mvns	r3, r3
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	4656      	mov	r6, sl
 800759e:	2700      	movs	r7, #0
 80075a0:	4621      	mov	r1, r4
 80075a2:	4658      	mov	r0, fp
 80075a4:	f000 fafe 	bl	8007ba4 <_Bfree>
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	d0dc      	beq.n	8007566 <_dtoa_r+0x65e>
 80075ac:	b12f      	cbz	r7, 80075ba <_dtoa_r+0x6b2>
 80075ae:	42af      	cmp	r7, r5
 80075b0:	d003      	beq.n	80075ba <_dtoa_r+0x6b2>
 80075b2:	4639      	mov	r1, r7
 80075b4:	4658      	mov	r0, fp
 80075b6:	f000 faf5 	bl	8007ba4 <_Bfree>
 80075ba:	4629      	mov	r1, r5
 80075bc:	4658      	mov	r0, fp
 80075be:	f000 faf1 	bl	8007ba4 <_Bfree>
 80075c2:	e7d0      	b.n	8007566 <_dtoa_r+0x65e>
 80075c4:	9704      	str	r7, [sp, #16]
 80075c6:	4633      	mov	r3, r6
 80075c8:	461e      	mov	r6, r3
 80075ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ce:	2a39      	cmp	r2, #57	@ 0x39
 80075d0:	d107      	bne.n	80075e2 <_dtoa_r+0x6da>
 80075d2:	459a      	cmp	sl, r3
 80075d4:	d1f8      	bne.n	80075c8 <_dtoa_r+0x6c0>
 80075d6:	9a04      	ldr	r2, [sp, #16]
 80075d8:	3201      	adds	r2, #1
 80075da:	9204      	str	r2, [sp, #16]
 80075dc:	2230      	movs	r2, #48	@ 0x30
 80075de:	f88a 2000 	strb.w	r2, [sl]
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	3201      	adds	r2, #1
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	e7bd      	b.n	8007566 <_dtoa_r+0x65e>
 80075ea:	4b7b      	ldr	r3, [pc, #492]	@ (80077d8 <_dtoa_r+0x8d0>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	f7f9 f81b 	bl	8000628 <__aeabi_dmul>
 80075f2:	2200      	movs	r2, #0
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	460d      	mov	r5, r1
 80075fa:	f7f9 fa7d 	bl	8000af8 <__aeabi_dcmpeq>
 80075fe:	2800      	cmp	r0, #0
 8007600:	f43f aebb 	beq.w	800737a <_dtoa_r+0x472>
 8007604:	e6f0      	b.n	80073e8 <_dtoa_r+0x4e0>
 8007606:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007608:	2a00      	cmp	r2, #0
 800760a:	f000 80db 	beq.w	80077c4 <_dtoa_r+0x8bc>
 800760e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007610:	2a01      	cmp	r2, #1
 8007612:	f300 80bf 	bgt.w	8007794 <_dtoa_r+0x88c>
 8007616:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007618:	2a00      	cmp	r2, #0
 800761a:	f000 80b7 	beq.w	800778c <_dtoa_r+0x884>
 800761e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007622:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007624:	4646      	mov	r6, r8
 8007626:	9a08      	ldr	r2, [sp, #32]
 8007628:	2101      	movs	r1, #1
 800762a:	441a      	add	r2, r3
 800762c:	4658      	mov	r0, fp
 800762e:	4498      	add	r8, r3
 8007630:	9208      	str	r2, [sp, #32]
 8007632:	f000 fbb5 	bl	8007da0 <__i2b>
 8007636:	4605      	mov	r5, r0
 8007638:	b15e      	cbz	r6, 8007652 <_dtoa_r+0x74a>
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd08      	ble.n	8007652 <_dtoa_r+0x74a>
 8007640:	42b3      	cmp	r3, r6
 8007642:	9a08      	ldr	r2, [sp, #32]
 8007644:	bfa8      	it	ge
 8007646:	4633      	movge	r3, r6
 8007648:	eba8 0803 	sub.w	r8, r8, r3
 800764c:	1af6      	subs	r6, r6, r3
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	9308      	str	r3, [sp, #32]
 8007652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007654:	b1f3      	cbz	r3, 8007694 <_dtoa_r+0x78c>
 8007656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80b7 	beq.w	80077cc <_dtoa_r+0x8c4>
 800765e:	b18c      	cbz	r4, 8007684 <_dtoa_r+0x77c>
 8007660:	4629      	mov	r1, r5
 8007662:	4622      	mov	r2, r4
 8007664:	4658      	mov	r0, fp
 8007666:	f000 fc5b 	bl	8007f20 <__pow5mult>
 800766a:	464a      	mov	r2, r9
 800766c:	4601      	mov	r1, r0
 800766e:	4605      	mov	r5, r0
 8007670:	4658      	mov	r0, fp
 8007672:	f000 fbab 	bl	8007dcc <__multiply>
 8007676:	4649      	mov	r1, r9
 8007678:	9004      	str	r0, [sp, #16]
 800767a:	4658      	mov	r0, fp
 800767c:	f000 fa92 	bl	8007ba4 <_Bfree>
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	4699      	mov	r9, r3
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	1b1a      	subs	r2, r3, r4
 8007688:	d004      	beq.n	8007694 <_dtoa_r+0x78c>
 800768a:	4649      	mov	r1, r9
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fc47 	bl	8007f20 <__pow5mult>
 8007692:	4681      	mov	r9, r0
 8007694:	2101      	movs	r1, #1
 8007696:	4658      	mov	r0, fp
 8007698:	f000 fb82 	bl	8007da0 <__i2b>
 800769c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800769e:	4604      	mov	r4, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 81cf 	beq.w	8007a44 <_dtoa_r+0xb3c>
 80076a6:	461a      	mov	r2, r3
 80076a8:	4601      	mov	r1, r0
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 fc38 	bl	8007f20 <__pow5mult>
 80076b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	4604      	mov	r4, r0
 80076b6:	f300 8095 	bgt.w	80077e4 <_dtoa_r+0x8dc>
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 8087 	bne.w	80077d0 <_dtoa_r+0x8c8>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f040 8089 	bne.w	80077e0 <_dtoa_r+0x8d8>
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076d4:	0d1b      	lsrs	r3, r3, #20
 80076d6:	051b      	lsls	r3, r3, #20
 80076d8:	b12b      	cbz	r3, 80076e6 <_dtoa_r+0x7de>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	3301      	adds	r3, #1
 80076de:	9308      	str	r3, [sp, #32]
 80076e0:	f108 0801 	add.w	r8, r8, #1
 80076e4:	2301      	movs	r3, #1
 80076e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 81b0 	beq.w	8007a50 <_dtoa_r+0xb48>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076f6:	6918      	ldr	r0, [r3, #16]
 80076f8:	f000 fb06 	bl	8007d08 <__hi0bits>
 80076fc:	f1c0 0020 	rsb	r0, r0, #32
 8007700:	9b08      	ldr	r3, [sp, #32]
 8007702:	4418      	add	r0, r3
 8007704:	f010 001f 	ands.w	r0, r0, #31
 8007708:	d077      	beq.n	80077fa <_dtoa_r+0x8f2>
 800770a:	f1c0 0320 	rsb	r3, r0, #32
 800770e:	2b04      	cmp	r3, #4
 8007710:	dd6b      	ble.n	80077ea <_dtoa_r+0x8e2>
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	f1c0 001c 	rsb	r0, r0, #28
 8007718:	4403      	add	r3, r0
 800771a:	4480      	add	r8, r0
 800771c:	4406      	add	r6, r0
 800771e:	9308      	str	r3, [sp, #32]
 8007720:	f1b8 0f00 	cmp.w	r8, #0
 8007724:	dd05      	ble.n	8007732 <_dtoa_r+0x82a>
 8007726:	4649      	mov	r1, r9
 8007728:	4642      	mov	r2, r8
 800772a:	4658      	mov	r0, fp
 800772c:	f000 fc52 	bl	8007fd4 <__lshift>
 8007730:	4681      	mov	r9, r0
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dd05      	ble.n	8007744 <_dtoa_r+0x83c>
 8007738:	4621      	mov	r1, r4
 800773a:	461a      	mov	r2, r3
 800773c:	4658      	mov	r0, fp
 800773e:	f000 fc49 	bl	8007fd4 <__lshift>
 8007742:	4604      	mov	r4, r0
 8007744:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007746:	2b00      	cmp	r3, #0
 8007748:	d059      	beq.n	80077fe <_dtoa_r+0x8f6>
 800774a:	4621      	mov	r1, r4
 800774c:	4648      	mov	r0, r9
 800774e:	f000 fcad 	bl	80080ac <__mcmp>
 8007752:	2800      	cmp	r0, #0
 8007754:	da53      	bge.n	80077fe <_dtoa_r+0x8f6>
 8007756:	1e7b      	subs	r3, r7, #1
 8007758:	9304      	str	r3, [sp, #16]
 800775a:	4649      	mov	r1, r9
 800775c:	2300      	movs	r3, #0
 800775e:	220a      	movs	r2, #10
 8007760:	4658      	mov	r0, fp
 8007762:	f000 fa41 	bl	8007be8 <__multadd>
 8007766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007768:	4681      	mov	r9, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8172 	beq.w	8007a54 <_dtoa_r+0xb4c>
 8007770:	2300      	movs	r3, #0
 8007772:	4629      	mov	r1, r5
 8007774:	220a      	movs	r2, #10
 8007776:	4658      	mov	r0, fp
 8007778:	f000 fa36 	bl	8007be8 <__multadd>
 800777c:	9b00      	ldr	r3, [sp, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	4605      	mov	r5, r0
 8007782:	dc67      	bgt.n	8007854 <_dtoa_r+0x94c>
 8007784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007786:	2b02      	cmp	r3, #2
 8007788:	dc41      	bgt.n	800780e <_dtoa_r+0x906>
 800778a:	e063      	b.n	8007854 <_dtoa_r+0x94c>
 800778c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800778e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007792:	e746      	b.n	8007622 <_dtoa_r+0x71a>
 8007794:	9b07      	ldr	r3, [sp, #28]
 8007796:	1e5c      	subs	r4, r3, #1
 8007798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779a:	42a3      	cmp	r3, r4
 800779c:	bfbf      	itttt	lt
 800779e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80077a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80077a4:	1ae3      	sublt	r3, r4, r3
 80077a6:	bfb4      	ite	lt
 80077a8:	18d2      	addlt	r2, r2, r3
 80077aa:	1b1c      	subge	r4, r3, r4
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	bfbc      	itt	lt
 80077b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80077b2:	2400      	movlt	r4, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	bfb5      	itete	lt
 80077b8:	eba8 0603 	sublt.w	r6, r8, r3
 80077bc:	9b07      	ldrge	r3, [sp, #28]
 80077be:	2300      	movlt	r3, #0
 80077c0:	4646      	movge	r6, r8
 80077c2:	e730      	b.n	8007626 <_dtoa_r+0x71e>
 80077c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80077c8:	4646      	mov	r6, r8
 80077ca:	e735      	b.n	8007638 <_dtoa_r+0x730>
 80077cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077ce:	e75c      	b.n	800768a <_dtoa_r+0x782>
 80077d0:	2300      	movs	r3, #0
 80077d2:	e788      	b.n	80076e6 <_dtoa_r+0x7de>
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	40240000 	.word	0x40240000
 80077dc:	40140000 	.word	0x40140000
 80077e0:	9b02      	ldr	r3, [sp, #8]
 80077e2:	e780      	b.n	80076e6 <_dtoa_r+0x7de>
 80077e4:	2300      	movs	r3, #0
 80077e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077e8:	e782      	b.n	80076f0 <_dtoa_r+0x7e8>
 80077ea:	d099      	beq.n	8007720 <_dtoa_r+0x818>
 80077ec:	9a08      	ldr	r2, [sp, #32]
 80077ee:	331c      	adds	r3, #28
 80077f0:	441a      	add	r2, r3
 80077f2:	4498      	add	r8, r3
 80077f4:	441e      	add	r6, r3
 80077f6:	9208      	str	r2, [sp, #32]
 80077f8:	e792      	b.n	8007720 <_dtoa_r+0x818>
 80077fa:	4603      	mov	r3, r0
 80077fc:	e7f6      	b.n	80077ec <_dtoa_r+0x8e4>
 80077fe:	9b07      	ldr	r3, [sp, #28]
 8007800:	9704      	str	r7, [sp, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	dc20      	bgt.n	8007848 <_dtoa_r+0x940>
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780a:	2b02      	cmp	r3, #2
 800780c:	dd1e      	ble.n	800784c <_dtoa_r+0x944>
 800780e:	9b00      	ldr	r3, [sp, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f47f aec0 	bne.w	8007596 <_dtoa_r+0x68e>
 8007816:	4621      	mov	r1, r4
 8007818:	2205      	movs	r2, #5
 800781a:	4658      	mov	r0, fp
 800781c:	f000 f9e4 	bl	8007be8 <__multadd>
 8007820:	4601      	mov	r1, r0
 8007822:	4604      	mov	r4, r0
 8007824:	4648      	mov	r0, r9
 8007826:	f000 fc41 	bl	80080ac <__mcmp>
 800782a:	2800      	cmp	r0, #0
 800782c:	f77f aeb3 	ble.w	8007596 <_dtoa_r+0x68e>
 8007830:	4656      	mov	r6, sl
 8007832:	2331      	movs	r3, #49	@ 0x31
 8007834:	f806 3b01 	strb.w	r3, [r6], #1
 8007838:	9b04      	ldr	r3, [sp, #16]
 800783a:	3301      	adds	r3, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	e6ae      	b.n	800759e <_dtoa_r+0x696>
 8007840:	9c07      	ldr	r4, [sp, #28]
 8007842:	9704      	str	r7, [sp, #16]
 8007844:	4625      	mov	r5, r4
 8007846:	e7f3      	b.n	8007830 <_dtoa_r+0x928>
 8007848:	9b07      	ldr	r3, [sp, #28]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 8104 	beq.w	8007a5c <_dtoa_r+0xb54>
 8007854:	2e00      	cmp	r6, #0
 8007856:	dd05      	ble.n	8007864 <_dtoa_r+0x95c>
 8007858:	4629      	mov	r1, r5
 800785a:	4632      	mov	r2, r6
 800785c:	4658      	mov	r0, fp
 800785e:	f000 fbb9 	bl	8007fd4 <__lshift>
 8007862:	4605      	mov	r5, r0
 8007864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d05a      	beq.n	8007920 <_dtoa_r+0xa18>
 800786a:	6869      	ldr	r1, [r5, #4]
 800786c:	4658      	mov	r0, fp
 800786e:	f000 f959 	bl	8007b24 <_Balloc>
 8007872:	4606      	mov	r6, r0
 8007874:	b928      	cbnz	r0, 8007882 <_dtoa_r+0x97a>
 8007876:	4b84      	ldr	r3, [pc, #528]	@ (8007a88 <_dtoa_r+0xb80>)
 8007878:	4602      	mov	r2, r0
 800787a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800787e:	f7ff bb5a 	b.w	8006f36 <_dtoa_r+0x2e>
 8007882:	692a      	ldr	r2, [r5, #16]
 8007884:	3202      	adds	r2, #2
 8007886:	0092      	lsls	r2, r2, #2
 8007888:	f105 010c 	add.w	r1, r5, #12
 800788c:	300c      	adds	r0, #12
 800788e:	f7ff fa9c 	bl	8006dca <memcpy>
 8007892:	2201      	movs	r2, #1
 8007894:	4631      	mov	r1, r6
 8007896:	4658      	mov	r0, fp
 8007898:	f000 fb9c 	bl	8007fd4 <__lshift>
 800789c:	f10a 0301 	add.w	r3, sl, #1
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	4453      	add	r3, sl
 80078a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078a8:	9b02      	ldr	r3, [sp, #8]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	462f      	mov	r7, r5
 80078b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b2:	4605      	mov	r5, r0
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	4621      	mov	r1, r4
 80078b8:	3b01      	subs	r3, #1
 80078ba:	4648      	mov	r0, r9
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	f7ff fa99 	bl	8006df4 <quorem>
 80078c2:	4639      	mov	r1, r7
 80078c4:	9002      	str	r0, [sp, #8]
 80078c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078ca:	4648      	mov	r0, r9
 80078cc:	f000 fbee 	bl	80080ac <__mcmp>
 80078d0:	462a      	mov	r2, r5
 80078d2:	9008      	str	r0, [sp, #32]
 80078d4:	4621      	mov	r1, r4
 80078d6:	4658      	mov	r0, fp
 80078d8:	f000 fc04 	bl	80080e4 <__mdiff>
 80078dc:	68c2      	ldr	r2, [r0, #12]
 80078de:	4606      	mov	r6, r0
 80078e0:	bb02      	cbnz	r2, 8007924 <_dtoa_r+0xa1c>
 80078e2:	4601      	mov	r1, r0
 80078e4:	4648      	mov	r0, r9
 80078e6:	f000 fbe1 	bl	80080ac <__mcmp>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4631      	mov	r1, r6
 80078ee:	4658      	mov	r0, fp
 80078f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80078f2:	f000 f957 	bl	8007ba4 <_Bfree>
 80078f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078fa:	9e07      	ldr	r6, [sp, #28]
 80078fc:	ea43 0102 	orr.w	r1, r3, r2
 8007900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007902:	4319      	orrs	r1, r3
 8007904:	d110      	bne.n	8007928 <_dtoa_r+0xa20>
 8007906:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800790a:	d029      	beq.n	8007960 <_dtoa_r+0xa58>
 800790c:	9b08      	ldr	r3, [sp, #32]
 800790e:	2b00      	cmp	r3, #0
 8007910:	dd02      	ble.n	8007918 <_dtoa_r+0xa10>
 8007912:	9b02      	ldr	r3, [sp, #8]
 8007914:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007918:	9b00      	ldr	r3, [sp, #0]
 800791a:	f883 8000 	strb.w	r8, [r3]
 800791e:	e63f      	b.n	80075a0 <_dtoa_r+0x698>
 8007920:	4628      	mov	r0, r5
 8007922:	e7bb      	b.n	800789c <_dtoa_r+0x994>
 8007924:	2201      	movs	r2, #1
 8007926:	e7e1      	b.n	80078ec <_dtoa_r+0x9e4>
 8007928:	9b08      	ldr	r3, [sp, #32]
 800792a:	2b00      	cmp	r3, #0
 800792c:	db04      	blt.n	8007938 <_dtoa_r+0xa30>
 800792e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007930:	430b      	orrs	r3, r1
 8007932:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007934:	430b      	orrs	r3, r1
 8007936:	d120      	bne.n	800797a <_dtoa_r+0xa72>
 8007938:	2a00      	cmp	r2, #0
 800793a:	dded      	ble.n	8007918 <_dtoa_r+0xa10>
 800793c:	4649      	mov	r1, r9
 800793e:	2201      	movs	r2, #1
 8007940:	4658      	mov	r0, fp
 8007942:	f000 fb47 	bl	8007fd4 <__lshift>
 8007946:	4621      	mov	r1, r4
 8007948:	4681      	mov	r9, r0
 800794a:	f000 fbaf 	bl	80080ac <__mcmp>
 800794e:	2800      	cmp	r0, #0
 8007950:	dc03      	bgt.n	800795a <_dtoa_r+0xa52>
 8007952:	d1e1      	bne.n	8007918 <_dtoa_r+0xa10>
 8007954:	f018 0f01 	tst.w	r8, #1
 8007958:	d0de      	beq.n	8007918 <_dtoa_r+0xa10>
 800795a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800795e:	d1d8      	bne.n	8007912 <_dtoa_r+0xa0a>
 8007960:	9a00      	ldr	r2, [sp, #0]
 8007962:	2339      	movs	r3, #57	@ 0x39
 8007964:	7013      	strb	r3, [r2, #0]
 8007966:	4633      	mov	r3, r6
 8007968:	461e      	mov	r6, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007970:	2a39      	cmp	r2, #57	@ 0x39
 8007972:	d052      	beq.n	8007a1a <_dtoa_r+0xb12>
 8007974:	3201      	adds	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	e612      	b.n	80075a0 <_dtoa_r+0x698>
 800797a:	2a00      	cmp	r2, #0
 800797c:	dd07      	ble.n	800798e <_dtoa_r+0xa86>
 800797e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007982:	d0ed      	beq.n	8007960 <_dtoa_r+0xa58>
 8007984:	9a00      	ldr	r2, [sp, #0]
 8007986:	f108 0301 	add.w	r3, r8, #1
 800798a:	7013      	strb	r3, [r2, #0]
 800798c:	e608      	b.n	80075a0 <_dtoa_r+0x698>
 800798e:	9b07      	ldr	r3, [sp, #28]
 8007990:	9a07      	ldr	r2, [sp, #28]
 8007992:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007998:	4293      	cmp	r3, r2
 800799a:	d028      	beq.n	80079ee <_dtoa_r+0xae6>
 800799c:	4649      	mov	r1, r9
 800799e:	2300      	movs	r3, #0
 80079a0:	220a      	movs	r2, #10
 80079a2:	4658      	mov	r0, fp
 80079a4:	f000 f920 	bl	8007be8 <__multadd>
 80079a8:	42af      	cmp	r7, r5
 80079aa:	4681      	mov	r9, r0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	f04f 020a 	mov.w	r2, #10
 80079b4:	4639      	mov	r1, r7
 80079b6:	4658      	mov	r0, fp
 80079b8:	d107      	bne.n	80079ca <_dtoa_r+0xac2>
 80079ba:	f000 f915 	bl	8007be8 <__multadd>
 80079be:	4607      	mov	r7, r0
 80079c0:	4605      	mov	r5, r0
 80079c2:	9b07      	ldr	r3, [sp, #28]
 80079c4:	3301      	adds	r3, #1
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	e774      	b.n	80078b4 <_dtoa_r+0x9ac>
 80079ca:	f000 f90d 	bl	8007be8 <__multadd>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4607      	mov	r7, r0
 80079d2:	2300      	movs	r3, #0
 80079d4:	220a      	movs	r2, #10
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 f906 	bl	8007be8 <__multadd>
 80079dc:	4605      	mov	r5, r0
 80079de:	e7f0      	b.n	80079c2 <_dtoa_r+0xaba>
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bfcc      	ite	gt
 80079e6:	461e      	movgt	r6, r3
 80079e8:	2601      	movle	r6, #1
 80079ea:	4456      	add	r6, sl
 80079ec:	2700      	movs	r7, #0
 80079ee:	4649      	mov	r1, r9
 80079f0:	2201      	movs	r2, #1
 80079f2:	4658      	mov	r0, fp
 80079f4:	f000 faee 	bl	8007fd4 <__lshift>
 80079f8:	4621      	mov	r1, r4
 80079fa:	4681      	mov	r9, r0
 80079fc:	f000 fb56 	bl	80080ac <__mcmp>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	dcb0      	bgt.n	8007966 <_dtoa_r+0xa5e>
 8007a04:	d102      	bne.n	8007a0c <_dtoa_r+0xb04>
 8007a06:	f018 0f01 	tst.w	r8, #1
 8007a0a:	d1ac      	bne.n	8007966 <_dtoa_r+0xa5e>
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	461e      	mov	r6, r3
 8007a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a14:	2a30      	cmp	r2, #48	@ 0x30
 8007a16:	d0fa      	beq.n	8007a0e <_dtoa_r+0xb06>
 8007a18:	e5c2      	b.n	80075a0 <_dtoa_r+0x698>
 8007a1a:	459a      	cmp	sl, r3
 8007a1c:	d1a4      	bne.n	8007968 <_dtoa_r+0xa60>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	2331      	movs	r3, #49	@ 0x31
 8007a26:	f88a 3000 	strb.w	r3, [sl]
 8007a2a:	e5b9      	b.n	80075a0 <_dtoa_r+0x698>
 8007a2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a8c <_dtoa_r+0xb84>
 8007a32:	b11b      	cbz	r3, 8007a3c <_dtoa_r+0xb34>
 8007a34:	f10a 0308 	add.w	r3, sl, #8
 8007a38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4650      	mov	r0, sl
 8007a3e:	b019      	add	sp, #100	@ 0x64
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	f77f ae37 	ble.w	80076ba <_dtoa_r+0x7b2>
 8007a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a50:	2001      	movs	r0, #1
 8007a52:	e655      	b.n	8007700 <_dtoa_r+0x7f8>
 8007a54:	9b00      	ldr	r3, [sp, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f77f aed6 	ble.w	8007808 <_dtoa_r+0x900>
 8007a5c:	4656      	mov	r6, sl
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4648      	mov	r0, r9
 8007a62:	f7ff f9c7 	bl	8006df4 <quorem>
 8007a66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a6a:	f806 8b01 	strb.w	r8, [r6], #1
 8007a6e:	9b00      	ldr	r3, [sp, #0]
 8007a70:	eba6 020a 	sub.w	r2, r6, sl
 8007a74:	4293      	cmp	r3, r2
 8007a76:	ddb3      	ble.n	80079e0 <_dtoa_r+0xad8>
 8007a78:	4649      	mov	r1, r9
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	220a      	movs	r2, #10
 8007a7e:	4658      	mov	r0, fp
 8007a80:	f000 f8b2 	bl	8007be8 <__multadd>
 8007a84:	4681      	mov	r9, r0
 8007a86:	e7ea      	b.n	8007a5e <_dtoa_r+0xb56>
 8007a88:	0800a369 	.word	0x0800a369
 8007a8c:	0800a2ed 	.word	0x0800a2ed

08007a90 <_free_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4605      	mov	r5, r0
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d041      	beq.n	8007b1c <_free_r+0x8c>
 8007a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9c:	1f0c      	subs	r4, r1, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfb8      	it	lt
 8007aa2:	18e4      	addlt	r4, r4, r3
 8007aa4:	f7fe f860 	bl	8005b68 <__malloc_lock>
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b20 <_free_r+0x90>)
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	b933      	cbnz	r3, 8007abc <_free_r+0x2c>
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	6014      	str	r4, [r2, #0]
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab8:	f7fe b85c 	b.w	8005b74 <__malloc_unlock>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d908      	bls.n	8007ad2 <_free_r+0x42>
 8007ac0:	6820      	ldr	r0, [r4, #0]
 8007ac2:	1821      	adds	r1, r4, r0
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf01      	itttt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	1809      	addeq	r1, r1, r0
 8007ace:	6021      	streq	r1, [r4, #0]
 8007ad0:	e7ed      	b.n	8007aae <_free_r+0x1e>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b10b      	cbz	r3, 8007adc <_free_r+0x4c>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d9fa      	bls.n	8007ad2 <_free_r+0x42>
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	1850      	adds	r0, r2, r1
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d10b      	bne.n	8007afc <_free_r+0x6c>
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	4401      	add	r1, r0
 8007ae8:	1850      	adds	r0, r2, r1
 8007aea:	4283      	cmp	r3, r0
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	d1e0      	bne.n	8007ab2 <_free_r+0x22>
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	6053      	str	r3, [r2, #4]
 8007af6:	4408      	add	r0, r1
 8007af8:	6010      	str	r0, [r2, #0]
 8007afa:	e7da      	b.n	8007ab2 <_free_r+0x22>
 8007afc:	d902      	bls.n	8007b04 <_free_r+0x74>
 8007afe:	230c      	movs	r3, #12
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	e7d6      	b.n	8007ab2 <_free_r+0x22>
 8007b04:	6820      	ldr	r0, [r4, #0]
 8007b06:	1821      	adds	r1, r4, r0
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf04      	itt	eq
 8007b0c:	6819      	ldreq	r1, [r3, #0]
 8007b0e:	685b      	ldreq	r3, [r3, #4]
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	bf04      	itt	eq
 8007b14:	1809      	addeq	r1, r1, r0
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	6054      	str	r4, [r2, #4]
 8007b1a:	e7ca      	b.n	8007ab2 <_free_r+0x22>
 8007b1c:	bd38      	pop	{r3, r4, r5, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000454 	.word	0x20000454

08007b24 <_Balloc>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	69c6      	ldr	r6, [r0, #28]
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	b976      	cbnz	r6, 8007b4c <_Balloc+0x28>
 8007b2e:	2010      	movs	r0, #16
 8007b30:	f7fd ff68 	bl	8005a04 <malloc>
 8007b34:	4602      	mov	r2, r0
 8007b36:	61e0      	str	r0, [r4, #28]
 8007b38:	b920      	cbnz	r0, 8007b44 <_Balloc+0x20>
 8007b3a:	4b18      	ldr	r3, [pc, #96]	@ (8007b9c <_Balloc+0x78>)
 8007b3c:	4818      	ldr	r0, [pc, #96]	@ (8007ba0 <_Balloc+0x7c>)
 8007b3e:	216b      	movs	r1, #107	@ 0x6b
 8007b40:	f001 ff26 	bl	8009990 <__assert_func>
 8007b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b48:	6006      	str	r6, [r0, #0]
 8007b4a:	60c6      	str	r6, [r0, #12]
 8007b4c:	69e6      	ldr	r6, [r4, #28]
 8007b4e:	68f3      	ldr	r3, [r6, #12]
 8007b50:	b183      	cbz	r3, 8007b74 <_Balloc+0x50>
 8007b52:	69e3      	ldr	r3, [r4, #28]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b5a:	b9b8      	cbnz	r0, 8007b8c <_Balloc+0x68>
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b62:	1d72      	adds	r2, r6, #5
 8007b64:	0092      	lsls	r2, r2, #2
 8007b66:	4620      	mov	r0, r4
 8007b68:	f001 ff30 	bl	80099cc <_calloc_r>
 8007b6c:	b160      	cbz	r0, 8007b88 <_Balloc+0x64>
 8007b6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b72:	e00e      	b.n	8007b92 <_Balloc+0x6e>
 8007b74:	2221      	movs	r2, #33	@ 0x21
 8007b76:	2104      	movs	r1, #4
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f001 ff27 	bl	80099cc <_calloc_r>
 8007b7e:	69e3      	ldr	r3, [r4, #28]
 8007b80:	60f0      	str	r0, [r6, #12]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e4      	bne.n	8007b52 <_Balloc+0x2e>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	6802      	ldr	r2, [r0, #0]
 8007b8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b92:	2300      	movs	r3, #0
 8007b94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b98:	e7f7      	b.n	8007b8a <_Balloc+0x66>
 8007b9a:	bf00      	nop
 8007b9c:	0800a2fa 	.word	0x0800a2fa
 8007ba0:	0800a37a 	.word	0x0800a37a

08007ba4 <_Bfree>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	69c6      	ldr	r6, [r0, #28]
 8007ba8:	4605      	mov	r5, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	b976      	cbnz	r6, 8007bcc <_Bfree+0x28>
 8007bae:	2010      	movs	r0, #16
 8007bb0:	f7fd ff28 	bl	8005a04 <malloc>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	61e8      	str	r0, [r5, #28]
 8007bb8:	b920      	cbnz	r0, 8007bc4 <_Bfree+0x20>
 8007bba:	4b09      	ldr	r3, [pc, #36]	@ (8007be0 <_Bfree+0x3c>)
 8007bbc:	4809      	ldr	r0, [pc, #36]	@ (8007be4 <_Bfree+0x40>)
 8007bbe:	218f      	movs	r1, #143	@ 0x8f
 8007bc0:	f001 fee6 	bl	8009990 <__assert_func>
 8007bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bc8:	6006      	str	r6, [r0, #0]
 8007bca:	60c6      	str	r6, [r0, #12]
 8007bcc:	b13c      	cbz	r4, 8007bde <_Bfree+0x3a>
 8007bce:	69eb      	ldr	r3, [r5, #28]
 8007bd0:	6862      	ldr	r2, [r4, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bd8:	6021      	str	r1, [r4, #0]
 8007bda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	0800a2fa 	.word	0x0800a2fa
 8007be4:	0800a37a 	.word	0x0800a37a

08007be8 <__multadd>:
 8007be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	690d      	ldr	r5, [r1, #16]
 8007bee:	4607      	mov	r7, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	461e      	mov	r6, r3
 8007bf4:	f101 0c14 	add.w	ip, r1, #20
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f8dc 3000 	ldr.w	r3, [ip]
 8007bfe:	b299      	uxth	r1, r3
 8007c00:	fb02 6101 	mla	r1, r2, r1, r6
 8007c04:	0c1e      	lsrs	r6, r3, #16
 8007c06:	0c0b      	lsrs	r3, r1, #16
 8007c08:	fb02 3306 	mla	r3, r2, r6, r3
 8007c0c:	b289      	uxth	r1, r1
 8007c0e:	3001      	adds	r0, #1
 8007c10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c14:	4285      	cmp	r5, r0
 8007c16:	f84c 1b04 	str.w	r1, [ip], #4
 8007c1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c1e:	dcec      	bgt.n	8007bfa <__multadd+0x12>
 8007c20:	b30e      	cbz	r6, 8007c66 <__multadd+0x7e>
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dc19      	bgt.n	8007c5c <__multadd+0x74>
 8007c28:	6861      	ldr	r1, [r4, #4]
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	3101      	adds	r1, #1
 8007c2e:	f7ff ff79 	bl	8007b24 <_Balloc>
 8007c32:	4680      	mov	r8, r0
 8007c34:	b928      	cbnz	r0, 8007c42 <__multadd+0x5a>
 8007c36:	4602      	mov	r2, r0
 8007c38:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <__multadd+0x84>)
 8007c3a:	480d      	ldr	r0, [pc, #52]	@ (8007c70 <__multadd+0x88>)
 8007c3c:	21ba      	movs	r1, #186	@ 0xba
 8007c3e:	f001 fea7 	bl	8009990 <__assert_func>
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	3202      	adds	r2, #2
 8007c46:	f104 010c 	add.w	r1, r4, #12
 8007c4a:	0092      	lsls	r2, r2, #2
 8007c4c:	300c      	adds	r0, #12
 8007c4e:	f7ff f8bc 	bl	8006dca <memcpy>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff ffa5 	bl	8007ba4 <_Bfree>
 8007c5a:	4644      	mov	r4, r8
 8007c5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c60:	3501      	adds	r5, #1
 8007c62:	615e      	str	r6, [r3, #20]
 8007c64:	6125      	str	r5, [r4, #16]
 8007c66:	4620      	mov	r0, r4
 8007c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6c:	0800a369 	.word	0x0800a369
 8007c70:	0800a37a 	.word	0x0800a37a

08007c74 <__s2b>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	460c      	mov	r4, r1
 8007c7a:	4615      	mov	r5, r2
 8007c7c:	461f      	mov	r7, r3
 8007c7e:	2209      	movs	r2, #9
 8007c80:	3308      	adds	r3, #8
 8007c82:	4606      	mov	r6, r0
 8007c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c88:	2100      	movs	r1, #0
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	db09      	blt.n	8007ca4 <__s2b+0x30>
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff ff47 	bl	8007b24 <_Balloc>
 8007c96:	b940      	cbnz	r0, 8007caa <__s2b+0x36>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	4b19      	ldr	r3, [pc, #100]	@ (8007d00 <__s2b+0x8c>)
 8007c9c:	4819      	ldr	r0, [pc, #100]	@ (8007d04 <__s2b+0x90>)
 8007c9e:	21d3      	movs	r1, #211	@ 0xd3
 8007ca0:	f001 fe76 	bl	8009990 <__assert_func>
 8007ca4:	0052      	lsls	r2, r2, #1
 8007ca6:	3101      	adds	r1, #1
 8007ca8:	e7f0      	b.n	8007c8c <__s2b+0x18>
 8007caa:	9b08      	ldr	r3, [sp, #32]
 8007cac:	6143      	str	r3, [r0, #20]
 8007cae:	2d09      	cmp	r5, #9
 8007cb0:	f04f 0301 	mov.w	r3, #1
 8007cb4:	6103      	str	r3, [r0, #16]
 8007cb6:	dd16      	ble.n	8007ce6 <__s2b+0x72>
 8007cb8:	f104 0909 	add.w	r9, r4, #9
 8007cbc:	46c8      	mov	r8, r9
 8007cbe:	442c      	add	r4, r5
 8007cc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	3b30      	subs	r3, #48	@ 0x30
 8007cc8:	220a      	movs	r2, #10
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff ff8c 	bl	8007be8 <__multadd>
 8007cd0:	45a0      	cmp	r8, r4
 8007cd2:	d1f5      	bne.n	8007cc0 <__s2b+0x4c>
 8007cd4:	f1a5 0408 	sub.w	r4, r5, #8
 8007cd8:	444c      	add	r4, r9
 8007cda:	1b2d      	subs	r5, r5, r4
 8007cdc:	1963      	adds	r3, r4, r5
 8007cde:	42bb      	cmp	r3, r7
 8007ce0:	db04      	blt.n	8007cec <__s2b+0x78>
 8007ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce6:	340a      	adds	r4, #10
 8007ce8:	2509      	movs	r5, #9
 8007cea:	e7f6      	b.n	8007cda <__s2b+0x66>
 8007cec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	3b30      	subs	r3, #48	@ 0x30
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff ff76 	bl	8007be8 <__multadd>
 8007cfc:	e7ee      	b.n	8007cdc <__s2b+0x68>
 8007cfe:	bf00      	nop
 8007d00:	0800a369 	.word	0x0800a369
 8007d04:	0800a37a 	.word	0x0800a37a

08007d08 <__hi0bits>:
 8007d08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	bf36      	itet	cc
 8007d10:	0403      	lslcc	r3, r0, #16
 8007d12:	2000      	movcs	r0, #0
 8007d14:	2010      	movcc	r0, #16
 8007d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d1a:	bf3c      	itt	cc
 8007d1c:	021b      	lslcc	r3, r3, #8
 8007d1e:	3008      	addcc	r0, #8
 8007d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d24:	bf3c      	itt	cc
 8007d26:	011b      	lslcc	r3, r3, #4
 8007d28:	3004      	addcc	r0, #4
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2e:	bf3c      	itt	cc
 8007d30:	009b      	lslcc	r3, r3, #2
 8007d32:	3002      	addcc	r0, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	db05      	blt.n	8007d44 <__hi0bits+0x3c>
 8007d38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d3c:	f100 0001 	add.w	r0, r0, #1
 8007d40:	bf08      	it	eq
 8007d42:	2020      	moveq	r0, #32
 8007d44:	4770      	bx	lr

08007d46 <__lo0bits>:
 8007d46:	6803      	ldr	r3, [r0, #0]
 8007d48:	4602      	mov	r2, r0
 8007d4a:	f013 0007 	ands.w	r0, r3, #7
 8007d4e:	d00b      	beq.n	8007d68 <__lo0bits+0x22>
 8007d50:	07d9      	lsls	r1, r3, #31
 8007d52:	d421      	bmi.n	8007d98 <__lo0bits+0x52>
 8007d54:	0798      	lsls	r0, r3, #30
 8007d56:	bf49      	itett	mi
 8007d58:	085b      	lsrmi	r3, r3, #1
 8007d5a:	089b      	lsrpl	r3, r3, #2
 8007d5c:	2001      	movmi	r0, #1
 8007d5e:	6013      	strmi	r3, [r2, #0]
 8007d60:	bf5c      	itt	pl
 8007d62:	6013      	strpl	r3, [r2, #0]
 8007d64:	2002      	movpl	r0, #2
 8007d66:	4770      	bx	lr
 8007d68:	b299      	uxth	r1, r3
 8007d6a:	b909      	cbnz	r1, 8007d70 <__lo0bits+0x2a>
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	2010      	movs	r0, #16
 8007d70:	b2d9      	uxtb	r1, r3
 8007d72:	b909      	cbnz	r1, 8007d78 <__lo0bits+0x32>
 8007d74:	3008      	adds	r0, #8
 8007d76:	0a1b      	lsrs	r3, r3, #8
 8007d78:	0719      	lsls	r1, r3, #28
 8007d7a:	bf04      	itt	eq
 8007d7c:	091b      	lsreq	r3, r3, #4
 8007d7e:	3004      	addeq	r0, #4
 8007d80:	0799      	lsls	r1, r3, #30
 8007d82:	bf04      	itt	eq
 8007d84:	089b      	lsreq	r3, r3, #2
 8007d86:	3002      	addeq	r0, #2
 8007d88:	07d9      	lsls	r1, r3, #31
 8007d8a:	d403      	bmi.n	8007d94 <__lo0bits+0x4e>
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	f100 0001 	add.w	r0, r0, #1
 8007d92:	d003      	beq.n	8007d9c <__lo0bits+0x56>
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	4770      	bx	lr
 8007d98:	2000      	movs	r0, #0
 8007d9a:	4770      	bx	lr
 8007d9c:	2020      	movs	r0, #32
 8007d9e:	4770      	bx	lr

08007da0 <__i2b>:
 8007da0:	b510      	push	{r4, lr}
 8007da2:	460c      	mov	r4, r1
 8007da4:	2101      	movs	r1, #1
 8007da6:	f7ff febd 	bl	8007b24 <_Balloc>
 8007daa:	4602      	mov	r2, r0
 8007dac:	b928      	cbnz	r0, 8007dba <__i2b+0x1a>
 8007dae:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <__i2b+0x24>)
 8007db0:	4805      	ldr	r0, [pc, #20]	@ (8007dc8 <__i2b+0x28>)
 8007db2:	f240 1145 	movw	r1, #325	@ 0x145
 8007db6:	f001 fdeb 	bl	8009990 <__assert_func>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	6144      	str	r4, [r0, #20]
 8007dbe:	6103      	str	r3, [r0, #16]
 8007dc0:	bd10      	pop	{r4, pc}
 8007dc2:	bf00      	nop
 8007dc4:	0800a369 	.word	0x0800a369
 8007dc8:	0800a37a 	.word	0x0800a37a

08007dcc <__multiply>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	690a      	ldr	r2, [r1, #16]
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	bfa8      	it	ge
 8007dda:	4623      	movge	r3, r4
 8007ddc:	460f      	mov	r7, r1
 8007dde:	bfa4      	itt	ge
 8007de0:	460c      	movge	r4, r1
 8007de2:	461f      	movge	r7, r3
 8007de4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007de8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	6861      	ldr	r1, [r4, #4]
 8007df0:	eb0a 0609 	add.w	r6, sl, r9
 8007df4:	42b3      	cmp	r3, r6
 8007df6:	b085      	sub	sp, #20
 8007df8:	bfb8      	it	lt
 8007dfa:	3101      	addlt	r1, #1
 8007dfc:	f7ff fe92 	bl	8007b24 <_Balloc>
 8007e00:	b930      	cbnz	r0, 8007e10 <__multiply+0x44>
 8007e02:	4602      	mov	r2, r0
 8007e04:	4b44      	ldr	r3, [pc, #272]	@ (8007f18 <__multiply+0x14c>)
 8007e06:	4845      	ldr	r0, [pc, #276]	@ (8007f1c <__multiply+0x150>)
 8007e08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e0c:	f001 fdc0 	bl	8009990 <__assert_func>
 8007e10:	f100 0514 	add.w	r5, r0, #20
 8007e14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e18:	462b      	mov	r3, r5
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4543      	cmp	r3, r8
 8007e1e:	d321      	bcc.n	8007e64 <__multiply+0x98>
 8007e20:	f107 0114 	add.w	r1, r7, #20
 8007e24:	f104 0214 	add.w	r2, r4, #20
 8007e28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	1b13      	subs	r3, r2, r4
 8007e34:	3b15      	subs	r3, #21
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	f104 0715 	add.w	r7, r4, #21
 8007e40:	42ba      	cmp	r2, r7
 8007e42:	bf38      	it	cc
 8007e44:	2304      	movcc	r3, #4
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	9b02      	ldr	r3, [sp, #8]
 8007e4a:	9103      	str	r1, [sp, #12]
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	d80c      	bhi.n	8007e6a <__multiply+0x9e>
 8007e50:	2e00      	cmp	r6, #0
 8007e52:	dd03      	ble.n	8007e5c <__multiply+0x90>
 8007e54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d05b      	beq.n	8007f14 <__multiply+0x148>
 8007e5c:	6106      	str	r6, [r0, #16]
 8007e5e:	b005      	add	sp, #20
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e64:	f843 2b04 	str.w	r2, [r3], #4
 8007e68:	e7d8      	b.n	8007e1c <__multiply+0x50>
 8007e6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e6e:	f1ba 0f00 	cmp.w	sl, #0
 8007e72:	d024      	beq.n	8007ebe <__multiply+0xf2>
 8007e74:	f104 0e14 	add.w	lr, r4, #20
 8007e78:	46a9      	mov	r9, r5
 8007e7a:	f04f 0c00 	mov.w	ip, #0
 8007e7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e82:	f8d9 3000 	ldr.w	r3, [r9]
 8007e86:	fa1f fb87 	uxth.w	fp, r7
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e94:	f8d9 7000 	ldr.w	r7, [r9]
 8007e98:	4463      	add	r3, ip
 8007e9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ea2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007eac:	4572      	cmp	r2, lr
 8007eae:	f849 3b04 	str.w	r3, [r9], #4
 8007eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007eb6:	d8e2      	bhi.n	8007e7e <__multiply+0xb2>
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	f845 c003 	str.w	ip, [r5, r3]
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ec4:	3104      	adds	r1, #4
 8007ec6:	f1b9 0f00 	cmp.w	r9, #0
 8007eca:	d021      	beq.n	8007f10 <__multiply+0x144>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	f104 0c14 	add.w	ip, r4, #20
 8007ed2:	46ae      	mov	lr, r5
 8007ed4:	f04f 0a00 	mov.w	sl, #0
 8007ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8007edc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ee0:	fb09 770b 	mla	r7, r9, fp, r7
 8007ee4:	4457      	add	r7, sl
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007eec:	f84e 3b04 	str.w	r3, [lr], #4
 8007ef0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef8:	f8be 3000 	ldrh.w	r3, [lr]
 8007efc:	fb09 330a 	mla	r3, r9, sl, r3
 8007f00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f04:	4562      	cmp	r2, ip
 8007f06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f0a:	d8e5      	bhi.n	8007ed8 <__multiply+0x10c>
 8007f0c:	9f01      	ldr	r7, [sp, #4]
 8007f0e:	51eb      	str	r3, [r5, r7]
 8007f10:	3504      	adds	r5, #4
 8007f12:	e799      	b.n	8007e48 <__multiply+0x7c>
 8007f14:	3e01      	subs	r6, #1
 8007f16:	e79b      	b.n	8007e50 <__multiply+0x84>
 8007f18:	0800a369 	.word	0x0800a369
 8007f1c:	0800a37a 	.word	0x0800a37a

08007f20 <__pow5mult>:
 8007f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f24:	4615      	mov	r5, r2
 8007f26:	f012 0203 	ands.w	r2, r2, #3
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	d007      	beq.n	8007f40 <__pow5mult+0x20>
 8007f30:	4c25      	ldr	r4, [pc, #148]	@ (8007fc8 <__pow5mult+0xa8>)
 8007f32:	3a01      	subs	r2, #1
 8007f34:	2300      	movs	r3, #0
 8007f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f3a:	f7ff fe55 	bl	8007be8 <__multadd>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	10ad      	asrs	r5, r5, #2
 8007f42:	d03d      	beq.n	8007fc0 <__pow5mult+0xa0>
 8007f44:	69fc      	ldr	r4, [r7, #28]
 8007f46:	b97c      	cbnz	r4, 8007f68 <__pow5mult+0x48>
 8007f48:	2010      	movs	r0, #16
 8007f4a:	f7fd fd5b 	bl	8005a04 <malloc>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	61f8      	str	r0, [r7, #28]
 8007f52:	b928      	cbnz	r0, 8007f60 <__pow5mult+0x40>
 8007f54:	4b1d      	ldr	r3, [pc, #116]	@ (8007fcc <__pow5mult+0xac>)
 8007f56:	481e      	ldr	r0, [pc, #120]	@ (8007fd0 <__pow5mult+0xb0>)
 8007f58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f5c:	f001 fd18 	bl	8009990 <__assert_func>
 8007f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f64:	6004      	str	r4, [r0, #0]
 8007f66:	60c4      	str	r4, [r0, #12]
 8007f68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f70:	b94c      	cbnz	r4, 8007f86 <__pow5mult+0x66>
 8007f72:	f240 2171 	movw	r1, #625	@ 0x271
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff ff12 	bl	8007da0 <__i2b>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f82:	4604      	mov	r4, r0
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	f04f 0900 	mov.w	r9, #0
 8007f8a:	07eb      	lsls	r3, r5, #31
 8007f8c:	d50a      	bpl.n	8007fa4 <__pow5mult+0x84>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4622      	mov	r2, r4
 8007f92:	4638      	mov	r0, r7
 8007f94:	f7ff ff1a 	bl	8007dcc <__multiply>
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	f7ff fe01 	bl	8007ba4 <_Bfree>
 8007fa2:	4646      	mov	r6, r8
 8007fa4:	106d      	asrs	r5, r5, #1
 8007fa6:	d00b      	beq.n	8007fc0 <__pow5mult+0xa0>
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	b938      	cbnz	r0, 8007fbc <__pow5mult+0x9c>
 8007fac:	4622      	mov	r2, r4
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7ff ff0b 	bl	8007dcc <__multiply>
 8007fb6:	6020      	str	r0, [r4, #0]
 8007fb8:	f8c0 9000 	str.w	r9, [r0]
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	e7e4      	b.n	8007f8a <__pow5mult+0x6a>
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc6:	bf00      	nop
 8007fc8:	0800a3d4 	.word	0x0800a3d4
 8007fcc:	0800a2fa 	.word	0x0800a2fa
 8007fd0:	0800a37a 	.word	0x0800a37a

08007fd4 <__lshift>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	460c      	mov	r4, r1
 8007fda:	6849      	ldr	r1, [r1, #4]
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	4691      	mov	r9, r2
 8007fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fec:	f108 0601 	add.w	r6, r8, #1
 8007ff0:	42b3      	cmp	r3, r6
 8007ff2:	db0b      	blt.n	800800c <__lshift+0x38>
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff fd95 	bl	8007b24 <_Balloc>
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	b948      	cbnz	r0, 8008012 <__lshift+0x3e>
 8007ffe:	4602      	mov	r2, r0
 8008000:	4b28      	ldr	r3, [pc, #160]	@ (80080a4 <__lshift+0xd0>)
 8008002:	4829      	ldr	r0, [pc, #164]	@ (80080a8 <__lshift+0xd4>)
 8008004:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008008:	f001 fcc2 	bl	8009990 <__assert_func>
 800800c:	3101      	adds	r1, #1
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	e7ee      	b.n	8007ff0 <__lshift+0x1c>
 8008012:	2300      	movs	r3, #0
 8008014:	f100 0114 	add.w	r1, r0, #20
 8008018:	f100 0210 	add.w	r2, r0, #16
 800801c:	4618      	mov	r0, r3
 800801e:	4553      	cmp	r3, sl
 8008020:	db33      	blt.n	800808a <__lshift+0xb6>
 8008022:	6920      	ldr	r0, [r4, #16]
 8008024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008028:	f104 0314 	add.w	r3, r4, #20
 800802c:	f019 091f 	ands.w	r9, r9, #31
 8008030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008038:	d02b      	beq.n	8008092 <__lshift+0xbe>
 800803a:	f1c9 0e20 	rsb	lr, r9, #32
 800803e:	468a      	mov	sl, r1
 8008040:	2200      	movs	r2, #0
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	fa00 f009 	lsl.w	r0, r0, r9
 8008048:	4310      	orrs	r0, r2
 800804a:	f84a 0b04 	str.w	r0, [sl], #4
 800804e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008052:	459c      	cmp	ip, r3
 8008054:	fa22 f20e 	lsr.w	r2, r2, lr
 8008058:	d8f3      	bhi.n	8008042 <__lshift+0x6e>
 800805a:	ebac 0304 	sub.w	r3, ip, r4
 800805e:	3b15      	subs	r3, #21
 8008060:	f023 0303 	bic.w	r3, r3, #3
 8008064:	3304      	adds	r3, #4
 8008066:	f104 0015 	add.w	r0, r4, #21
 800806a:	4584      	cmp	ip, r0
 800806c:	bf38      	it	cc
 800806e:	2304      	movcc	r3, #4
 8008070:	50ca      	str	r2, [r1, r3]
 8008072:	b10a      	cbz	r2, 8008078 <__lshift+0xa4>
 8008074:	f108 0602 	add.w	r6, r8, #2
 8008078:	3e01      	subs	r6, #1
 800807a:	4638      	mov	r0, r7
 800807c:	612e      	str	r6, [r5, #16]
 800807e:	4621      	mov	r1, r4
 8008080:	f7ff fd90 	bl	8007ba4 <_Bfree>
 8008084:	4628      	mov	r0, r5
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	f842 0f04 	str.w	r0, [r2, #4]!
 800808e:	3301      	adds	r3, #1
 8008090:	e7c5      	b.n	800801e <__lshift+0x4a>
 8008092:	3904      	subs	r1, #4
 8008094:	f853 2b04 	ldr.w	r2, [r3], #4
 8008098:	f841 2f04 	str.w	r2, [r1, #4]!
 800809c:	459c      	cmp	ip, r3
 800809e:	d8f9      	bhi.n	8008094 <__lshift+0xc0>
 80080a0:	e7ea      	b.n	8008078 <__lshift+0xa4>
 80080a2:	bf00      	nop
 80080a4:	0800a369 	.word	0x0800a369
 80080a8:	0800a37a 	.word	0x0800a37a

080080ac <__mcmp>:
 80080ac:	690a      	ldr	r2, [r1, #16]
 80080ae:	4603      	mov	r3, r0
 80080b0:	6900      	ldr	r0, [r0, #16]
 80080b2:	1a80      	subs	r0, r0, r2
 80080b4:	b530      	push	{r4, r5, lr}
 80080b6:	d10e      	bne.n	80080d6 <__mcmp+0x2a>
 80080b8:	3314      	adds	r3, #20
 80080ba:	3114      	adds	r1, #20
 80080bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080cc:	4295      	cmp	r5, r2
 80080ce:	d003      	beq.n	80080d8 <__mcmp+0x2c>
 80080d0:	d205      	bcs.n	80080de <__mcmp+0x32>
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	bd30      	pop	{r4, r5, pc}
 80080d8:	42a3      	cmp	r3, r4
 80080da:	d3f3      	bcc.n	80080c4 <__mcmp+0x18>
 80080dc:	e7fb      	b.n	80080d6 <__mcmp+0x2a>
 80080de:	2001      	movs	r0, #1
 80080e0:	e7f9      	b.n	80080d6 <__mcmp+0x2a>
	...

080080e4 <__mdiff>:
 80080e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	4689      	mov	r9, r1
 80080ea:	4606      	mov	r6, r0
 80080ec:	4611      	mov	r1, r2
 80080ee:	4648      	mov	r0, r9
 80080f0:	4614      	mov	r4, r2
 80080f2:	f7ff ffdb 	bl	80080ac <__mcmp>
 80080f6:	1e05      	subs	r5, r0, #0
 80080f8:	d112      	bne.n	8008120 <__mdiff+0x3c>
 80080fa:	4629      	mov	r1, r5
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7ff fd11 	bl	8007b24 <_Balloc>
 8008102:	4602      	mov	r2, r0
 8008104:	b928      	cbnz	r0, 8008112 <__mdiff+0x2e>
 8008106:	4b3f      	ldr	r3, [pc, #252]	@ (8008204 <__mdiff+0x120>)
 8008108:	f240 2137 	movw	r1, #567	@ 0x237
 800810c:	483e      	ldr	r0, [pc, #248]	@ (8008208 <__mdiff+0x124>)
 800810e:	f001 fc3f 	bl	8009990 <__assert_func>
 8008112:	2301      	movs	r3, #1
 8008114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008118:	4610      	mov	r0, r2
 800811a:	b003      	add	sp, #12
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008120:	bfbc      	itt	lt
 8008122:	464b      	movlt	r3, r9
 8008124:	46a1      	movlt	r9, r4
 8008126:	4630      	mov	r0, r6
 8008128:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800812c:	bfba      	itte	lt
 800812e:	461c      	movlt	r4, r3
 8008130:	2501      	movlt	r5, #1
 8008132:	2500      	movge	r5, #0
 8008134:	f7ff fcf6 	bl	8007b24 <_Balloc>
 8008138:	4602      	mov	r2, r0
 800813a:	b918      	cbnz	r0, 8008144 <__mdiff+0x60>
 800813c:	4b31      	ldr	r3, [pc, #196]	@ (8008204 <__mdiff+0x120>)
 800813e:	f240 2145 	movw	r1, #581	@ 0x245
 8008142:	e7e3      	b.n	800810c <__mdiff+0x28>
 8008144:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008148:	6926      	ldr	r6, [r4, #16]
 800814a:	60c5      	str	r5, [r0, #12]
 800814c:	f109 0310 	add.w	r3, r9, #16
 8008150:	f109 0514 	add.w	r5, r9, #20
 8008154:	f104 0e14 	add.w	lr, r4, #20
 8008158:	f100 0b14 	add.w	fp, r0, #20
 800815c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008160:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	46d9      	mov	r9, fp
 8008168:	f04f 0c00 	mov.w	ip, #0
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008172:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	fa1f f38a 	uxth.w	r3, sl
 800817c:	4619      	mov	r1, r3
 800817e:	b283      	uxth	r3, r0
 8008180:	1acb      	subs	r3, r1, r3
 8008182:	0c00      	lsrs	r0, r0, #16
 8008184:	4463      	add	r3, ip
 8008186:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800818a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800818e:	b29b      	uxth	r3, r3
 8008190:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008194:	4576      	cmp	r6, lr
 8008196:	f849 3b04 	str.w	r3, [r9], #4
 800819a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800819e:	d8e5      	bhi.n	800816c <__mdiff+0x88>
 80081a0:	1b33      	subs	r3, r6, r4
 80081a2:	3b15      	subs	r3, #21
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	3415      	adds	r4, #21
 80081aa:	3304      	adds	r3, #4
 80081ac:	42a6      	cmp	r6, r4
 80081ae:	bf38      	it	cc
 80081b0:	2304      	movcc	r3, #4
 80081b2:	441d      	add	r5, r3
 80081b4:	445b      	add	r3, fp
 80081b6:	461e      	mov	r6, r3
 80081b8:	462c      	mov	r4, r5
 80081ba:	4544      	cmp	r4, r8
 80081bc:	d30e      	bcc.n	80081dc <__mdiff+0xf8>
 80081be:	f108 0103 	add.w	r1, r8, #3
 80081c2:	1b49      	subs	r1, r1, r5
 80081c4:	f021 0103 	bic.w	r1, r1, #3
 80081c8:	3d03      	subs	r5, #3
 80081ca:	45a8      	cmp	r8, r5
 80081cc:	bf38      	it	cc
 80081ce:	2100      	movcc	r1, #0
 80081d0:	440b      	add	r3, r1
 80081d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081d6:	b191      	cbz	r1, 80081fe <__mdiff+0x11a>
 80081d8:	6117      	str	r7, [r2, #16]
 80081da:	e79d      	b.n	8008118 <__mdiff+0x34>
 80081dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80081e0:	46e6      	mov	lr, ip
 80081e2:	0c08      	lsrs	r0, r1, #16
 80081e4:	fa1c fc81 	uxtah	ip, ip, r1
 80081e8:	4471      	add	r1, lr
 80081ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80081ee:	b289      	uxth	r1, r1
 80081f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081f4:	f846 1b04 	str.w	r1, [r6], #4
 80081f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081fc:	e7dd      	b.n	80081ba <__mdiff+0xd6>
 80081fe:	3f01      	subs	r7, #1
 8008200:	e7e7      	b.n	80081d2 <__mdiff+0xee>
 8008202:	bf00      	nop
 8008204:	0800a369 	.word	0x0800a369
 8008208:	0800a37a 	.word	0x0800a37a

0800820c <__ulp>:
 800820c:	b082      	sub	sp, #8
 800820e:	ed8d 0b00 	vstr	d0, [sp]
 8008212:	9a01      	ldr	r2, [sp, #4]
 8008214:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <__ulp+0x48>)
 8008216:	4013      	ands	r3, r2
 8008218:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc08      	bgt.n	8008232 <__ulp+0x26>
 8008220:	425b      	negs	r3, r3
 8008222:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008226:	ea4f 5223 	mov.w	r2, r3, asr #20
 800822a:	da04      	bge.n	8008236 <__ulp+0x2a>
 800822c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008230:	4113      	asrs	r3, r2
 8008232:	2200      	movs	r2, #0
 8008234:	e008      	b.n	8008248 <__ulp+0x3c>
 8008236:	f1a2 0314 	sub.w	r3, r2, #20
 800823a:	2b1e      	cmp	r3, #30
 800823c:	bfda      	itte	le
 800823e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008242:	40da      	lsrle	r2, r3
 8008244:	2201      	movgt	r2, #1
 8008246:	2300      	movs	r3, #0
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	ec41 0b10 	vmov	d0, r0, r1
 8008250:	b002      	add	sp, #8
 8008252:	4770      	bx	lr
 8008254:	7ff00000 	.word	0x7ff00000

08008258 <__b2d>:
 8008258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825c:	6906      	ldr	r6, [r0, #16]
 800825e:	f100 0814 	add.w	r8, r0, #20
 8008262:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008266:	1f37      	subs	r7, r6, #4
 8008268:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800826c:	4610      	mov	r0, r2
 800826e:	f7ff fd4b 	bl	8007d08 <__hi0bits>
 8008272:	f1c0 0320 	rsb	r3, r0, #32
 8008276:	280a      	cmp	r0, #10
 8008278:	600b      	str	r3, [r1, #0]
 800827a:	491b      	ldr	r1, [pc, #108]	@ (80082e8 <__b2d+0x90>)
 800827c:	dc15      	bgt.n	80082aa <__b2d+0x52>
 800827e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008282:	fa22 f30c 	lsr.w	r3, r2, ip
 8008286:	45b8      	cmp	r8, r7
 8008288:	ea43 0501 	orr.w	r5, r3, r1
 800828c:	bf34      	ite	cc
 800828e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008292:	2300      	movcs	r3, #0
 8008294:	3015      	adds	r0, #21
 8008296:	fa02 f000 	lsl.w	r0, r2, r0
 800829a:	fa23 f30c 	lsr.w	r3, r3, ip
 800829e:	4303      	orrs	r3, r0
 80082a0:	461c      	mov	r4, r3
 80082a2:	ec45 4b10 	vmov	d0, r4, r5
 80082a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082aa:	45b8      	cmp	r8, r7
 80082ac:	bf3a      	itte	cc
 80082ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80082b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80082b6:	2300      	movcs	r3, #0
 80082b8:	380b      	subs	r0, #11
 80082ba:	d012      	beq.n	80082e2 <__b2d+0x8a>
 80082bc:	f1c0 0120 	rsb	r1, r0, #32
 80082c0:	fa23 f401 	lsr.w	r4, r3, r1
 80082c4:	4082      	lsls	r2, r0
 80082c6:	4322      	orrs	r2, r4
 80082c8:	4547      	cmp	r7, r8
 80082ca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80082ce:	bf8c      	ite	hi
 80082d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80082d4:	2200      	movls	r2, #0
 80082d6:	4083      	lsls	r3, r0
 80082d8:	40ca      	lsrs	r2, r1
 80082da:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80082de:	4313      	orrs	r3, r2
 80082e0:	e7de      	b.n	80082a0 <__b2d+0x48>
 80082e2:	ea42 0501 	orr.w	r5, r2, r1
 80082e6:	e7db      	b.n	80082a0 <__b2d+0x48>
 80082e8:	3ff00000 	.word	0x3ff00000

080082ec <__d2b>:
 80082ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	460f      	mov	r7, r1
 80082f2:	2101      	movs	r1, #1
 80082f4:	ec59 8b10 	vmov	r8, r9, d0
 80082f8:	4616      	mov	r6, r2
 80082fa:	f7ff fc13 	bl	8007b24 <_Balloc>
 80082fe:	4604      	mov	r4, r0
 8008300:	b930      	cbnz	r0, 8008310 <__d2b+0x24>
 8008302:	4602      	mov	r2, r0
 8008304:	4b23      	ldr	r3, [pc, #140]	@ (8008394 <__d2b+0xa8>)
 8008306:	4824      	ldr	r0, [pc, #144]	@ (8008398 <__d2b+0xac>)
 8008308:	f240 310f 	movw	r1, #783	@ 0x30f
 800830c:	f001 fb40 	bl	8009990 <__assert_func>
 8008310:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008318:	b10d      	cbz	r5, 800831e <__d2b+0x32>
 800831a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	f1b8 0300 	subs.w	r3, r8, #0
 8008324:	d023      	beq.n	800836e <__d2b+0x82>
 8008326:	4668      	mov	r0, sp
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	f7ff fd0c 	bl	8007d46 <__lo0bits>
 800832e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008332:	b1d0      	cbz	r0, 800836a <__d2b+0x7e>
 8008334:	f1c0 0320 	rsb	r3, r0, #32
 8008338:	fa02 f303 	lsl.w	r3, r2, r3
 800833c:	430b      	orrs	r3, r1
 800833e:	40c2      	lsrs	r2, r0
 8008340:	6163      	str	r3, [r4, #20]
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	61a3      	str	r3, [r4, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf0c      	ite	eq
 800834c:	2201      	moveq	r2, #1
 800834e:	2202      	movne	r2, #2
 8008350:	6122      	str	r2, [r4, #16]
 8008352:	b1a5      	cbz	r5, 800837e <__d2b+0x92>
 8008354:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008358:	4405      	add	r5, r0
 800835a:	603d      	str	r5, [r7, #0]
 800835c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008360:	6030      	str	r0, [r6, #0]
 8008362:	4620      	mov	r0, r4
 8008364:	b003      	add	sp, #12
 8008366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800836a:	6161      	str	r1, [r4, #20]
 800836c:	e7ea      	b.n	8008344 <__d2b+0x58>
 800836e:	a801      	add	r0, sp, #4
 8008370:	f7ff fce9 	bl	8007d46 <__lo0bits>
 8008374:	9b01      	ldr	r3, [sp, #4]
 8008376:	6163      	str	r3, [r4, #20]
 8008378:	3020      	adds	r0, #32
 800837a:	2201      	movs	r2, #1
 800837c:	e7e8      	b.n	8008350 <__d2b+0x64>
 800837e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008382:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008386:	6038      	str	r0, [r7, #0]
 8008388:	6918      	ldr	r0, [r3, #16]
 800838a:	f7ff fcbd 	bl	8007d08 <__hi0bits>
 800838e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008392:	e7e5      	b.n	8008360 <__d2b+0x74>
 8008394:	0800a369 	.word	0x0800a369
 8008398:	0800a37a 	.word	0x0800a37a

0800839c <__ratio>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	b085      	sub	sp, #20
 80083a2:	e9cd 1000 	strd	r1, r0, [sp]
 80083a6:	a902      	add	r1, sp, #8
 80083a8:	f7ff ff56 	bl	8008258 <__b2d>
 80083ac:	9800      	ldr	r0, [sp, #0]
 80083ae:	a903      	add	r1, sp, #12
 80083b0:	ec55 4b10 	vmov	r4, r5, d0
 80083b4:	f7ff ff50 	bl	8008258 <__b2d>
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	6919      	ldr	r1, [r3, #16]
 80083bc:	9b00      	ldr	r3, [sp, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	1ac9      	subs	r1, r1, r3
 80083c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	ec5b ab10 	vmov	sl, fp, d0
 80083cc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bfce      	itee	gt
 80083d4:	462a      	movgt	r2, r5
 80083d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80083da:	465a      	movle	r2, fp
 80083dc:	462f      	mov	r7, r5
 80083de:	46d9      	mov	r9, fp
 80083e0:	bfcc      	ite	gt
 80083e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80083e6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80083ea:	464b      	mov	r3, r9
 80083ec:	4652      	mov	r2, sl
 80083ee:	4620      	mov	r0, r4
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fa43 	bl	800087c <__aeabi_ddiv>
 80083f6:	ec41 0b10 	vmov	d0, r0, r1
 80083fa:	b005      	add	sp, #20
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008400 <__copybits>:
 8008400:	3901      	subs	r1, #1
 8008402:	b570      	push	{r4, r5, r6, lr}
 8008404:	1149      	asrs	r1, r1, #5
 8008406:	6914      	ldr	r4, [r2, #16]
 8008408:	3101      	adds	r1, #1
 800840a:	f102 0314 	add.w	r3, r2, #20
 800840e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008412:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008416:	1f05      	subs	r5, r0, #4
 8008418:	42a3      	cmp	r3, r4
 800841a:	d30c      	bcc.n	8008436 <__copybits+0x36>
 800841c:	1aa3      	subs	r3, r4, r2
 800841e:	3b11      	subs	r3, #17
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	3211      	adds	r2, #17
 8008426:	42a2      	cmp	r2, r4
 8008428:	bf88      	it	hi
 800842a:	2300      	movhi	r3, #0
 800842c:	4418      	add	r0, r3
 800842e:	2300      	movs	r3, #0
 8008430:	4288      	cmp	r0, r1
 8008432:	d305      	bcc.n	8008440 <__copybits+0x40>
 8008434:	bd70      	pop	{r4, r5, r6, pc}
 8008436:	f853 6b04 	ldr.w	r6, [r3], #4
 800843a:	f845 6f04 	str.w	r6, [r5, #4]!
 800843e:	e7eb      	b.n	8008418 <__copybits+0x18>
 8008440:	f840 3b04 	str.w	r3, [r0], #4
 8008444:	e7f4      	b.n	8008430 <__copybits+0x30>

08008446 <__any_on>:
 8008446:	f100 0214 	add.w	r2, r0, #20
 800844a:	6900      	ldr	r0, [r0, #16]
 800844c:	114b      	asrs	r3, r1, #5
 800844e:	4298      	cmp	r0, r3
 8008450:	b510      	push	{r4, lr}
 8008452:	db11      	blt.n	8008478 <__any_on+0x32>
 8008454:	dd0a      	ble.n	800846c <__any_on+0x26>
 8008456:	f011 011f 	ands.w	r1, r1, #31
 800845a:	d007      	beq.n	800846c <__any_on+0x26>
 800845c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008460:	fa24 f001 	lsr.w	r0, r4, r1
 8008464:	fa00 f101 	lsl.w	r1, r0, r1
 8008468:	428c      	cmp	r4, r1
 800846a:	d10b      	bne.n	8008484 <__any_on+0x3e>
 800846c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008470:	4293      	cmp	r3, r2
 8008472:	d803      	bhi.n	800847c <__any_on+0x36>
 8008474:	2000      	movs	r0, #0
 8008476:	bd10      	pop	{r4, pc}
 8008478:	4603      	mov	r3, r0
 800847a:	e7f7      	b.n	800846c <__any_on+0x26>
 800847c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008480:	2900      	cmp	r1, #0
 8008482:	d0f5      	beq.n	8008470 <__any_on+0x2a>
 8008484:	2001      	movs	r0, #1
 8008486:	e7f6      	b.n	8008476 <__any_on+0x30>

08008488 <sulp>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	460d      	mov	r5, r1
 800848e:	ec45 4b10 	vmov	d0, r4, r5
 8008492:	4616      	mov	r6, r2
 8008494:	f7ff feba 	bl	800820c <__ulp>
 8008498:	ec51 0b10 	vmov	r0, r1, d0
 800849c:	b17e      	cbz	r6, 80084be <sulp+0x36>
 800849e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80084a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd09      	ble.n	80084be <sulp+0x36>
 80084aa:	051b      	lsls	r3, r3, #20
 80084ac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80084b0:	2400      	movs	r4, #0
 80084b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80084b6:	4622      	mov	r2, r4
 80084b8:	462b      	mov	r3, r5
 80084ba:	f7f8 f8b5 	bl	8000628 <__aeabi_dmul>
 80084be:	ec41 0b10 	vmov	d0, r0, r1
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	0000      	movs	r0, r0
	...

080084c8 <_strtod_l>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	b09f      	sub	sp, #124	@ 0x7c
 80084ce:	460c      	mov	r4, r1
 80084d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80084d2:	2200      	movs	r2, #0
 80084d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80084d6:	9005      	str	r0, [sp, #20]
 80084d8:	f04f 0a00 	mov.w	sl, #0
 80084dc:	f04f 0b00 	mov.w	fp, #0
 80084e0:	460a      	mov	r2, r1
 80084e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80084e4:	7811      	ldrb	r1, [r2, #0]
 80084e6:	292b      	cmp	r1, #43	@ 0x2b
 80084e8:	d04a      	beq.n	8008580 <_strtod_l+0xb8>
 80084ea:	d838      	bhi.n	800855e <_strtod_l+0x96>
 80084ec:	290d      	cmp	r1, #13
 80084ee:	d832      	bhi.n	8008556 <_strtod_l+0x8e>
 80084f0:	2908      	cmp	r1, #8
 80084f2:	d832      	bhi.n	800855a <_strtod_l+0x92>
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d03b      	beq.n	8008570 <_strtod_l+0xa8>
 80084f8:	2200      	movs	r2, #0
 80084fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80084fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80084fe:	782a      	ldrb	r2, [r5, #0]
 8008500:	2a30      	cmp	r2, #48	@ 0x30
 8008502:	f040 80b3 	bne.w	800866c <_strtod_l+0x1a4>
 8008506:	786a      	ldrb	r2, [r5, #1]
 8008508:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800850c:	2a58      	cmp	r2, #88	@ 0x58
 800850e:	d16e      	bne.n	80085ee <_strtod_l+0x126>
 8008510:	9302      	str	r3, [sp, #8]
 8008512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	ab1a      	add	r3, sp, #104	@ 0x68
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	4a8e      	ldr	r2, [pc, #568]	@ (8008754 <_strtod_l+0x28c>)
 800851c:	9805      	ldr	r0, [sp, #20]
 800851e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008520:	a919      	add	r1, sp, #100	@ 0x64
 8008522:	f001 facf 	bl	8009ac4 <__gethex>
 8008526:	f010 060f 	ands.w	r6, r0, #15
 800852a:	4604      	mov	r4, r0
 800852c:	d005      	beq.n	800853a <_strtod_l+0x72>
 800852e:	2e06      	cmp	r6, #6
 8008530:	d128      	bne.n	8008584 <_strtod_l+0xbc>
 8008532:	3501      	adds	r5, #1
 8008534:	2300      	movs	r3, #0
 8008536:	9519      	str	r5, [sp, #100]	@ 0x64
 8008538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800853a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800853c:	2b00      	cmp	r3, #0
 800853e:	f040 858e 	bne.w	800905e <_strtod_l+0xb96>
 8008542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008544:	b1cb      	cbz	r3, 800857a <_strtod_l+0xb2>
 8008546:	4652      	mov	r2, sl
 8008548:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800854c:	ec43 2b10 	vmov	d0, r2, r3
 8008550:	b01f      	add	sp, #124	@ 0x7c
 8008552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008556:	2920      	cmp	r1, #32
 8008558:	d1ce      	bne.n	80084f8 <_strtod_l+0x30>
 800855a:	3201      	adds	r2, #1
 800855c:	e7c1      	b.n	80084e2 <_strtod_l+0x1a>
 800855e:	292d      	cmp	r1, #45	@ 0x2d
 8008560:	d1ca      	bne.n	80084f8 <_strtod_l+0x30>
 8008562:	2101      	movs	r1, #1
 8008564:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008566:	1c51      	adds	r1, r2, #1
 8008568:	9119      	str	r1, [sp, #100]	@ 0x64
 800856a:	7852      	ldrb	r2, [r2, #1]
 800856c:	2a00      	cmp	r2, #0
 800856e:	d1c5      	bne.n	80084fc <_strtod_l+0x34>
 8008570:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008572:	9419      	str	r4, [sp, #100]	@ 0x64
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 8570 	bne.w	800905a <_strtod_l+0xb92>
 800857a:	4652      	mov	r2, sl
 800857c:	465b      	mov	r3, fp
 800857e:	e7e5      	b.n	800854c <_strtod_l+0x84>
 8008580:	2100      	movs	r1, #0
 8008582:	e7ef      	b.n	8008564 <_strtod_l+0x9c>
 8008584:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008586:	b13a      	cbz	r2, 8008598 <_strtod_l+0xd0>
 8008588:	2135      	movs	r1, #53	@ 0x35
 800858a:	a81c      	add	r0, sp, #112	@ 0x70
 800858c:	f7ff ff38 	bl	8008400 <__copybits>
 8008590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008592:	9805      	ldr	r0, [sp, #20]
 8008594:	f7ff fb06 	bl	8007ba4 <_Bfree>
 8008598:	3e01      	subs	r6, #1
 800859a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800859c:	2e04      	cmp	r6, #4
 800859e:	d806      	bhi.n	80085ae <_strtod_l+0xe6>
 80085a0:	e8df f006 	tbb	[pc, r6]
 80085a4:	201d0314 	.word	0x201d0314
 80085a8:	14          	.byte	0x14
 80085a9:	00          	.byte	0x00
 80085aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80085ae:	05e1      	lsls	r1, r4, #23
 80085b0:	bf48      	it	mi
 80085b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80085b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085ba:	0d1b      	lsrs	r3, r3, #20
 80085bc:	051b      	lsls	r3, r3, #20
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1bb      	bne.n	800853a <_strtod_l+0x72>
 80085c2:	f7fe fbd5 	bl	8006d70 <__errno>
 80085c6:	2322      	movs	r3, #34	@ 0x22
 80085c8:	6003      	str	r3, [r0, #0]
 80085ca:	e7b6      	b.n	800853a <_strtod_l+0x72>
 80085cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80085d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80085d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80085dc:	e7e7      	b.n	80085ae <_strtod_l+0xe6>
 80085de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800875c <_strtod_l+0x294>
 80085e2:	e7e4      	b.n	80085ae <_strtod_l+0xe6>
 80085e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80085e8:	f04f 3aff 	mov.w	sl, #4294967295
 80085ec:	e7df      	b.n	80085ae <_strtod_l+0xe6>
 80085ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	2b30      	cmp	r3, #48	@ 0x30
 80085f8:	d0f9      	beq.n	80085ee <_strtod_l+0x126>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d09d      	beq.n	800853a <_strtod_l+0x72>
 80085fe:	2301      	movs	r3, #1
 8008600:	9309      	str	r3, [sp, #36]	@ 0x24
 8008602:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008604:	930c      	str	r3, [sp, #48]	@ 0x30
 8008606:	2300      	movs	r3, #0
 8008608:	9308      	str	r3, [sp, #32]
 800860a:	930a      	str	r3, [sp, #40]	@ 0x28
 800860c:	461f      	mov	r7, r3
 800860e:	220a      	movs	r2, #10
 8008610:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008612:	7805      	ldrb	r5, [r0, #0]
 8008614:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008618:	b2d9      	uxtb	r1, r3
 800861a:	2909      	cmp	r1, #9
 800861c:	d928      	bls.n	8008670 <_strtod_l+0x1a8>
 800861e:	494e      	ldr	r1, [pc, #312]	@ (8008758 <_strtod_l+0x290>)
 8008620:	2201      	movs	r2, #1
 8008622:	f001 f979 	bl	8009918 <strncmp>
 8008626:	2800      	cmp	r0, #0
 8008628:	d032      	beq.n	8008690 <_strtod_l+0x1c8>
 800862a:	2000      	movs	r0, #0
 800862c:	462a      	mov	r2, r5
 800862e:	4681      	mov	r9, r0
 8008630:	463d      	mov	r5, r7
 8008632:	4603      	mov	r3, r0
 8008634:	2a65      	cmp	r2, #101	@ 0x65
 8008636:	d001      	beq.n	800863c <_strtod_l+0x174>
 8008638:	2a45      	cmp	r2, #69	@ 0x45
 800863a:	d114      	bne.n	8008666 <_strtod_l+0x19e>
 800863c:	b91d      	cbnz	r5, 8008646 <_strtod_l+0x17e>
 800863e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008640:	4302      	orrs	r2, r0
 8008642:	d095      	beq.n	8008570 <_strtod_l+0xa8>
 8008644:	2500      	movs	r5, #0
 8008646:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008648:	1c62      	adds	r2, r4, #1
 800864a:	9219      	str	r2, [sp, #100]	@ 0x64
 800864c:	7862      	ldrb	r2, [r4, #1]
 800864e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008650:	d077      	beq.n	8008742 <_strtod_l+0x27a>
 8008652:	2a2d      	cmp	r2, #45	@ 0x2d
 8008654:	d07b      	beq.n	800874e <_strtod_l+0x286>
 8008656:	f04f 0c00 	mov.w	ip, #0
 800865a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800865e:	2909      	cmp	r1, #9
 8008660:	f240 8082 	bls.w	8008768 <_strtod_l+0x2a0>
 8008664:	9419      	str	r4, [sp, #100]	@ 0x64
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	e0a2      	b.n	80087b2 <_strtod_l+0x2ea>
 800866c:	2300      	movs	r3, #0
 800866e:	e7c7      	b.n	8008600 <_strtod_l+0x138>
 8008670:	2f08      	cmp	r7, #8
 8008672:	bfd5      	itete	le
 8008674:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008676:	9908      	ldrgt	r1, [sp, #32]
 8008678:	fb02 3301 	mlale	r3, r2, r1, r3
 800867c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008680:	f100 0001 	add.w	r0, r0, #1
 8008684:	bfd4      	ite	le
 8008686:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008688:	9308      	strgt	r3, [sp, #32]
 800868a:	3701      	adds	r7, #1
 800868c:	9019      	str	r0, [sp, #100]	@ 0x64
 800868e:	e7bf      	b.n	8008610 <_strtod_l+0x148>
 8008690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	9219      	str	r2, [sp, #100]	@ 0x64
 8008696:	785a      	ldrb	r2, [r3, #1]
 8008698:	b37f      	cbz	r7, 80086fa <_strtod_l+0x232>
 800869a:	4681      	mov	r9, r0
 800869c:	463d      	mov	r5, r7
 800869e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	d912      	bls.n	80086cc <_strtod_l+0x204>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e7c4      	b.n	8008634 <_strtod_l+0x16c>
 80086aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80086b0:	785a      	ldrb	r2, [r3, #1]
 80086b2:	3001      	adds	r0, #1
 80086b4:	2a30      	cmp	r2, #48	@ 0x30
 80086b6:	d0f8      	beq.n	80086aa <_strtod_l+0x1e2>
 80086b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80086bc:	2b08      	cmp	r3, #8
 80086be:	f200 84d3 	bhi.w	8009068 <_strtod_l+0xba0>
 80086c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80086c6:	4681      	mov	r9, r0
 80086c8:	2000      	movs	r0, #0
 80086ca:	4605      	mov	r5, r0
 80086cc:	3a30      	subs	r2, #48	@ 0x30
 80086ce:	f100 0301 	add.w	r3, r0, #1
 80086d2:	d02a      	beq.n	800872a <_strtod_l+0x262>
 80086d4:	4499      	add	r9, r3
 80086d6:	eb00 0c05 	add.w	ip, r0, r5
 80086da:	462b      	mov	r3, r5
 80086dc:	210a      	movs	r1, #10
 80086de:	4563      	cmp	r3, ip
 80086e0:	d10d      	bne.n	80086fe <_strtod_l+0x236>
 80086e2:	1c69      	adds	r1, r5, #1
 80086e4:	4401      	add	r1, r0
 80086e6:	4428      	add	r0, r5
 80086e8:	2808      	cmp	r0, #8
 80086ea:	dc16      	bgt.n	800871a <_strtod_l+0x252>
 80086ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086ee:	230a      	movs	r3, #10
 80086f0:	fb03 2300 	mla	r3, r3, r0, r2
 80086f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f6:	2300      	movs	r3, #0
 80086f8:	e018      	b.n	800872c <_strtod_l+0x264>
 80086fa:	4638      	mov	r0, r7
 80086fc:	e7da      	b.n	80086b4 <_strtod_l+0x1ec>
 80086fe:	2b08      	cmp	r3, #8
 8008700:	f103 0301 	add.w	r3, r3, #1
 8008704:	dc03      	bgt.n	800870e <_strtod_l+0x246>
 8008706:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008708:	434e      	muls	r6, r1
 800870a:	960a      	str	r6, [sp, #40]	@ 0x28
 800870c:	e7e7      	b.n	80086de <_strtod_l+0x216>
 800870e:	2b10      	cmp	r3, #16
 8008710:	bfde      	ittt	le
 8008712:	9e08      	ldrle	r6, [sp, #32]
 8008714:	434e      	mulle	r6, r1
 8008716:	9608      	strle	r6, [sp, #32]
 8008718:	e7e1      	b.n	80086de <_strtod_l+0x216>
 800871a:	280f      	cmp	r0, #15
 800871c:	dceb      	bgt.n	80086f6 <_strtod_l+0x22e>
 800871e:	9808      	ldr	r0, [sp, #32]
 8008720:	230a      	movs	r3, #10
 8008722:	fb03 2300 	mla	r3, r3, r0, r2
 8008726:	9308      	str	r3, [sp, #32]
 8008728:	e7e5      	b.n	80086f6 <_strtod_l+0x22e>
 800872a:	4629      	mov	r1, r5
 800872c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800872e:	1c50      	adds	r0, r2, #1
 8008730:	9019      	str	r0, [sp, #100]	@ 0x64
 8008732:	7852      	ldrb	r2, [r2, #1]
 8008734:	4618      	mov	r0, r3
 8008736:	460d      	mov	r5, r1
 8008738:	e7b1      	b.n	800869e <_strtod_l+0x1d6>
 800873a:	f04f 0900 	mov.w	r9, #0
 800873e:	2301      	movs	r3, #1
 8008740:	e77d      	b.n	800863e <_strtod_l+0x176>
 8008742:	f04f 0c00 	mov.w	ip, #0
 8008746:	1ca2      	adds	r2, r4, #2
 8008748:	9219      	str	r2, [sp, #100]	@ 0x64
 800874a:	78a2      	ldrb	r2, [r4, #2]
 800874c:	e785      	b.n	800865a <_strtod_l+0x192>
 800874e:	f04f 0c01 	mov.w	ip, #1
 8008752:	e7f8      	b.n	8008746 <_strtod_l+0x27e>
 8008754:	0800a4e8 	.word	0x0800a4e8
 8008758:	0800a4d0 	.word	0x0800a4d0
 800875c:	7ff00000 	.word	0x7ff00000
 8008760:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008762:	1c51      	adds	r1, r2, #1
 8008764:	9119      	str	r1, [sp, #100]	@ 0x64
 8008766:	7852      	ldrb	r2, [r2, #1]
 8008768:	2a30      	cmp	r2, #48	@ 0x30
 800876a:	d0f9      	beq.n	8008760 <_strtod_l+0x298>
 800876c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008770:	2908      	cmp	r1, #8
 8008772:	f63f af78 	bhi.w	8008666 <_strtod_l+0x19e>
 8008776:	3a30      	subs	r2, #48	@ 0x30
 8008778:	920e      	str	r2, [sp, #56]	@ 0x38
 800877a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800877c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800877e:	f04f 080a 	mov.w	r8, #10
 8008782:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008784:	1c56      	adds	r6, r2, #1
 8008786:	9619      	str	r6, [sp, #100]	@ 0x64
 8008788:	7852      	ldrb	r2, [r2, #1]
 800878a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800878e:	f1be 0f09 	cmp.w	lr, #9
 8008792:	d939      	bls.n	8008808 <_strtod_l+0x340>
 8008794:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008796:	1a76      	subs	r6, r6, r1
 8008798:	2e08      	cmp	r6, #8
 800879a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800879e:	dc03      	bgt.n	80087a8 <_strtod_l+0x2e0>
 80087a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80087a2:	4588      	cmp	r8, r1
 80087a4:	bfa8      	it	ge
 80087a6:	4688      	movge	r8, r1
 80087a8:	f1bc 0f00 	cmp.w	ip, #0
 80087ac:	d001      	beq.n	80087b2 <_strtod_l+0x2ea>
 80087ae:	f1c8 0800 	rsb	r8, r8, #0
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	d14e      	bne.n	8008854 <_strtod_l+0x38c>
 80087b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087b8:	4308      	orrs	r0, r1
 80087ba:	f47f aebe 	bne.w	800853a <_strtod_l+0x72>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f47f aed6 	bne.w	8008570 <_strtod_l+0xa8>
 80087c4:	2a69      	cmp	r2, #105	@ 0x69
 80087c6:	d028      	beq.n	800881a <_strtod_l+0x352>
 80087c8:	dc25      	bgt.n	8008816 <_strtod_l+0x34e>
 80087ca:	2a49      	cmp	r2, #73	@ 0x49
 80087cc:	d025      	beq.n	800881a <_strtod_l+0x352>
 80087ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80087d0:	f47f aece 	bne.w	8008570 <_strtod_l+0xa8>
 80087d4:	499b      	ldr	r1, [pc, #620]	@ (8008a44 <_strtod_l+0x57c>)
 80087d6:	a819      	add	r0, sp, #100	@ 0x64
 80087d8:	f001 fb96 	bl	8009f08 <__match>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f aec7 	beq.w	8008570 <_strtod_l+0xa8>
 80087e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b28      	cmp	r3, #40	@ 0x28
 80087e8:	d12e      	bne.n	8008848 <_strtod_l+0x380>
 80087ea:	4997      	ldr	r1, [pc, #604]	@ (8008a48 <_strtod_l+0x580>)
 80087ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80087ee:	a819      	add	r0, sp, #100	@ 0x64
 80087f0:	f001 fb9e 	bl	8009f30 <__hexnan>
 80087f4:	2805      	cmp	r0, #5
 80087f6:	d127      	bne.n	8008848 <_strtod_l+0x380>
 80087f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80087fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008802:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008806:	e698      	b.n	800853a <_strtod_l+0x72>
 8008808:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800880a:	fb08 2101 	mla	r1, r8, r1, r2
 800880e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008812:	920e      	str	r2, [sp, #56]	@ 0x38
 8008814:	e7b5      	b.n	8008782 <_strtod_l+0x2ba>
 8008816:	2a6e      	cmp	r2, #110	@ 0x6e
 8008818:	e7da      	b.n	80087d0 <_strtod_l+0x308>
 800881a:	498c      	ldr	r1, [pc, #560]	@ (8008a4c <_strtod_l+0x584>)
 800881c:	a819      	add	r0, sp, #100	@ 0x64
 800881e:	f001 fb73 	bl	8009f08 <__match>
 8008822:	2800      	cmp	r0, #0
 8008824:	f43f aea4 	beq.w	8008570 <_strtod_l+0xa8>
 8008828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800882a:	4989      	ldr	r1, [pc, #548]	@ (8008a50 <_strtod_l+0x588>)
 800882c:	3b01      	subs	r3, #1
 800882e:	a819      	add	r0, sp, #100	@ 0x64
 8008830:	9319      	str	r3, [sp, #100]	@ 0x64
 8008832:	f001 fb69 	bl	8009f08 <__match>
 8008836:	b910      	cbnz	r0, 800883e <_strtod_l+0x376>
 8008838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800883a:	3301      	adds	r3, #1
 800883c:	9319      	str	r3, [sp, #100]	@ 0x64
 800883e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008a60 <_strtod_l+0x598>
 8008842:	f04f 0a00 	mov.w	sl, #0
 8008846:	e678      	b.n	800853a <_strtod_l+0x72>
 8008848:	4882      	ldr	r0, [pc, #520]	@ (8008a54 <_strtod_l+0x58c>)
 800884a:	f001 f899 	bl	8009980 <nan>
 800884e:	ec5b ab10 	vmov	sl, fp, d0
 8008852:	e672      	b.n	800853a <_strtod_l+0x72>
 8008854:	eba8 0309 	sub.w	r3, r8, r9
 8008858:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800885a:	9309      	str	r3, [sp, #36]	@ 0x24
 800885c:	2f00      	cmp	r7, #0
 800885e:	bf08      	it	eq
 8008860:	462f      	moveq	r7, r5
 8008862:	2d10      	cmp	r5, #16
 8008864:	462c      	mov	r4, r5
 8008866:	bfa8      	it	ge
 8008868:	2410      	movge	r4, #16
 800886a:	f7f7 fe63 	bl	8000534 <__aeabi_ui2d>
 800886e:	2d09      	cmp	r5, #9
 8008870:	4682      	mov	sl, r0
 8008872:	468b      	mov	fp, r1
 8008874:	dc13      	bgt.n	800889e <_strtod_l+0x3d6>
 8008876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	f43f ae5e 	beq.w	800853a <_strtod_l+0x72>
 800887e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008880:	dd78      	ble.n	8008974 <_strtod_l+0x4ac>
 8008882:	2b16      	cmp	r3, #22
 8008884:	dc5f      	bgt.n	8008946 <_strtod_l+0x47e>
 8008886:	4974      	ldr	r1, [pc, #464]	@ (8008a58 <_strtod_l+0x590>)
 8008888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800888c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008890:	4652      	mov	r2, sl
 8008892:	465b      	mov	r3, fp
 8008894:	f7f7 fec8 	bl	8000628 <__aeabi_dmul>
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	e64d      	b.n	800853a <_strtod_l+0x72>
 800889e:	4b6e      	ldr	r3, [pc, #440]	@ (8008a58 <_strtod_l+0x590>)
 80088a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80088a8:	f7f7 febe 	bl	8000628 <__aeabi_dmul>
 80088ac:	4682      	mov	sl, r0
 80088ae:	9808      	ldr	r0, [sp, #32]
 80088b0:	468b      	mov	fp, r1
 80088b2:	f7f7 fe3f 	bl	8000534 <__aeabi_ui2d>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4650      	mov	r0, sl
 80088bc:	4659      	mov	r1, fp
 80088be:	f7f7 fcfd 	bl	80002bc <__adddf3>
 80088c2:	2d0f      	cmp	r5, #15
 80088c4:	4682      	mov	sl, r0
 80088c6:	468b      	mov	fp, r1
 80088c8:	ddd5      	ble.n	8008876 <_strtod_l+0x3ae>
 80088ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088cc:	1b2c      	subs	r4, r5, r4
 80088ce:	441c      	add	r4, r3
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	f340 8096 	ble.w	8008a02 <_strtod_l+0x53a>
 80088d6:	f014 030f 	ands.w	r3, r4, #15
 80088da:	d00a      	beq.n	80088f2 <_strtod_l+0x42a>
 80088dc:	495e      	ldr	r1, [pc, #376]	@ (8008a58 <_strtod_l+0x590>)
 80088de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088e2:	4652      	mov	r2, sl
 80088e4:	465b      	mov	r3, fp
 80088e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ea:	f7f7 fe9d 	bl	8000628 <__aeabi_dmul>
 80088ee:	4682      	mov	sl, r0
 80088f0:	468b      	mov	fp, r1
 80088f2:	f034 040f 	bics.w	r4, r4, #15
 80088f6:	d073      	beq.n	80089e0 <_strtod_l+0x518>
 80088f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80088fc:	dd48      	ble.n	8008990 <_strtod_l+0x4c8>
 80088fe:	2400      	movs	r4, #0
 8008900:	46a0      	mov	r8, r4
 8008902:	940a      	str	r4, [sp, #40]	@ 0x28
 8008904:	46a1      	mov	r9, r4
 8008906:	9a05      	ldr	r2, [sp, #20]
 8008908:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008a60 <_strtod_l+0x598>
 800890c:	2322      	movs	r3, #34	@ 0x22
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	f04f 0a00 	mov.w	sl, #0
 8008914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	f43f ae0f 	beq.w	800853a <_strtod_l+0x72>
 800891c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800891e:	9805      	ldr	r0, [sp, #20]
 8008920:	f7ff f940 	bl	8007ba4 <_Bfree>
 8008924:	9805      	ldr	r0, [sp, #20]
 8008926:	4649      	mov	r1, r9
 8008928:	f7ff f93c 	bl	8007ba4 <_Bfree>
 800892c:	9805      	ldr	r0, [sp, #20]
 800892e:	4641      	mov	r1, r8
 8008930:	f7ff f938 	bl	8007ba4 <_Bfree>
 8008934:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008936:	9805      	ldr	r0, [sp, #20]
 8008938:	f7ff f934 	bl	8007ba4 <_Bfree>
 800893c:	9805      	ldr	r0, [sp, #20]
 800893e:	4621      	mov	r1, r4
 8008940:	f7ff f930 	bl	8007ba4 <_Bfree>
 8008944:	e5f9      	b.n	800853a <_strtod_l+0x72>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800894c:	4293      	cmp	r3, r2
 800894e:	dbbc      	blt.n	80088ca <_strtod_l+0x402>
 8008950:	4c41      	ldr	r4, [pc, #260]	@ (8008a58 <_strtod_l+0x590>)
 8008952:	f1c5 050f 	rsb	r5, r5, #15
 8008956:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008962:	f7f7 fe61 	bl	8000628 <__aeabi_dmul>
 8008966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008968:	1b5d      	subs	r5, r3, r5
 800896a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800896e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008972:	e78f      	b.n	8008894 <_strtod_l+0x3cc>
 8008974:	3316      	adds	r3, #22
 8008976:	dba8      	blt.n	80088ca <_strtod_l+0x402>
 8008978:	4b37      	ldr	r3, [pc, #220]	@ (8008a58 <_strtod_l+0x590>)
 800897a:	eba9 0808 	sub.w	r8, r9, r8
 800897e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008982:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008986:	4650      	mov	r0, sl
 8008988:	4659      	mov	r1, fp
 800898a:	f7f7 ff77 	bl	800087c <__aeabi_ddiv>
 800898e:	e783      	b.n	8008898 <_strtod_l+0x3d0>
 8008990:	4b32      	ldr	r3, [pc, #200]	@ (8008a5c <_strtod_l+0x594>)
 8008992:	9308      	str	r3, [sp, #32]
 8008994:	2300      	movs	r3, #0
 8008996:	1124      	asrs	r4, r4, #4
 8008998:	4650      	mov	r0, sl
 800899a:	4659      	mov	r1, fp
 800899c:	461e      	mov	r6, r3
 800899e:	2c01      	cmp	r4, #1
 80089a0:	dc21      	bgt.n	80089e6 <_strtod_l+0x51e>
 80089a2:	b10b      	cbz	r3, 80089a8 <_strtod_l+0x4e0>
 80089a4:	4682      	mov	sl, r0
 80089a6:	468b      	mov	fp, r1
 80089a8:	492c      	ldr	r1, [pc, #176]	@ (8008a5c <_strtod_l+0x594>)
 80089aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80089ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80089b2:	4652      	mov	r2, sl
 80089b4:	465b      	mov	r3, fp
 80089b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ba:	f7f7 fe35 	bl	8000628 <__aeabi_dmul>
 80089be:	4b28      	ldr	r3, [pc, #160]	@ (8008a60 <_strtod_l+0x598>)
 80089c0:	460a      	mov	r2, r1
 80089c2:	400b      	ands	r3, r1
 80089c4:	4927      	ldr	r1, [pc, #156]	@ (8008a64 <_strtod_l+0x59c>)
 80089c6:	428b      	cmp	r3, r1
 80089c8:	4682      	mov	sl, r0
 80089ca:	d898      	bhi.n	80088fe <_strtod_l+0x436>
 80089cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80089d0:	428b      	cmp	r3, r1
 80089d2:	bf86      	itte	hi
 80089d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008a68 <_strtod_l+0x5a0>
 80089d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80089dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80089e0:	2300      	movs	r3, #0
 80089e2:	9308      	str	r3, [sp, #32]
 80089e4:	e07a      	b.n	8008adc <_strtod_l+0x614>
 80089e6:	07e2      	lsls	r2, r4, #31
 80089e8:	d505      	bpl.n	80089f6 <_strtod_l+0x52e>
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fe1a 	bl	8000628 <__aeabi_dmul>
 80089f4:	2301      	movs	r3, #1
 80089f6:	9a08      	ldr	r2, [sp, #32]
 80089f8:	3208      	adds	r2, #8
 80089fa:	3601      	adds	r6, #1
 80089fc:	1064      	asrs	r4, r4, #1
 80089fe:	9208      	str	r2, [sp, #32]
 8008a00:	e7cd      	b.n	800899e <_strtod_l+0x4d6>
 8008a02:	d0ed      	beq.n	80089e0 <_strtod_l+0x518>
 8008a04:	4264      	negs	r4, r4
 8008a06:	f014 020f 	ands.w	r2, r4, #15
 8008a0a:	d00a      	beq.n	8008a22 <_strtod_l+0x55a>
 8008a0c:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <_strtod_l+0x590>)
 8008a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a12:	4650      	mov	r0, sl
 8008a14:	4659      	mov	r1, fp
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	f7f7 ff2f 	bl	800087c <__aeabi_ddiv>
 8008a1e:	4682      	mov	sl, r0
 8008a20:	468b      	mov	fp, r1
 8008a22:	1124      	asrs	r4, r4, #4
 8008a24:	d0dc      	beq.n	80089e0 <_strtod_l+0x518>
 8008a26:	2c1f      	cmp	r4, #31
 8008a28:	dd20      	ble.n	8008a6c <_strtod_l+0x5a4>
 8008a2a:	2400      	movs	r4, #0
 8008a2c:	46a0      	mov	r8, r4
 8008a2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a30:	46a1      	mov	r9, r4
 8008a32:	9a05      	ldr	r2, [sp, #20]
 8008a34:	2322      	movs	r3, #34	@ 0x22
 8008a36:	f04f 0a00 	mov.w	sl, #0
 8008a3a:	f04f 0b00 	mov.w	fp, #0
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	e768      	b.n	8008914 <_strtod_l+0x44c>
 8008a42:	bf00      	nop
 8008a44:	0800a2c1 	.word	0x0800a2c1
 8008a48:	0800a4d4 	.word	0x0800a4d4
 8008a4c:	0800a2b9 	.word	0x0800a2b9
 8008a50:	0800a2f0 	.word	0x0800a2f0
 8008a54:	0800a67d 	.word	0x0800a67d
 8008a58:	0800a408 	.word	0x0800a408
 8008a5c:	0800a3e0 	.word	0x0800a3e0
 8008a60:	7ff00000 	.word	0x7ff00000
 8008a64:	7ca00000 	.word	0x7ca00000
 8008a68:	7fefffff 	.word	0x7fefffff
 8008a6c:	f014 0310 	ands.w	r3, r4, #16
 8008a70:	bf18      	it	ne
 8008a72:	236a      	movne	r3, #106	@ 0x6a
 8008a74:	4ea9      	ldr	r6, [pc, #676]	@ (8008d1c <_strtod_l+0x854>)
 8008a76:	9308      	str	r3, [sp, #32]
 8008a78:	4650      	mov	r0, sl
 8008a7a:	4659      	mov	r1, fp
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	07e2      	lsls	r2, r4, #31
 8008a80:	d504      	bpl.n	8008a8c <_strtod_l+0x5c4>
 8008a82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a86:	f7f7 fdcf 	bl	8000628 <__aeabi_dmul>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	1064      	asrs	r4, r4, #1
 8008a8e:	f106 0608 	add.w	r6, r6, #8
 8008a92:	d1f4      	bne.n	8008a7e <_strtod_l+0x5b6>
 8008a94:	b10b      	cbz	r3, 8008a9a <_strtod_l+0x5d2>
 8008a96:	4682      	mov	sl, r0
 8008a98:	468b      	mov	fp, r1
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	b1b3      	cbz	r3, 8008acc <_strtod_l+0x604>
 8008a9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008aa2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	dd0f      	ble.n	8008acc <_strtod_l+0x604>
 8008aac:	2b1f      	cmp	r3, #31
 8008aae:	dd55      	ble.n	8008b5c <_strtod_l+0x694>
 8008ab0:	2b34      	cmp	r3, #52	@ 0x34
 8008ab2:	bfde      	ittt	le
 8008ab4:	f04f 33ff 	movle.w	r3, #4294967295
 8008ab8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008abc:	4093      	lslle	r3, r2
 8008abe:	f04f 0a00 	mov.w	sl, #0
 8008ac2:	bfcc      	ite	gt
 8008ac4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ac8:	ea03 0b01 	andle.w	fp, r3, r1
 8008acc:	2200      	movs	r2, #0
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4650      	mov	r0, sl
 8008ad2:	4659      	mov	r1, fp
 8008ad4:	f7f8 f810 	bl	8000af8 <__aeabi_dcmpeq>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d1a6      	bne.n	8008a2a <_strtod_l+0x562>
 8008adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	463a      	mov	r2, r7
 8008ae8:	f7ff f8c4 	bl	8007c74 <__s2b>
 8008aec:	900a      	str	r0, [sp, #40]	@ 0x28
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f43f af05 	beq.w	80088fe <_strtod_l+0x436>
 8008af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	eba9 0308 	sub.w	r3, r9, r8
 8008afc:	bfa8      	it	ge
 8008afe:	2300      	movge	r3, #0
 8008b00:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b02:	2400      	movs	r4, #0
 8008b04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b08:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b0a:	46a0      	mov	r8, r4
 8008b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b0e:	9805      	ldr	r0, [sp, #20]
 8008b10:	6859      	ldr	r1, [r3, #4]
 8008b12:	f7ff f807 	bl	8007b24 <_Balloc>
 8008b16:	4681      	mov	r9, r0
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f43f aef4 	beq.w	8008906 <_strtod_l+0x43e>
 8008b1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b20:	691a      	ldr	r2, [r3, #16]
 8008b22:	3202      	adds	r2, #2
 8008b24:	f103 010c 	add.w	r1, r3, #12
 8008b28:	0092      	lsls	r2, r2, #2
 8008b2a:	300c      	adds	r0, #12
 8008b2c:	f7fe f94d 	bl	8006dca <memcpy>
 8008b30:	ec4b ab10 	vmov	d0, sl, fp
 8008b34:	9805      	ldr	r0, [sp, #20]
 8008b36:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b38:	a91b      	add	r1, sp, #108	@ 0x6c
 8008b3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008b3e:	f7ff fbd5 	bl	80082ec <__d2b>
 8008b42:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f43f aede 	beq.w	8008906 <_strtod_l+0x43e>
 8008b4a:	9805      	ldr	r0, [sp, #20]
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	f7ff f927 	bl	8007da0 <__i2b>
 8008b52:	4680      	mov	r8, r0
 8008b54:	b948      	cbnz	r0, 8008b6a <_strtod_l+0x6a2>
 8008b56:	f04f 0800 	mov.w	r8, #0
 8008b5a:	e6d4      	b.n	8008906 <_strtod_l+0x43e>
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	fa02 f303 	lsl.w	r3, r2, r3
 8008b64:	ea03 0a0a 	and.w	sl, r3, sl
 8008b68:	e7b0      	b.n	8008acc <_strtod_l+0x604>
 8008b6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008b6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	bfab      	itete	ge
 8008b72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008b74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008b76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008b78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008b7a:	bfac      	ite	ge
 8008b7c:	18ef      	addge	r7, r5, r3
 8008b7e:	1b5e      	sublt	r6, r3, r5
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	1aed      	subs	r5, r5, r3
 8008b84:	4415      	add	r5, r2
 8008b86:	4b66      	ldr	r3, [pc, #408]	@ (8008d20 <_strtod_l+0x858>)
 8008b88:	3d01      	subs	r5, #1
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008b90:	da50      	bge.n	8008c34 <_strtod_l+0x76c>
 8008b92:	1b5b      	subs	r3, r3, r5
 8008b94:	2b1f      	cmp	r3, #31
 8008b96:	eba2 0203 	sub.w	r2, r2, r3
 8008b9a:	f04f 0101 	mov.w	r1, #1
 8008b9e:	dc3d      	bgt.n	8008c1c <_strtod_l+0x754>
 8008ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008baa:	18bd      	adds	r5, r7, r2
 8008bac:	9b08      	ldr	r3, [sp, #32]
 8008bae:	42af      	cmp	r7, r5
 8008bb0:	4416      	add	r6, r2
 8008bb2:	441e      	add	r6, r3
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	bfa8      	it	ge
 8008bb8:	462b      	movge	r3, r5
 8008bba:	42b3      	cmp	r3, r6
 8008bbc:	bfa8      	it	ge
 8008bbe:	4633      	movge	r3, r6
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bfc2      	ittt	gt
 8008bc4:	1aed      	subgt	r5, r5, r3
 8008bc6:	1af6      	subgt	r6, r6, r3
 8008bc8:	1aff      	subgt	r7, r7, r3
 8008bca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dd16      	ble.n	8008bfe <_strtod_l+0x736>
 8008bd0:	4641      	mov	r1, r8
 8008bd2:	9805      	ldr	r0, [sp, #20]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f7ff f9a3 	bl	8007f20 <__pow5mult>
 8008bda:	4680      	mov	r8, r0
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d0ba      	beq.n	8008b56 <_strtod_l+0x68e>
 8008be0:	4601      	mov	r1, r0
 8008be2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008be4:	9805      	ldr	r0, [sp, #20]
 8008be6:	f7ff f8f1 	bl	8007dcc <__multiply>
 8008bea:	900e      	str	r0, [sp, #56]	@ 0x38
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f43f ae8a 	beq.w	8008906 <_strtod_l+0x43e>
 8008bf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bf4:	9805      	ldr	r0, [sp, #20]
 8008bf6:	f7fe ffd5 	bl	8007ba4 <_Bfree>
 8008bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	dc1d      	bgt.n	8008c3e <_strtod_l+0x776>
 8008c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd23      	ble.n	8008c50 <_strtod_l+0x788>
 8008c08:	4649      	mov	r1, r9
 8008c0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c0c:	9805      	ldr	r0, [sp, #20]
 8008c0e:	f7ff f987 	bl	8007f20 <__pow5mult>
 8008c12:	4681      	mov	r9, r0
 8008c14:	b9e0      	cbnz	r0, 8008c50 <_strtod_l+0x788>
 8008c16:	f04f 0900 	mov.w	r9, #0
 8008c1a:	e674      	b.n	8008906 <_strtod_l+0x43e>
 8008c1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008c20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008c24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008c28:	35e2      	adds	r5, #226	@ 0xe2
 8008c2a:	fa01 f305 	lsl.w	r3, r1, r5
 8008c2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008c32:	e7ba      	b.n	8008baa <_strtod_l+0x6e2>
 8008c34:	2300      	movs	r3, #0
 8008c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c38:	2301      	movs	r3, #1
 8008c3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c3c:	e7b5      	b.n	8008baa <_strtod_l+0x6e2>
 8008c3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c40:	9805      	ldr	r0, [sp, #20]
 8008c42:	462a      	mov	r2, r5
 8008c44:	f7ff f9c6 	bl	8007fd4 <__lshift>
 8008c48:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d1d9      	bne.n	8008c02 <_strtod_l+0x73a>
 8008c4e:	e65a      	b.n	8008906 <_strtod_l+0x43e>
 8008c50:	2e00      	cmp	r6, #0
 8008c52:	dd07      	ble.n	8008c64 <_strtod_l+0x79c>
 8008c54:	4649      	mov	r1, r9
 8008c56:	9805      	ldr	r0, [sp, #20]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	f7ff f9bb 	bl	8007fd4 <__lshift>
 8008c5e:	4681      	mov	r9, r0
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0d8      	beq.n	8008c16 <_strtod_l+0x74e>
 8008c64:	2f00      	cmp	r7, #0
 8008c66:	dd08      	ble.n	8008c7a <_strtod_l+0x7b2>
 8008c68:	4641      	mov	r1, r8
 8008c6a:	9805      	ldr	r0, [sp, #20]
 8008c6c:	463a      	mov	r2, r7
 8008c6e:	f7ff f9b1 	bl	8007fd4 <__lshift>
 8008c72:	4680      	mov	r8, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f43f ae46 	beq.w	8008906 <_strtod_l+0x43e>
 8008c7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c7c:	9805      	ldr	r0, [sp, #20]
 8008c7e:	464a      	mov	r2, r9
 8008c80:	f7ff fa30 	bl	80080e4 <__mdiff>
 8008c84:	4604      	mov	r4, r0
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f ae3d 	beq.w	8008906 <_strtod_l+0x43e>
 8008c8c:	68c3      	ldr	r3, [r0, #12]
 8008c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c90:	2300      	movs	r3, #0
 8008c92:	60c3      	str	r3, [r0, #12]
 8008c94:	4641      	mov	r1, r8
 8008c96:	f7ff fa09 	bl	80080ac <__mcmp>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	da46      	bge.n	8008d2c <_strtod_l+0x864>
 8008c9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ca4:	d16c      	bne.n	8008d80 <_strtod_l+0x8b8>
 8008ca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d168      	bne.n	8008d80 <_strtod_l+0x8b8>
 8008cae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cb2:	0d1b      	lsrs	r3, r3, #20
 8008cb4:	051b      	lsls	r3, r3, #20
 8008cb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008cba:	d961      	bls.n	8008d80 <_strtod_l+0x8b8>
 8008cbc:	6963      	ldr	r3, [r4, #20]
 8008cbe:	b913      	cbnz	r3, 8008cc6 <_strtod_l+0x7fe>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	dd5c      	ble.n	8008d80 <_strtod_l+0x8b8>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	2201      	movs	r2, #1
 8008cca:	9805      	ldr	r0, [sp, #20]
 8008ccc:	f7ff f982 	bl	8007fd4 <__lshift>
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	f7ff f9ea 	bl	80080ac <__mcmp>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	dd51      	ble.n	8008d80 <_strtod_l+0x8b8>
 8008cdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ce0:	9a08      	ldr	r2, [sp, #32]
 8008ce2:	0d1b      	lsrs	r3, r3, #20
 8008ce4:	051b      	lsls	r3, r3, #20
 8008ce6:	2a00      	cmp	r2, #0
 8008ce8:	d06b      	beq.n	8008dc2 <_strtod_l+0x8fa>
 8008cea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008cee:	d868      	bhi.n	8008dc2 <_strtod_l+0x8fa>
 8008cf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008cf4:	f67f ae9d 	bls.w	8008a32 <_strtod_l+0x56a>
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d24 <_strtod_l+0x85c>)
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	4659      	mov	r1, fp
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f7f7 fc92 	bl	8000628 <__aeabi_dmul>
 8008d04:	4b08      	ldr	r3, [pc, #32]	@ (8008d28 <_strtod_l+0x860>)
 8008d06:	400b      	ands	r3, r1
 8008d08:	4682      	mov	sl, r0
 8008d0a:	468b      	mov	fp, r1
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f47f ae05 	bne.w	800891c <_strtod_l+0x454>
 8008d12:	9a05      	ldr	r2, [sp, #20]
 8008d14:	2322      	movs	r3, #34	@ 0x22
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	e600      	b.n	800891c <_strtod_l+0x454>
 8008d1a:	bf00      	nop
 8008d1c:	0800a500 	.word	0x0800a500
 8008d20:	fffffc02 	.word	0xfffffc02
 8008d24:	39500000 	.word	0x39500000
 8008d28:	7ff00000 	.word	0x7ff00000
 8008d2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d30:	d165      	bne.n	8008dfe <_strtod_l+0x936>
 8008d32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d38:	b35a      	cbz	r2, 8008d92 <_strtod_l+0x8ca>
 8008d3a:	4a9f      	ldr	r2, [pc, #636]	@ (8008fb8 <_strtod_l+0xaf0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d12b      	bne.n	8008d98 <_strtod_l+0x8d0>
 8008d40:	9b08      	ldr	r3, [sp, #32]
 8008d42:	4651      	mov	r1, sl
 8008d44:	b303      	cbz	r3, 8008d88 <_strtod_l+0x8c0>
 8008d46:	4b9d      	ldr	r3, [pc, #628]	@ (8008fbc <_strtod_l+0xaf4>)
 8008d48:	465a      	mov	r2, fp
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008d50:	f04f 32ff 	mov.w	r2, #4294967295
 8008d54:	d81b      	bhi.n	8008d8e <_strtod_l+0x8c6>
 8008d56:	0d1b      	lsrs	r3, r3, #20
 8008d58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	4299      	cmp	r1, r3
 8008d62:	d119      	bne.n	8008d98 <_strtod_l+0x8d0>
 8008d64:	4b96      	ldr	r3, [pc, #600]	@ (8008fc0 <_strtod_l+0xaf8>)
 8008d66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d102      	bne.n	8008d72 <_strtod_l+0x8aa>
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	f43f adca 	beq.w	8008906 <_strtod_l+0x43e>
 8008d72:	4b92      	ldr	r3, [pc, #584]	@ (8008fbc <_strtod_l+0xaf4>)
 8008d74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d76:	401a      	ands	r2, r3
 8008d78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008d7c:	f04f 0a00 	mov.w	sl, #0
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1b8      	bne.n	8008cf8 <_strtod_l+0x830>
 8008d86:	e5c9      	b.n	800891c <_strtod_l+0x454>
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	e7e8      	b.n	8008d60 <_strtod_l+0x898>
 8008d8e:	4613      	mov	r3, r2
 8008d90:	e7e6      	b.n	8008d60 <_strtod_l+0x898>
 8008d92:	ea53 030a 	orrs.w	r3, r3, sl
 8008d96:	d0a1      	beq.n	8008cdc <_strtod_l+0x814>
 8008d98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d9a:	b1db      	cbz	r3, 8008dd4 <_strtod_l+0x90c>
 8008d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d9e:	4213      	tst	r3, r2
 8008da0:	d0ee      	beq.n	8008d80 <_strtod_l+0x8b8>
 8008da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008da4:	9a08      	ldr	r2, [sp, #32]
 8008da6:	4650      	mov	r0, sl
 8008da8:	4659      	mov	r1, fp
 8008daa:	b1bb      	cbz	r3, 8008ddc <_strtod_l+0x914>
 8008dac:	f7ff fb6c 	bl	8008488 <sulp>
 8008db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008db4:	ec53 2b10 	vmov	r2, r3, d0
 8008db8:	f7f7 fa80 	bl	80002bc <__adddf3>
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	468b      	mov	fp, r1
 8008dc0:	e7de      	b.n	8008d80 <_strtod_l+0x8b8>
 8008dc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008dc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008dca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008dce:	f04f 3aff 	mov.w	sl, #4294967295
 8008dd2:	e7d5      	b.n	8008d80 <_strtod_l+0x8b8>
 8008dd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dd6:	ea13 0f0a 	tst.w	r3, sl
 8008dda:	e7e1      	b.n	8008da0 <_strtod_l+0x8d8>
 8008ddc:	f7ff fb54 	bl	8008488 <sulp>
 8008de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008de4:	ec53 2b10 	vmov	r2, r3, d0
 8008de8:	f7f7 fa66 	bl	80002b8 <__aeabi_dsub>
 8008dec:	2200      	movs	r2, #0
 8008dee:	2300      	movs	r3, #0
 8008df0:	4682      	mov	sl, r0
 8008df2:	468b      	mov	fp, r1
 8008df4:	f7f7 fe80 	bl	8000af8 <__aeabi_dcmpeq>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d0c1      	beq.n	8008d80 <_strtod_l+0x8b8>
 8008dfc:	e619      	b.n	8008a32 <_strtod_l+0x56a>
 8008dfe:	4641      	mov	r1, r8
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff facb 	bl	800839c <__ratio>
 8008e06:	ec57 6b10 	vmov	r6, r7, d0
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fe84 	bl	8000b20 <__aeabi_dcmple>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d06f      	beq.n	8008efc <_strtod_l+0xa34>
 8008e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d17a      	bne.n	8008f18 <_strtod_l+0xa50>
 8008e22:	f1ba 0f00 	cmp.w	sl, #0
 8008e26:	d158      	bne.n	8008eda <_strtod_l+0xa12>
 8008e28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d15a      	bne.n	8008ee8 <_strtod_l+0xa20>
 8008e32:	4b64      	ldr	r3, [pc, #400]	@ (8008fc4 <_strtod_l+0xafc>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	4630      	mov	r0, r6
 8008e38:	4639      	mov	r1, r7
 8008e3a:	f7f7 fe67 	bl	8000b0c <__aeabi_dcmplt>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d159      	bne.n	8008ef6 <_strtod_l+0xa2e>
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	4b60      	ldr	r3, [pc, #384]	@ (8008fc8 <_strtod_l+0xb00>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f7f7 fbed 	bl	8000628 <__aeabi_dmul>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008e56:	9606      	str	r6, [sp, #24]
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e5e:	4d57      	ldr	r5, [pc, #348]	@ (8008fbc <_strtod_l+0xaf4>)
 8008e60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e66:	401d      	ands	r5, r3
 8008e68:	4b58      	ldr	r3, [pc, #352]	@ (8008fcc <_strtod_l+0xb04>)
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	f040 80b2 	bne.w	8008fd4 <_strtod_l+0xb0c>
 8008e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008e76:	ec4b ab10 	vmov	d0, sl, fp
 8008e7a:	f7ff f9c7 	bl	800820c <__ulp>
 8008e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e82:	ec51 0b10 	vmov	r0, r1, d0
 8008e86:	f7f7 fbcf 	bl	8000628 <__aeabi_dmul>
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	465b      	mov	r3, fp
 8008e8e:	f7f7 fa15 	bl	80002bc <__adddf3>
 8008e92:	460b      	mov	r3, r1
 8008e94:	4949      	ldr	r1, [pc, #292]	@ (8008fbc <_strtod_l+0xaf4>)
 8008e96:	4a4e      	ldr	r2, [pc, #312]	@ (8008fd0 <_strtod_l+0xb08>)
 8008e98:	4019      	ands	r1, r3
 8008e9a:	4291      	cmp	r1, r2
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	d942      	bls.n	8008f26 <_strtod_l+0xa5e>
 8008ea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ea2:	4b47      	ldr	r3, [pc, #284]	@ (8008fc0 <_strtod_l+0xaf8>)
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d103      	bne.n	8008eb0 <_strtod_l+0x9e8>
 8008ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f43f ad2b 	beq.w	8008906 <_strtod_l+0x43e>
 8008eb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008fc0 <_strtod_l+0xaf8>
 8008eb4:	f04f 3aff 	mov.w	sl, #4294967295
 8008eb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008eba:	9805      	ldr	r0, [sp, #20]
 8008ebc:	f7fe fe72 	bl	8007ba4 <_Bfree>
 8008ec0:	9805      	ldr	r0, [sp, #20]
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7fe fe6e 	bl	8007ba4 <_Bfree>
 8008ec8:	9805      	ldr	r0, [sp, #20]
 8008eca:	4641      	mov	r1, r8
 8008ecc:	f7fe fe6a 	bl	8007ba4 <_Bfree>
 8008ed0:	9805      	ldr	r0, [sp, #20]
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f7fe fe66 	bl	8007ba4 <_Bfree>
 8008ed8:	e618      	b.n	8008b0c <_strtod_l+0x644>
 8008eda:	f1ba 0f01 	cmp.w	sl, #1
 8008ede:	d103      	bne.n	8008ee8 <_strtod_l+0xa20>
 8008ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f43f ada5 	beq.w	8008a32 <_strtod_l+0x56a>
 8008ee8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008f98 <_strtod_l+0xad0>
 8008eec:	4f35      	ldr	r7, [pc, #212]	@ (8008fc4 <_strtod_l+0xafc>)
 8008eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	e7b1      	b.n	8008e5a <_strtod_l+0x992>
 8008ef6:	4f34      	ldr	r7, [pc, #208]	@ (8008fc8 <_strtod_l+0xb00>)
 8008ef8:	2600      	movs	r6, #0
 8008efa:	e7aa      	b.n	8008e52 <_strtod_l+0x98a>
 8008efc:	4b32      	ldr	r3, [pc, #200]	@ (8008fc8 <_strtod_l+0xb00>)
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	2200      	movs	r2, #0
 8008f04:	f7f7 fb90 	bl	8000628 <__aeabi_dmul>
 8008f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d09f      	beq.n	8008e52 <_strtod_l+0x98a>
 8008f12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f16:	e7a0      	b.n	8008e5a <_strtod_l+0x992>
 8008f18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008fa0 <_strtod_l+0xad8>
 8008f1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f20:	ec57 6b17 	vmov	r6, r7, d7
 8008f24:	e799      	b.n	8008e5a <_strtod_l+0x992>
 8008f26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008f2a:	9b08      	ldr	r3, [sp, #32]
 8008f2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1c1      	bne.n	8008eb8 <_strtod_l+0x9f0>
 8008f34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f38:	0d1b      	lsrs	r3, r3, #20
 8008f3a:	051b      	lsls	r3, r3, #20
 8008f3c:	429d      	cmp	r5, r3
 8008f3e:	d1bb      	bne.n	8008eb8 <_strtod_l+0x9f0>
 8008f40:	4630      	mov	r0, r6
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 fed0 	bl	8000ce8 <__aeabi_d2lz>
 8008f48:	f7f7 fb40 	bl	80005cc <__aeabi_l2d>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4630      	mov	r0, r6
 8008f52:	4639      	mov	r1, r7
 8008f54:	f7f7 f9b0 	bl	80002b8 <__aeabi_dsub>
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008f60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f66:	ea46 060a 	orr.w	r6, r6, sl
 8008f6a:	431e      	orrs	r6, r3
 8008f6c:	d06f      	beq.n	800904e <_strtod_l+0xb86>
 8008f6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fa8 <_strtod_l+0xae0>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 fdca 	bl	8000b0c <__aeabi_dcmplt>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	f47f accf 	bne.w	800891c <_strtod_l+0x454>
 8008f7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008fb0 <_strtod_l+0xae8>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f88:	f7f7 fdde 	bl	8000b48 <__aeabi_dcmpgt>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d093      	beq.n	8008eb8 <_strtod_l+0x9f0>
 8008f90:	e4c4      	b.n	800891c <_strtod_l+0x454>
 8008f92:	bf00      	nop
 8008f94:	f3af 8000 	nop.w
 8008f98:	00000000 	.word	0x00000000
 8008f9c:	bff00000 	.word	0xbff00000
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	3ff00000 	.word	0x3ff00000
 8008fa8:	94a03595 	.word	0x94a03595
 8008fac:	3fdfffff 	.word	0x3fdfffff
 8008fb0:	35afe535 	.word	0x35afe535
 8008fb4:	3fe00000 	.word	0x3fe00000
 8008fb8:	000fffff 	.word	0x000fffff
 8008fbc:	7ff00000 	.word	0x7ff00000
 8008fc0:	7fefffff 	.word	0x7fefffff
 8008fc4:	3ff00000 	.word	0x3ff00000
 8008fc8:	3fe00000 	.word	0x3fe00000
 8008fcc:	7fe00000 	.word	0x7fe00000
 8008fd0:	7c9fffff 	.word	0x7c9fffff
 8008fd4:	9b08      	ldr	r3, [sp, #32]
 8008fd6:	b323      	cbz	r3, 8009022 <_strtod_l+0xb5a>
 8008fd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008fdc:	d821      	bhi.n	8009022 <_strtod_l+0xb5a>
 8008fde:	a328      	add	r3, pc, #160	@ (adr r3, 8009080 <_strtod_l+0xbb8>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	f7f7 fd9a 	bl	8000b20 <__aeabi_dcmple>
 8008fec:	b1a0      	cbz	r0, 8009018 <_strtod_l+0xb50>
 8008fee:	4639      	mov	r1, r7
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7f7 fdf1 	bl	8000bd8 <__aeabi_d2uiz>
 8008ff6:	2801      	cmp	r0, #1
 8008ff8:	bf38      	it	cc
 8008ffa:	2001      	movcc	r0, #1
 8008ffc:	f7f7 fa9a 	bl	8000534 <__aeabi_ui2d>
 8009000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	b9fb      	cbnz	r3, 8009048 <_strtod_l+0xb80>
 8009008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800900c:	9014      	str	r0, [sp, #80]	@ 0x50
 800900e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009010:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009014:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009018:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800901a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800901e:	1b5b      	subs	r3, r3, r5
 8009020:	9311      	str	r3, [sp, #68]	@ 0x44
 8009022:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009026:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800902a:	f7ff f8ef 	bl	800820c <__ulp>
 800902e:	4650      	mov	r0, sl
 8009030:	ec53 2b10 	vmov	r2, r3, d0
 8009034:	4659      	mov	r1, fp
 8009036:	f7f7 faf7 	bl	8000628 <__aeabi_dmul>
 800903a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800903e:	f7f7 f93d 	bl	80002bc <__adddf3>
 8009042:	4682      	mov	sl, r0
 8009044:	468b      	mov	fp, r1
 8009046:	e770      	b.n	8008f2a <_strtod_l+0xa62>
 8009048:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800904c:	e7e0      	b.n	8009010 <_strtod_l+0xb48>
 800904e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009088 <_strtod_l+0xbc0>)
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f7f7 fd5a 	bl	8000b0c <__aeabi_dcmplt>
 8009058:	e798      	b.n	8008f8c <_strtod_l+0xac4>
 800905a:	2300      	movs	r3, #0
 800905c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800905e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	f7ff ba6d 	b.w	8008542 <_strtod_l+0x7a>
 8009068:	2a65      	cmp	r2, #101	@ 0x65
 800906a:	f43f ab66 	beq.w	800873a <_strtod_l+0x272>
 800906e:	2a45      	cmp	r2, #69	@ 0x45
 8009070:	f43f ab63 	beq.w	800873a <_strtod_l+0x272>
 8009074:	2301      	movs	r3, #1
 8009076:	f7ff bb9e 	b.w	80087b6 <_strtod_l+0x2ee>
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w
 8009080:	ffc00000 	.word	0xffc00000
 8009084:	41dfffff 	.word	0x41dfffff
 8009088:	94a03595 	.word	0x94a03595
 800908c:	3fcfffff 	.word	0x3fcfffff

08009090 <_strtod_r>:
 8009090:	4b01      	ldr	r3, [pc, #4]	@ (8009098 <_strtod_r+0x8>)
 8009092:	f7ff ba19 	b.w	80084c8 <_strtod_l>
 8009096:	bf00      	nop
 8009098:	2000006c 	.word	0x2000006c

0800909c <_strtol_l.constprop.0>:
 800909c:	2b24      	cmp	r3, #36	@ 0x24
 800909e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a2:	4686      	mov	lr, r0
 80090a4:	4690      	mov	r8, r2
 80090a6:	d801      	bhi.n	80090ac <_strtol_l.constprop.0+0x10>
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d106      	bne.n	80090ba <_strtol_l.constprop.0+0x1e>
 80090ac:	f7fd fe60 	bl	8006d70 <__errno>
 80090b0:	2316      	movs	r3, #22
 80090b2:	6003      	str	r3, [r0, #0]
 80090b4:	2000      	movs	r0, #0
 80090b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ba:	4834      	ldr	r0, [pc, #208]	@ (800918c <_strtol_l.constprop.0+0xf0>)
 80090bc:	460d      	mov	r5, r1
 80090be:	462a      	mov	r2, r5
 80090c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090c4:	5d06      	ldrb	r6, [r0, r4]
 80090c6:	f016 0608 	ands.w	r6, r6, #8
 80090ca:	d1f8      	bne.n	80090be <_strtol_l.constprop.0+0x22>
 80090cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80090ce:	d12d      	bne.n	800912c <_strtol_l.constprop.0+0x90>
 80090d0:	782c      	ldrb	r4, [r5, #0]
 80090d2:	2601      	movs	r6, #1
 80090d4:	1c95      	adds	r5, r2, #2
 80090d6:	f033 0210 	bics.w	r2, r3, #16
 80090da:	d109      	bne.n	80090f0 <_strtol_l.constprop.0+0x54>
 80090dc:	2c30      	cmp	r4, #48	@ 0x30
 80090de:	d12a      	bne.n	8009136 <_strtol_l.constprop.0+0x9a>
 80090e0:	782a      	ldrb	r2, [r5, #0]
 80090e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80090e6:	2a58      	cmp	r2, #88	@ 0x58
 80090e8:	d125      	bne.n	8009136 <_strtol_l.constprop.0+0x9a>
 80090ea:	786c      	ldrb	r4, [r5, #1]
 80090ec:	2310      	movs	r3, #16
 80090ee:	3502      	adds	r5, #2
 80090f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80090f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80090f8:	2200      	movs	r2, #0
 80090fa:	fbbc f9f3 	udiv	r9, ip, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	fb03 ca19 	mls	sl, r3, r9, ip
 8009104:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009108:	2f09      	cmp	r7, #9
 800910a:	d81b      	bhi.n	8009144 <_strtol_l.constprop.0+0xa8>
 800910c:	463c      	mov	r4, r7
 800910e:	42a3      	cmp	r3, r4
 8009110:	dd27      	ble.n	8009162 <_strtol_l.constprop.0+0xc6>
 8009112:	1c57      	adds	r7, r2, #1
 8009114:	d007      	beq.n	8009126 <_strtol_l.constprop.0+0x8a>
 8009116:	4581      	cmp	r9, r0
 8009118:	d320      	bcc.n	800915c <_strtol_l.constprop.0+0xc0>
 800911a:	d101      	bne.n	8009120 <_strtol_l.constprop.0+0x84>
 800911c:	45a2      	cmp	sl, r4
 800911e:	db1d      	blt.n	800915c <_strtol_l.constprop.0+0xc0>
 8009120:	fb00 4003 	mla	r0, r0, r3, r4
 8009124:	2201      	movs	r2, #1
 8009126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800912a:	e7eb      	b.n	8009104 <_strtol_l.constprop.0+0x68>
 800912c:	2c2b      	cmp	r4, #43	@ 0x2b
 800912e:	bf04      	itt	eq
 8009130:	782c      	ldrbeq	r4, [r5, #0]
 8009132:	1c95      	addeq	r5, r2, #2
 8009134:	e7cf      	b.n	80090d6 <_strtol_l.constprop.0+0x3a>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1da      	bne.n	80090f0 <_strtol_l.constprop.0+0x54>
 800913a:	2c30      	cmp	r4, #48	@ 0x30
 800913c:	bf0c      	ite	eq
 800913e:	2308      	moveq	r3, #8
 8009140:	230a      	movne	r3, #10
 8009142:	e7d5      	b.n	80090f0 <_strtol_l.constprop.0+0x54>
 8009144:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009148:	2f19      	cmp	r7, #25
 800914a:	d801      	bhi.n	8009150 <_strtol_l.constprop.0+0xb4>
 800914c:	3c37      	subs	r4, #55	@ 0x37
 800914e:	e7de      	b.n	800910e <_strtol_l.constprop.0+0x72>
 8009150:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009154:	2f19      	cmp	r7, #25
 8009156:	d804      	bhi.n	8009162 <_strtol_l.constprop.0+0xc6>
 8009158:	3c57      	subs	r4, #87	@ 0x57
 800915a:	e7d8      	b.n	800910e <_strtol_l.constprop.0+0x72>
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	e7e1      	b.n	8009126 <_strtol_l.constprop.0+0x8a>
 8009162:	1c53      	adds	r3, r2, #1
 8009164:	d108      	bne.n	8009178 <_strtol_l.constprop.0+0xdc>
 8009166:	2322      	movs	r3, #34	@ 0x22
 8009168:	f8ce 3000 	str.w	r3, [lr]
 800916c:	4660      	mov	r0, ip
 800916e:	f1b8 0f00 	cmp.w	r8, #0
 8009172:	d0a0      	beq.n	80090b6 <_strtol_l.constprop.0+0x1a>
 8009174:	1e69      	subs	r1, r5, #1
 8009176:	e006      	b.n	8009186 <_strtol_l.constprop.0+0xea>
 8009178:	b106      	cbz	r6, 800917c <_strtol_l.constprop.0+0xe0>
 800917a:	4240      	negs	r0, r0
 800917c:	f1b8 0f00 	cmp.w	r8, #0
 8009180:	d099      	beq.n	80090b6 <_strtol_l.constprop.0+0x1a>
 8009182:	2a00      	cmp	r2, #0
 8009184:	d1f6      	bne.n	8009174 <_strtol_l.constprop.0+0xd8>
 8009186:	f8c8 1000 	str.w	r1, [r8]
 800918a:	e794      	b.n	80090b6 <_strtol_l.constprop.0+0x1a>
 800918c:	0800a529 	.word	0x0800a529

08009190 <_strtol_r>:
 8009190:	f7ff bf84 	b.w	800909c <_strtol_l.constprop.0>

08009194 <__ssputs_r>:
 8009194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	688e      	ldr	r6, [r1, #8]
 800919a:	461f      	mov	r7, r3
 800919c:	42be      	cmp	r6, r7
 800919e:	680b      	ldr	r3, [r1, #0]
 80091a0:	4682      	mov	sl, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4690      	mov	r8, r2
 80091a6:	d82d      	bhi.n	8009204 <__ssputs_r+0x70>
 80091a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091b0:	d026      	beq.n	8009200 <__ssputs_r+0x6c>
 80091b2:	6965      	ldr	r5, [r4, #20]
 80091b4:	6909      	ldr	r1, [r1, #16]
 80091b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ba:	eba3 0901 	sub.w	r9, r3, r1
 80091be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091c2:	1c7b      	adds	r3, r7, #1
 80091c4:	444b      	add	r3, r9
 80091c6:	106d      	asrs	r5, r5, #1
 80091c8:	429d      	cmp	r5, r3
 80091ca:	bf38      	it	cc
 80091cc:	461d      	movcc	r5, r3
 80091ce:	0553      	lsls	r3, r2, #21
 80091d0:	d527      	bpl.n	8009222 <__ssputs_r+0x8e>
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7fc fc48 	bl	8005a68 <_malloc_r>
 80091d8:	4606      	mov	r6, r0
 80091da:	b360      	cbz	r0, 8009236 <__ssputs_r+0xa2>
 80091dc:	6921      	ldr	r1, [r4, #16]
 80091de:	464a      	mov	r2, r9
 80091e0:	f7fd fdf3 	bl	8006dca <memcpy>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	6126      	str	r6, [r4, #16]
 80091f2:	6165      	str	r5, [r4, #20]
 80091f4:	444e      	add	r6, r9
 80091f6:	eba5 0509 	sub.w	r5, r5, r9
 80091fa:	6026      	str	r6, [r4, #0]
 80091fc:	60a5      	str	r5, [r4, #8]
 80091fe:	463e      	mov	r6, r7
 8009200:	42be      	cmp	r6, r7
 8009202:	d900      	bls.n	8009206 <__ssputs_r+0x72>
 8009204:	463e      	mov	r6, r7
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	4632      	mov	r2, r6
 800920a:	4641      	mov	r1, r8
 800920c:	f000 fb6a 	bl	80098e4 <memmove>
 8009210:	68a3      	ldr	r3, [r4, #8]
 8009212:	1b9b      	subs	r3, r3, r6
 8009214:	60a3      	str	r3, [r4, #8]
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	4433      	add	r3, r6
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	2000      	movs	r0, #0
 800921e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009222:	462a      	mov	r2, r5
 8009224:	f000 ff31 	bl	800a08a <_realloc_r>
 8009228:	4606      	mov	r6, r0
 800922a:	2800      	cmp	r0, #0
 800922c:	d1e0      	bne.n	80091f0 <__ssputs_r+0x5c>
 800922e:	6921      	ldr	r1, [r4, #16]
 8009230:	4650      	mov	r0, sl
 8009232:	f7fe fc2d 	bl	8007a90 <_free_r>
 8009236:	230c      	movs	r3, #12
 8009238:	f8ca 3000 	str.w	r3, [sl]
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	e7e9      	b.n	800921e <__ssputs_r+0x8a>
	...

0800924c <_svfiprintf_r>:
 800924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	4698      	mov	r8, r3
 8009252:	898b      	ldrh	r3, [r1, #12]
 8009254:	061b      	lsls	r3, r3, #24
 8009256:	b09d      	sub	sp, #116	@ 0x74
 8009258:	4607      	mov	r7, r0
 800925a:	460d      	mov	r5, r1
 800925c:	4614      	mov	r4, r2
 800925e:	d510      	bpl.n	8009282 <_svfiprintf_r+0x36>
 8009260:	690b      	ldr	r3, [r1, #16]
 8009262:	b973      	cbnz	r3, 8009282 <_svfiprintf_r+0x36>
 8009264:	2140      	movs	r1, #64	@ 0x40
 8009266:	f7fc fbff 	bl	8005a68 <_malloc_r>
 800926a:	6028      	str	r0, [r5, #0]
 800926c:	6128      	str	r0, [r5, #16]
 800926e:	b930      	cbnz	r0, 800927e <_svfiprintf_r+0x32>
 8009270:	230c      	movs	r3, #12
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	b01d      	add	sp, #116	@ 0x74
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	2340      	movs	r3, #64	@ 0x40
 8009280:	616b      	str	r3, [r5, #20]
 8009282:	2300      	movs	r3, #0
 8009284:	9309      	str	r3, [sp, #36]	@ 0x24
 8009286:	2320      	movs	r3, #32
 8009288:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800928c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009290:	2330      	movs	r3, #48	@ 0x30
 8009292:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009430 <_svfiprintf_r+0x1e4>
 8009296:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800929a:	f04f 0901 	mov.w	r9, #1
 800929e:	4623      	mov	r3, r4
 80092a0:	469a      	mov	sl, r3
 80092a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a6:	b10a      	cbz	r2, 80092ac <_svfiprintf_r+0x60>
 80092a8:	2a25      	cmp	r2, #37	@ 0x25
 80092aa:	d1f9      	bne.n	80092a0 <_svfiprintf_r+0x54>
 80092ac:	ebba 0b04 	subs.w	fp, sl, r4
 80092b0:	d00b      	beq.n	80092ca <_svfiprintf_r+0x7e>
 80092b2:	465b      	mov	r3, fp
 80092b4:	4622      	mov	r2, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff ff6b 	bl	8009194 <__ssputs_r>
 80092be:	3001      	adds	r0, #1
 80092c0:	f000 80a7 	beq.w	8009412 <_svfiprintf_r+0x1c6>
 80092c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c6:	445a      	add	r2, fp
 80092c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80092ca:	f89a 3000 	ldrb.w	r3, [sl]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 809f 	beq.w	8009412 <_svfiprintf_r+0x1c6>
 80092d4:	2300      	movs	r3, #0
 80092d6:	f04f 32ff 	mov.w	r2, #4294967295
 80092da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092de:	f10a 0a01 	add.w	sl, sl, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	9307      	str	r3, [sp, #28]
 80092e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80092ec:	4654      	mov	r4, sl
 80092ee:	2205      	movs	r2, #5
 80092f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f4:	484e      	ldr	r0, [pc, #312]	@ (8009430 <_svfiprintf_r+0x1e4>)
 80092f6:	f7f6 ff83 	bl	8000200 <memchr>
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	b9d8      	cbnz	r0, 8009336 <_svfiprintf_r+0xea>
 80092fe:	06d0      	lsls	r0, r2, #27
 8009300:	bf44      	itt	mi
 8009302:	2320      	movmi	r3, #32
 8009304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009308:	0711      	lsls	r1, r2, #28
 800930a:	bf44      	itt	mi
 800930c:	232b      	movmi	r3, #43	@ 0x2b
 800930e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009312:	f89a 3000 	ldrb.w	r3, [sl]
 8009316:	2b2a      	cmp	r3, #42	@ 0x2a
 8009318:	d015      	beq.n	8009346 <_svfiprintf_r+0xfa>
 800931a:	9a07      	ldr	r2, [sp, #28]
 800931c:	4654      	mov	r4, sl
 800931e:	2000      	movs	r0, #0
 8009320:	f04f 0c0a 	mov.w	ip, #10
 8009324:	4621      	mov	r1, r4
 8009326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932a:	3b30      	subs	r3, #48	@ 0x30
 800932c:	2b09      	cmp	r3, #9
 800932e:	d94b      	bls.n	80093c8 <_svfiprintf_r+0x17c>
 8009330:	b1b0      	cbz	r0, 8009360 <_svfiprintf_r+0x114>
 8009332:	9207      	str	r2, [sp, #28]
 8009334:	e014      	b.n	8009360 <_svfiprintf_r+0x114>
 8009336:	eba0 0308 	sub.w	r3, r0, r8
 800933a:	fa09 f303 	lsl.w	r3, r9, r3
 800933e:	4313      	orrs	r3, r2
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	46a2      	mov	sl, r4
 8009344:	e7d2      	b.n	80092ec <_svfiprintf_r+0xa0>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	1d19      	adds	r1, r3, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	9103      	str	r1, [sp, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfbb      	ittet	lt
 8009352:	425b      	neglt	r3, r3
 8009354:	f042 0202 	orrlt.w	r2, r2, #2
 8009358:	9307      	strge	r3, [sp, #28]
 800935a:	9307      	strlt	r3, [sp, #28]
 800935c:	bfb8      	it	lt
 800935e:	9204      	strlt	r2, [sp, #16]
 8009360:	7823      	ldrb	r3, [r4, #0]
 8009362:	2b2e      	cmp	r3, #46	@ 0x2e
 8009364:	d10a      	bne.n	800937c <_svfiprintf_r+0x130>
 8009366:	7863      	ldrb	r3, [r4, #1]
 8009368:	2b2a      	cmp	r3, #42	@ 0x2a
 800936a:	d132      	bne.n	80093d2 <_svfiprintf_r+0x186>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	1d1a      	adds	r2, r3, #4
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	9203      	str	r2, [sp, #12]
 8009374:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009378:	3402      	adds	r4, #2
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009440 <_svfiprintf_r+0x1f4>
 8009380:	7821      	ldrb	r1, [r4, #0]
 8009382:	2203      	movs	r2, #3
 8009384:	4650      	mov	r0, sl
 8009386:	f7f6 ff3b 	bl	8000200 <memchr>
 800938a:	b138      	cbz	r0, 800939c <_svfiprintf_r+0x150>
 800938c:	9b04      	ldr	r3, [sp, #16]
 800938e:	eba0 000a 	sub.w	r0, r0, sl
 8009392:	2240      	movs	r2, #64	@ 0x40
 8009394:	4082      	lsls	r2, r0
 8009396:	4313      	orrs	r3, r2
 8009398:	3401      	adds	r4, #1
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	4824      	ldr	r0, [pc, #144]	@ (8009434 <_svfiprintf_r+0x1e8>)
 80093a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093a6:	2206      	movs	r2, #6
 80093a8:	f7f6 ff2a 	bl	8000200 <memchr>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d036      	beq.n	800941e <_svfiprintf_r+0x1d2>
 80093b0:	4b21      	ldr	r3, [pc, #132]	@ (8009438 <_svfiprintf_r+0x1ec>)
 80093b2:	bb1b      	cbnz	r3, 80093fc <_svfiprintf_r+0x1b0>
 80093b4:	9b03      	ldr	r3, [sp, #12]
 80093b6:	3307      	adds	r3, #7
 80093b8:	f023 0307 	bic.w	r3, r3, #7
 80093bc:	3308      	adds	r3, #8
 80093be:	9303      	str	r3, [sp, #12]
 80093c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c2:	4433      	add	r3, r6
 80093c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c6:	e76a      	b.n	800929e <_svfiprintf_r+0x52>
 80093c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093cc:	460c      	mov	r4, r1
 80093ce:	2001      	movs	r0, #1
 80093d0:	e7a8      	b.n	8009324 <_svfiprintf_r+0xd8>
 80093d2:	2300      	movs	r3, #0
 80093d4:	3401      	adds	r4, #1
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	4619      	mov	r1, r3
 80093da:	f04f 0c0a 	mov.w	ip, #10
 80093de:	4620      	mov	r0, r4
 80093e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093e4:	3a30      	subs	r2, #48	@ 0x30
 80093e6:	2a09      	cmp	r2, #9
 80093e8:	d903      	bls.n	80093f2 <_svfiprintf_r+0x1a6>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0c6      	beq.n	800937c <_svfiprintf_r+0x130>
 80093ee:	9105      	str	r1, [sp, #20]
 80093f0:	e7c4      	b.n	800937c <_svfiprintf_r+0x130>
 80093f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f6:	4604      	mov	r4, r0
 80093f8:	2301      	movs	r3, #1
 80093fa:	e7f0      	b.n	80093de <_svfiprintf_r+0x192>
 80093fc:	ab03      	add	r3, sp, #12
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	462a      	mov	r2, r5
 8009402:	4b0e      	ldr	r3, [pc, #56]	@ (800943c <_svfiprintf_r+0x1f0>)
 8009404:	a904      	add	r1, sp, #16
 8009406:	4638      	mov	r0, r7
 8009408:	f7fc fc5a 	bl	8005cc0 <_printf_float>
 800940c:	1c42      	adds	r2, r0, #1
 800940e:	4606      	mov	r6, r0
 8009410:	d1d6      	bne.n	80093c0 <_svfiprintf_r+0x174>
 8009412:	89ab      	ldrh	r3, [r5, #12]
 8009414:	065b      	lsls	r3, r3, #25
 8009416:	f53f af2d 	bmi.w	8009274 <_svfiprintf_r+0x28>
 800941a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800941c:	e72c      	b.n	8009278 <_svfiprintf_r+0x2c>
 800941e:	ab03      	add	r3, sp, #12
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	462a      	mov	r2, r5
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <_svfiprintf_r+0x1f0>)
 8009426:	a904      	add	r1, sp, #16
 8009428:	4638      	mov	r0, r7
 800942a:	f7fc fee1 	bl	80061f0 <_printf_i>
 800942e:	e7ed      	b.n	800940c <_svfiprintf_r+0x1c0>
 8009430:	0800a629 	.word	0x0800a629
 8009434:	0800a633 	.word	0x0800a633
 8009438:	08005cc1 	.word	0x08005cc1
 800943c:	08009195 	.word	0x08009195
 8009440:	0800a62f 	.word	0x0800a62f

08009444 <__sfputc_r>:
 8009444:	6893      	ldr	r3, [r2, #8]
 8009446:	3b01      	subs	r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	b410      	push	{r4}
 800944c:	6093      	str	r3, [r2, #8]
 800944e:	da08      	bge.n	8009462 <__sfputc_r+0x1e>
 8009450:	6994      	ldr	r4, [r2, #24]
 8009452:	42a3      	cmp	r3, r4
 8009454:	db01      	blt.n	800945a <__sfputc_r+0x16>
 8009456:	290a      	cmp	r1, #10
 8009458:	d103      	bne.n	8009462 <__sfputc_r+0x1e>
 800945a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800945e:	f7fd bb90 	b.w	8006b82 <__swbuf_r>
 8009462:	6813      	ldr	r3, [r2, #0]
 8009464:	1c58      	adds	r0, r3, #1
 8009466:	6010      	str	r0, [r2, #0]
 8009468:	7019      	strb	r1, [r3, #0]
 800946a:	4608      	mov	r0, r1
 800946c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009470:	4770      	bx	lr

08009472 <__sfputs_r>:
 8009472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009474:	4606      	mov	r6, r0
 8009476:	460f      	mov	r7, r1
 8009478:	4614      	mov	r4, r2
 800947a:	18d5      	adds	r5, r2, r3
 800947c:	42ac      	cmp	r4, r5
 800947e:	d101      	bne.n	8009484 <__sfputs_r+0x12>
 8009480:	2000      	movs	r0, #0
 8009482:	e007      	b.n	8009494 <__sfputs_r+0x22>
 8009484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009488:	463a      	mov	r2, r7
 800948a:	4630      	mov	r0, r6
 800948c:	f7ff ffda 	bl	8009444 <__sfputc_r>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d1f3      	bne.n	800947c <__sfputs_r+0xa>
 8009494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009498 <_vfiprintf_r>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	460d      	mov	r5, r1
 800949e:	b09d      	sub	sp, #116	@ 0x74
 80094a0:	4614      	mov	r4, r2
 80094a2:	4698      	mov	r8, r3
 80094a4:	4606      	mov	r6, r0
 80094a6:	b118      	cbz	r0, 80094b0 <_vfiprintf_r+0x18>
 80094a8:	6a03      	ldr	r3, [r0, #32]
 80094aa:	b90b      	cbnz	r3, 80094b0 <_vfiprintf_r+0x18>
 80094ac:	f7fd fa60 	bl	8006970 <__sinit>
 80094b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094b2:	07d9      	lsls	r1, r3, #31
 80094b4:	d405      	bmi.n	80094c2 <_vfiprintf_r+0x2a>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	059a      	lsls	r2, r3, #22
 80094ba:	d402      	bmi.n	80094c2 <_vfiprintf_r+0x2a>
 80094bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094be:	f7fd fc82 	bl	8006dc6 <__retarget_lock_acquire_recursive>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	071b      	lsls	r3, r3, #28
 80094c6:	d501      	bpl.n	80094cc <_vfiprintf_r+0x34>
 80094c8:	692b      	ldr	r3, [r5, #16]
 80094ca:	b99b      	cbnz	r3, 80094f4 <_vfiprintf_r+0x5c>
 80094cc:	4629      	mov	r1, r5
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7fd fb96 	bl	8006c00 <__swsetup_r>
 80094d4:	b170      	cbz	r0, 80094f4 <_vfiprintf_r+0x5c>
 80094d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094d8:	07dc      	lsls	r4, r3, #31
 80094da:	d504      	bpl.n	80094e6 <_vfiprintf_r+0x4e>
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	b01d      	add	sp, #116	@ 0x74
 80094e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e6:	89ab      	ldrh	r3, [r5, #12]
 80094e8:	0598      	lsls	r0, r3, #22
 80094ea:	d4f7      	bmi.n	80094dc <_vfiprintf_r+0x44>
 80094ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ee:	f7fd fc6b 	bl	8006dc8 <__retarget_lock_release_recursive>
 80094f2:	e7f3      	b.n	80094dc <_vfiprintf_r+0x44>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f8:	2320      	movs	r3, #32
 80094fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009502:	2330      	movs	r3, #48	@ 0x30
 8009504:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096b4 <_vfiprintf_r+0x21c>
 8009508:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800950c:	f04f 0901 	mov.w	r9, #1
 8009510:	4623      	mov	r3, r4
 8009512:	469a      	mov	sl, r3
 8009514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009518:	b10a      	cbz	r2, 800951e <_vfiprintf_r+0x86>
 800951a:	2a25      	cmp	r2, #37	@ 0x25
 800951c:	d1f9      	bne.n	8009512 <_vfiprintf_r+0x7a>
 800951e:	ebba 0b04 	subs.w	fp, sl, r4
 8009522:	d00b      	beq.n	800953c <_vfiprintf_r+0xa4>
 8009524:	465b      	mov	r3, fp
 8009526:	4622      	mov	r2, r4
 8009528:	4629      	mov	r1, r5
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ffa1 	bl	8009472 <__sfputs_r>
 8009530:	3001      	adds	r0, #1
 8009532:	f000 80a7 	beq.w	8009684 <_vfiprintf_r+0x1ec>
 8009536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009538:	445a      	add	r2, fp
 800953a:	9209      	str	r2, [sp, #36]	@ 0x24
 800953c:	f89a 3000 	ldrb.w	r3, [sl]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 809f 	beq.w	8009684 <_vfiprintf_r+0x1ec>
 8009546:	2300      	movs	r3, #0
 8009548:	f04f 32ff 	mov.w	r2, #4294967295
 800954c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009550:	f10a 0a01 	add.w	sl, sl, #1
 8009554:	9304      	str	r3, [sp, #16]
 8009556:	9307      	str	r3, [sp, #28]
 8009558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800955c:	931a      	str	r3, [sp, #104]	@ 0x68
 800955e:	4654      	mov	r4, sl
 8009560:	2205      	movs	r2, #5
 8009562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009566:	4853      	ldr	r0, [pc, #332]	@ (80096b4 <_vfiprintf_r+0x21c>)
 8009568:	f7f6 fe4a 	bl	8000200 <memchr>
 800956c:	9a04      	ldr	r2, [sp, #16]
 800956e:	b9d8      	cbnz	r0, 80095a8 <_vfiprintf_r+0x110>
 8009570:	06d1      	lsls	r1, r2, #27
 8009572:	bf44      	itt	mi
 8009574:	2320      	movmi	r3, #32
 8009576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800957a:	0713      	lsls	r3, r2, #28
 800957c:	bf44      	itt	mi
 800957e:	232b      	movmi	r3, #43	@ 0x2b
 8009580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009584:	f89a 3000 	ldrb.w	r3, [sl]
 8009588:	2b2a      	cmp	r3, #42	@ 0x2a
 800958a:	d015      	beq.n	80095b8 <_vfiprintf_r+0x120>
 800958c:	9a07      	ldr	r2, [sp, #28]
 800958e:	4654      	mov	r4, sl
 8009590:	2000      	movs	r0, #0
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4621      	mov	r1, r4
 8009598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800959c:	3b30      	subs	r3, #48	@ 0x30
 800959e:	2b09      	cmp	r3, #9
 80095a0:	d94b      	bls.n	800963a <_vfiprintf_r+0x1a2>
 80095a2:	b1b0      	cbz	r0, 80095d2 <_vfiprintf_r+0x13a>
 80095a4:	9207      	str	r2, [sp, #28]
 80095a6:	e014      	b.n	80095d2 <_vfiprintf_r+0x13a>
 80095a8:	eba0 0308 	sub.w	r3, r0, r8
 80095ac:	fa09 f303 	lsl.w	r3, r9, r3
 80095b0:	4313      	orrs	r3, r2
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	46a2      	mov	sl, r4
 80095b6:	e7d2      	b.n	800955e <_vfiprintf_r+0xc6>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	1d19      	adds	r1, r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	9103      	str	r1, [sp, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bfbb      	ittet	lt
 80095c4:	425b      	neglt	r3, r3
 80095c6:	f042 0202 	orrlt.w	r2, r2, #2
 80095ca:	9307      	strge	r3, [sp, #28]
 80095cc:	9307      	strlt	r3, [sp, #28]
 80095ce:	bfb8      	it	lt
 80095d0:	9204      	strlt	r2, [sp, #16]
 80095d2:	7823      	ldrb	r3, [r4, #0]
 80095d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80095d6:	d10a      	bne.n	80095ee <_vfiprintf_r+0x156>
 80095d8:	7863      	ldrb	r3, [r4, #1]
 80095da:	2b2a      	cmp	r3, #42	@ 0x2a
 80095dc:	d132      	bne.n	8009644 <_vfiprintf_r+0x1ac>
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	1d1a      	adds	r2, r3, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	9203      	str	r2, [sp, #12]
 80095e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095ea:	3402      	adds	r4, #2
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096c4 <_vfiprintf_r+0x22c>
 80095f2:	7821      	ldrb	r1, [r4, #0]
 80095f4:	2203      	movs	r2, #3
 80095f6:	4650      	mov	r0, sl
 80095f8:	f7f6 fe02 	bl	8000200 <memchr>
 80095fc:	b138      	cbz	r0, 800960e <_vfiprintf_r+0x176>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	eba0 000a 	sub.w	r0, r0, sl
 8009604:	2240      	movs	r2, #64	@ 0x40
 8009606:	4082      	lsls	r2, r0
 8009608:	4313      	orrs	r3, r2
 800960a:	3401      	adds	r4, #1
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009612:	4829      	ldr	r0, [pc, #164]	@ (80096b8 <_vfiprintf_r+0x220>)
 8009614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009618:	2206      	movs	r2, #6
 800961a:	f7f6 fdf1 	bl	8000200 <memchr>
 800961e:	2800      	cmp	r0, #0
 8009620:	d03f      	beq.n	80096a2 <_vfiprintf_r+0x20a>
 8009622:	4b26      	ldr	r3, [pc, #152]	@ (80096bc <_vfiprintf_r+0x224>)
 8009624:	bb1b      	cbnz	r3, 800966e <_vfiprintf_r+0x1d6>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	3307      	adds	r3, #7
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	3308      	adds	r3, #8
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009634:	443b      	add	r3, r7
 8009636:	9309      	str	r3, [sp, #36]	@ 0x24
 8009638:	e76a      	b.n	8009510 <_vfiprintf_r+0x78>
 800963a:	fb0c 3202 	mla	r2, ip, r2, r3
 800963e:	460c      	mov	r4, r1
 8009640:	2001      	movs	r0, #1
 8009642:	e7a8      	b.n	8009596 <_vfiprintf_r+0xfe>
 8009644:	2300      	movs	r3, #0
 8009646:	3401      	adds	r4, #1
 8009648:	9305      	str	r3, [sp, #20]
 800964a:	4619      	mov	r1, r3
 800964c:	f04f 0c0a 	mov.w	ip, #10
 8009650:	4620      	mov	r0, r4
 8009652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009656:	3a30      	subs	r2, #48	@ 0x30
 8009658:	2a09      	cmp	r2, #9
 800965a:	d903      	bls.n	8009664 <_vfiprintf_r+0x1cc>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0c6      	beq.n	80095ee <_vfiprintf_r+0x156>
 8009660:	9105      	str	r1, [sp, #20]
 8009662:	e7c4      	b.n	80095ee <_vfiprintf_r+0x156>
 8009664:	fb0c 2101 	mla	r1, ip, r1, r2
 8009668:	4604      	mov	r4, r0
 800966a:	2301      	movs	r3, #1
 800966c:	e7f0      	b.n	8009650 <_vfiprintf_r+0x1b8>
 800966e:	ab03      	add	r3, sp, #12
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	462a      	mov	r2, r5
 8009674:	4b12      	ldr	r3, [pc, #72]	@ (80096c0 <_vfiprintf_r+0x228>)
 8009676:	a904      	add	r1, sp, #16
 8009678:	4630      	mov	r0, r6
 800967a:	f7fc fb21 	bl	8005cc0 <_printf_float>
 800967e:	4607      	mov	r7, r0
 8009680:	1c78      	adds	r0, r7, #1
 8009682:	d1d6      	bne.n	8009632 <_vfiprintf_r+0x19a>
 8009684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009686:	07d9      	lsls	r1, r3, #31
 8009688:	d405      	bmi.n	8009696 <_vfiprintf_r+0x1fe>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d402      	bmi.n	8009696 <_vfiprintf_r+0x1fe>
 8009690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009692:	f7fd fb99 	bl	8006dc8 <__retarget_lock_release_recursive>
 8009696:	89ab      	ldrh	r3, [r5, #12]
 8009698:	065b      	lsls	r3, r3, #25
 800969a:	f53f af1f 	bmi.w	80094dc <_vfiprintf_r+0x44>
 800969e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096a0:	e71e      	b.n	80094e0 <_vfiprintf_r+0x48>
 80096a2:	ab03      	add	r3, sp, #12
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	462a      	mov	r2, r5
 80096a8:	4b05      	ldr	r3, [pc, #20]	@ (80096c0 <_vfiprintf_r+0x228>)
 80096aa:	a904      	add	r1, sp, #16
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7fc fd9f 	bl	80061f0 <_printf_i>
 80096b2:	e7e4      	b.n	800967e <_vfiprintf_r+0x1e6>
 80096b4:	0800a629 	.word	0x0800a629
 80096b8:	0800a633 	.word	0x0800a633
 80096bc:	08005cc1 	.word	0x08005cc1
 80096c0:	08009473 	.word	0x08009473
 80096c4:	0800a62f 	.word	0x0800a62f

080096c8 <__sflush_r>:
 80096c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	0716      	lsls	r6, r2, #28
 80096d2:	4605      	mov	r5, r0
 80096d4:	460c      	mov	r4, r1
 80096d6:	d454      	bmi.n	8009782 <__sflush_r+0xba>
 80096d8:	684b      	ldr	r3, [r1, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	dc02      	bgt.n	80096e4 <__sflush_r+0x1c>
 80096de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dd48      	ble.n	8009776 <__sflush_r+0xae>
 80096e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096e6:	2e00      	cmp	r6, #0
 80096e8:	d045      	beq.n	8009776 <__sflush_r+0xae>
 80096ea:	2300      	movs	r3, #0
 80096ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096f0:	682f      	ldr	r7, [r5, #0]
 80096f2:	6a21      	ldr	r1, [r4, #32]
 80096f4:	602b      	str	r3, [r5, #0]
 80096f6:	d030      	beq.n	800975a <__sflush_r+0x92>
 80096f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	0759      	lsls	r1, r3, #29
 80096fe:	d505      	bpl.n	800970c <__sflush_r+0x44>
 8009700:	6863      	ldr	r3, [r4, #4]
 8009702:	1ad2      	subs	r2, r2, r3
 8009704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009706:	b10b      	cbz	r3, 800970c <__sflush_r+0x44>
 8009708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800970a:	1ad2      	subs	r2, r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009710:	6a21      	ldr	r1, [r4, #32]
 8009712:	4628      	mov	r0, r5
 8009714:	47b0      	blx	r6
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	d106      	bne.n	800972a <__sflush_r+0x62>
 800971c:	6829      	ldr	r1, [r5, #0]
 800971e:	291d      	cmp	r1, #29
 8009720:	d82b      	bhi.n	800977a <__sflush_r+0xb2>
 8009722:	4a2a      	ldr	r2, [pc, #168]	@ (80097cc <__sflush_r+0x104>)
 8009724:	410a      	asrs	r2, r1
 8009726:	07d6      	lsls	r6, r2, #31
 8009728:	d427      	bmi.n	800977a <__sflush_r+0xb2>
 800972a:	2200      	movs	r2, #0
 800972c:	6062      	str	r2, [r4, #4]
 800972e:	04d9      	lsls	r1, r3, #19
 8009730:	6922      	ldr	r2, [r4, #16]
 8009732:	6022      	str	r2, [r4, #0]
 8009734:	d504      	bpl.n	8009740 <__sflush_r+0x78>
 8009736:	1c42      	adds	r2, r0, #1
 8009738:	d101      	bne.n	800973e <__sflush_r+0x76>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	b903      	cbnz	r3, 8009740 <__sflush_r+0x78>
 800973e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009742:	602f      	str	r7, [r5, #0]
 8009744:	b1b9      	cbz	r1, 8009776 <__sflush_r+0xae>
 8009746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800974a:	4299      	cmp	r1, r3
 800974c:	d002      	beq.n	8009754 <__sflush_r+0x8c>
 800974e:	4628      	mov	r0, r5
 8009750:	f7fe f99e 	bl	8007a90 <_free_r>
 8009754:	2300      	movs	r3, #0
 8009756:	6363      	str	r3, [r4, #52]	@ 0x34
 8009758:	e00d      	b.n	8009776 <__sflush_r+0xae>
 800975a:	2301      	movs	r3, #1
 800975c:	4628      	mov	r0, r5
 800975e:	47b0      	blx	r6
 8009760:	4602      	mov	r2, r0
 8009762:	1c50      	adds	r0, r2, #1
 8009764:	d1c9      	bne.n	80096fa <__sflush_r+0x32>
 8009766:	682b      	ldr	r3, [r5, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0c6      	beq.n	80096fa <__sflush_r+0x32>
 800976c:	2b1d      	cmp	r3, #29
 800976e:	d001      	beq.n	8009774 <__sflush_r+0xac>
 8009770:	2b16      	cmp	r3, #22
 8009772:	d11e      	bne.n	80097b2 <__sflush_r+0xea>
 8009774:	602f      	str	r7, [r5, #0]
 8009776:	2000      	movs	r0, #0
 8009778:	e022      	b.n	80097c0 <__sflush_r+0xf8>
 800977a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800977e:	b21b      	sxth	r3, r3
 8009780:	e01b      	b.n	80097ba <__sflush_r+0xf2>
 8009782:	690f      	ldr	r7, [r1, #16]
 8009784:	2f00      	cmp	r7, #0
 8009786:	d0f6      	beq.n	8009776 <__sflush_r+0xae>
 8009788:	0793      	lsls	r3, r2, #30
 800978a:	680e      	ldr	r6, [r1, #0]
 800978c:	bf08      	it	eq
 800978e:	694b      	ldreq	r3, [r1, #20]
 8009790:	600f      	str	r7, [r1, #0]
 8009792:	bf18      	it	ne
 8009794:	2300      	movne	r3, #0
 8009796:	eba6 0807 	sub.w	r8, r6, r7
 800979a:	608b      	str	r3, [r1, #8]
 800979c:	f1b8 0f00 	cmp.w	r8, #0
 80097a0:	dde9      	ble.n	8009776 <__sflush_r+0xae>
 80097a2:	6a21      	ldr	r1, [r4, #32]
 80097a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097a6:	4643      	mov	r3, r8
 80097a8:	463a      	mov	r2, r7
 80097aa:	4628      	mov	r0, r5
 80097ac:	47b0      	blx	r6
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dc08      	bgt.n	80097c4 <__sflush_r+0xfc>
 80097b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	f04f 30ff 	mov.w	r0, #4294967295
 80097c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c4:	4407      	add	r7, r0
 80097c6:	eba8 0800 	sub.w	r8, r8, r0
 80097ca:	e7e7      	b.n	800979c <__sflush_r+0xd4>
 80097cc:	dfbffffe 	.word	0xdfbffffe

080097d0 <_fflush_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	690b      	ldr	r3, [r1, #16]
 80097d4:	4605      	mov	r5, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	b913      	cbnz	r3, 80097e0 <_fflush_r+0x10>
 80097da:	2500      	movs	r5, #0
 80097dc:	4628      	mov	r0, r5
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	b118      	cbz	r0, 80097ea <_fflush_r+0x1a>
 80097e2:	6a03      	ldr	r3, [r0, #32]
 80097e4:	b90b      	cbnz	r3, 80097ea <_fflush_r+0x1a>
 80097e6:	f7fd f8c3 	bl	8006970 <__sinit>
 80097ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0f3      	beq.n	80097da <_fflush_r+0xa>
 80097f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097f4:	07d0      	lsls	r0, r2, #31
 80097f6:	d404      	bmi.n	8009802 <_fflush_r+0x32>
 80097f8:	0599      	lsls	r1, r3, #22
 80097fa:	d402      	bmi.n	8009802 <_fflush_r+0x32>
 80097fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097fe:	f7fd fae2 	bl	8006dc6 <__retarget_lock_acquire_recursive>
 8009802:	4628      	mov	r0, r5
 8009804:	4621      	mov	r1, r4
 8009806:	f7ff ff5f 	bl	80096c8 <__sflush_r>
 800980a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800980c:	07da      	lsls	r2, r3, #31
 800980e:	4605      	mov	r5, r0
 8009810:	d4e4      	bmi.n	80097dc <_fflush_r+0xc>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	059b      	lsls	r3, r3, #22
 8009816:	d4e1      	bmi.n	80097dc <_fflush_r+0xc>
 8009818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800981a:	f7fd fad5 	bl	8006dc8 <__retarget_lock_release_recursive>
 800981e:	e7dd      	b.n	80097dc <_fflush_r+0xc>

08009820 <__swhatbuf_r>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	460c      	mov	r4, r1
 8009824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009828:	2900      	cmp	r1, #0
 800982a:	b096      	sub	sp, #88	@ 0x58
 800982c:	4615      	mov	r5, r2
 800982e:	461e      	mov	r6, r3
 8009830:	da0d      	bge.n	800984e <__swhatbuf_r+0x2e>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009838:	f04f 0100 	mov.w	r1, #0
 800983c:	bf14      	ite	ne
 800983e:	2340      	movne	r3, #64	@ 0x40
 8009840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009844:	2000      	movs	r0, #0
 8009846:	6031      	str	r1, [r6, #0]
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	b016      	add	sp, #88	@ 0x58
 800984c:	bd70      	pop	{r4, r5, r6, pc}
 800984e:	466a      	mov	r2, sp
 8009850:	f000 f874 	bl	800993c <_fstat_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	dbec      	blt.n	8009832 <__swhatbuf_r+0x12>
 8009858:	9901      	ldr	r1, [sp, #4]
 800985a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800985e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009862:	4259      	negs	r1, r3
 8009864:	4159      	adcs	r1, r3
 8009866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800986a:	e7eb      	b.n	8009844 <__swhatbuf_r+0x24>

0800986c <__smakebuf_r>:
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009870:	079d      	lsls	r5, r3, #30
 8009872:	4606      	mov	r6, r0
 8009874:	460c      	mov	r4, r1
 8009876:	d507      	bpl.n	8009888 <__smakebuf_r+0x1c>
 8009878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	2301      	movs	r3, #1
 8009882:	6163      	str	r3, [r4, #20]
 8009884:	b003      	add	sp, #12
 8009886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009888:	ab01      	add	r3, sp, #4
 800988a:	466a      	mov	r2, sp
 800988c:	f7ff ffc8 	bl	8009820 <__swhatbuf_r>
 8009890:	9f00      	ldr	r7, [sp, #0]
 8009892:	4605      	mov	r5, r0
 8009894:	4639      	mov	r1, r7
 8009896:	4630      	mov	r0, r6
 8009898:	f7fc f8e6 	bl	8005a68 <_malloc_r>
 800989c:	b948      	cbnz	r0, 80098b2 <__smakebuf_r+0x46>
 800989e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a2:	059a      	lsls	r2, r3, #22
 80098a4:	d4ee      	bmi.n	8009884 <__smakebuf_r+0x18>
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	f043 0302 	orr.w	r3, r3, #2
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	e7e2      	b.n	8009878 <__smakebuf_r+0xc>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	6020      	str	r0, [r4, #0]
 80098b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	9b01      	ldr	r3, [sp, #4]
 80098be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098c2:	b15b      	cbz	r3, 80098dc <__smakebuf_r+0x70>
 80098c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f849 	bl	8009960 <_isatty_r>
 80098ce:	b128      	cbz	r0, 80098dc <__smakebuf_r+0x70>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	431d      	orrs	r5, r3
 80098e0:	81a5      	strh	r5, [r4, #12]
 80098e2:	e7cf      	b.n	8009884 <__smakebuf_r+0x18>

080098e4 <memmove>:
 80098e4:	4288      	cmp	r0, r1
 80098e6:	b510      	push	{r4, lr}
 80098e8:	eb01 0402 	add.w	r4, r1, r2
 80098ec:	d902      	bls.n	80098f4 <memmove+0x10>
 80098ee:	4284      	cmp	r4, r0
 80098f0:	4623      	mov	r3, r4
 80098f2:	d807      	bhi.n	8009904 <memmove+0x20>
 80098f4:	1e43      	subs	r3, r0, #1
 80098f6:	42a1      	cmp	r1, r4
 80098f8:	d008      	beq.n	800990c <memmove+0x28>
 80098fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009902:	e7f8      	b.n	80098f6 <memmove+0x12>
 8009904:	4402      	add	r2, r0
 8009906:	4601      	mov	r1, r0
 8009908:	428a      	cmp	r2, r1
 800990a:	d100      	bne.n	800990e <memmove+0x2a>
 800990c:	bd10      	pop	{r4, pc}
 800990e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009916:	e7f7      	b.n	8009908 <memmove+0x24>

08009918 <strncmp>:
 8009918:	b510      	push	{r4, lr}
 800991a:	b16a      	cbz	r2, 8009938 <strncmp+0x20>
 800991c:	3901      	subs	r1, #1
 800991e:	1884      	adds	r4, r0, r2
 8009920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009924:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009928:	429a      	cmp	r2, r3
 800992a:	d103      	bne.n	8009934 <strncmp+0x1c>
 800992c:	42a0      	cmp	r0, r4
 800992e:	d001      	beq.n	8009934 <strncmp+0x1c>
 8009930:	2a00      	cmp	r2, #0
 8009932:	d1f5      	bne.n	8009920 <strncmp+0x8>
 8009934:	1ad0      	subs	r0, r2, r3
 8009936:	bd10      	pop	{r4, pc}
 8009938:	4610      	mov	r0, r2
 800993a:	e7fc      	b.n	8009936 <strncmp+0x1e>

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	@ (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f8 faef 	bl	8001f2c <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	20000594 	.word	0x20000594

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	@ (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 faee 	bl	8001f4c <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000594 	.word	0x20000594

08009980 <nan>:
 8009980:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009988 <nan+0x8>
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	00000000 	.word	0x00000000
 800998c:	7ff80000 	.word	0x7ff80000

08009990 <__assert_func>:
 8009990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009992:	4614      	mov	r4, r2
 8009994:	461a      	mov	r2, r3
 8009996:	4b09      	ldr	r3, [pc, #36]	@ (80099bc <__assert_func+0x2c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4605      	mov	r5, r0
 800999c:	68d8      	ldr	r0, [r3, #12]
 800999e:	b954      	cbnz	r4, 80099b6 <__assert_func+0x26>
 80099a0:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <__assert_func+0x30>)
 80099a2:	461c      	mov	r4, r3
 80099a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099a8:	9100      	str	r1, [sp, #0]
 80099aa:	462b      	mov	r3, r5
 80099ac:	4905      	ldr	r1, [pc, #20]	@ (80099c4 <__assert_func+0x34>)
 80099ae:	f000 fba7 	bl	800a100 <fiprintf>
 80099b2:	f000 fbb7 	bl	800a124 <abort>
 80099b6:	4b04      	ldr	r3, [pc, #16]	@ (80099c8 <__assert_func+0x38>)
 80099b8:	e7f4      	b.n	80099a4 <__assert_func+0x14>
 80099ba:	bf00      	nop
 80099bc:	2000001c 	.word	0x2000001c
 80099c0:	0800a67d 	.word	0x0800a67d
 80099c4:	0800a64f 	.word	0x0800a64f
 80099c8:	0800a642 	.word	0x0800a642

080099cc <_calloc_r>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	fba1 5402 	umull	r5, r4, r1, r2
 80099d2:	b93c      	cbnz	r4, 80099e4 <_calloc_r+0x18>
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7fc f847 	bl	8005a68 <_malloc_r>
 80099da:	4606      	mov	r6, r0
 80099dc:	b928      	cbnz	r0, 80099ea <_calloc_r+0x1e>
 80099de:	2600      	movs	r6, #0
 80099e0:	4630      	mov	r0, r6
 80099e2:	bd70      	pop	{r4, r5, r6, pc}
 80099e4:	220c      	movs	r2, #12
 80099e6:	6002      	str	r2, [r0, #0]
 80099e8:	e7f9      	b.n	80099de <_calloc_r+0x12>
 80099ea:	462a      	mov	r2, r5
 80099ec:	4621      	mov	r1, r4
 80099ee:	f7fd f95d 	bl	8006cac <memset>
 80099f2:	e7f5      	b.n	80099e0 <_calloc_r+0x14>

080099f4 <rshift>:
 80099f4:	6903      	ldr	r3, [r0, #16]
 80099f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a02:	f100 0414 	add.w	r4, r0, #20
 8009a06:	dd45      	ble.n	8009a94 <rshift+0xa0>
 8009a08:	f011 011f 	ands.w	r1, r1, #31
 8009a0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a14:	d10c      	bne.n	8009a30 <rshift+0x3c>
 8009a16:	f100 0710 	add.w	r7, r0, #16
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	42b1      	cmp	r1, r6
 8009a1e:	d334      	bcc.n	8009a8a <rshift+0x96>
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	1eea      	subs	r2, r5, #3
 8009a26:	4296      	cmp	r6, r2
 8009a28:	bf38      	it	cc
 8009a2a:	2300      	movcc	r3, #0
 8009a2c:	4423      	add	r3, r4
 8009a2e:	e015      	b.n	8009a5c <rshift+0x68>
 8009a30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a34:	f1c1 0820 	rsb	r8, r1, #32
 8009a38:	40cf      	lsrs	r7, r1
 8009a3a:	f105 0e04 	add.w	lr, r5, #4
 8009a3e:	46a1      	mov	r9, r4
 8009a40:	4576      	cmp	r6, lr
 8009a42:	46f4      	mov	ip, lr
 8009a44:	d815      	bhi.n	8009a72 <rshift+0x7e>
 8009a46:	1a9a      	subs	r2, r3, r2
 8009a48:	0092      	lsls	r2, r2, #2
 8009a4a:	3a04      	subs	r2, #4
 8009a4c:	3501      	adds	r5, #1
 8009a4e:	42ae      	cmp	r6, r5
 8009a50:	bf38      	it	cc
 8009a52:	2200      	movcc	r2, #0
 8009a54:	18a3      	adds	r3, r4, r2
 8009a56:	50a7      	str	r7, [r4, r2]
 8009a58:	b107      	cbz	r7, 8009a5c <rshift+0x68>
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	1b1a      	subs	r2, r3, r4
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a64:	bf08      	it	eq
 8009a66:	2300      	moveq	r3, #0
 8009a68:	6102      	str	r2, [r0, #16]
 8009a6a:	bf08      	it	eq
 8009a6c:	6143      	streq	r3, [r0, #20]
 8009a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a72:	f8dc c000 	ldr.w	ip, [ip]
 8009a76:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a7a:	ea4c 0707 	orr.w	r7, ip, r7
 8009a7e:	f849 7b04 	str.w	r7, [r9], #4
 8009a82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a86:	40cf      	lsrs	r7, r1
 8009a88:	e7da      	b.n	8009a40 <rshift+0x4c>
 8009a8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a92:	e7c3      	b.n	8009a1c <rshift+0x28>
 8009a94:	4623      	mov	r3, r4
 8009a96:	e7e1      	b.n	8009a5c <rshift+0x68>

08009a98 <__hexdig_fun>:
 8009a98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a9c:	2b09      	cmp	r3, #9
 8009a9e:	d802      	bhi.n	8009aa6 <__hexdig_fun+0xe>
 8009aa0:	3820      	subs	r0, #32
 8009aa2:	b2c0      	uxtb	r0, r0
 8009aa4:	4770      	bx	lr
 8009aa6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009aaa:	2b05      	cmp	r3, #5
 8009aac:	d801      	bhi.n	8009ab2 <__hexdig_fun+0x1a>
 8009aae:	3847      	subs	r0, #71	@ 0x47
 8009ab0:	e7f7      	b.n	8009aa2 <__hexdig_fun+0xa>
 8009ab2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d801      	bhi.n	8009abe <__hexdig_fun+0x26>
 8009aba:	3827      	subs	r0, #39	@ 0x27
 8009abc:	e7f1      	b.n	8009aa2 <__hexdig_fun+0xa>
 8009abe:	2000      	movs	r0, #0
 8009ac0:	4770      	bx	lr
	...

08009ac4 <__gethex>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	468a      	mov	sl, r1
 8009acc:	9302      	str	r3, [sp, #8]
 8009ace:	680b      	ldr	r3, [r1, #0]
 8009ad0:	9001      	str	r0, [sp, #4]
 8009ad2:	4690      	mov	r8, r2
 8009ad4:	1c9c      	adds	r4, r3, #2
 8009ad6:	46a1      	mov	r9, r4
 8009ad8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009adc:	2830      	cmp	r0, #48	@ 0x30
 8009ade:	d0fa      	beq.n	8009ad6 <__gethex+0x12>
 8009ae0:	eba9 0303 	sub.w	r3, r9, r3
 8009ae4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ae8:	f7ff ffd6 	bl	8009a98 <__hexdig_fun>
 8009aec:	4605      	mov	r5, r0
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d168      	bne.n	8009bc4 <__gethex+0x100>
 8009af2:	49a0      	ldr	r1, [pc, #640]	@ (8009d74 <__gethex+0x2b0>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	4648      	mov	r0, r9
 8009af8:	f7ff ff0e 	bl	8009918 <strncmp>
 8009afc:	4607      	mov	r7, r0
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d167      	bne.n	8009bd2 <__gethex+0x10e>
 8009b02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b06:	4626      	mov	r6, r4
 8009b08:	f7ff ffc6 	bl	8009a98 <__hexdig_fun>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d062      	beq.n	8009bd6 <__gethex+0x112>
 8009b10:	4623      	mov	r3, r4
 8009b12:	7818      	ldrb	r0, [r3, #0]
 8009b14:	2830      	cmp	r0, #48	@ 0x30
 8009b16:	4699      	mov	r9, r3
 8009b18:	f103 0301 	add.w	r3, r3, #1
 8009b1c:	d0f9      	beq.n	8009b12 <__gethex+0x4e>
 8009b1e:	f7ff ffbb 	bl	8009a98 <__hexdig_fun>
 8009b22:	fab0 f580 	clz	r5, r0
 8009b26:	096d      	lsrs	r5, r5, #5
 8009b28:	f04f 0b01 	mov.w	fp, #1
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	4616      	mov	r6, r2
 8009b30:	3201      	adds	r2, #1
 8009b32:	7830      	ldrb	r0, [r6, #0]
 8009b34:	f7ff ffb0 	bl	8009a98 <__hexdig_fun>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1f8      	bne.n	8009b2e <__gethex+0x6a>
 8009b3c:	498d      	ldr	r1, [pc, #564]	@ (8009d74 <__gethex+0x2b0>)
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff fee9 	bl	8009918 <strncmp>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d13f      	bne.n	8009bca <__gethex+0x106>
 8009b4a:	b944      	cbnz	r4, 8009b5e <__gethex+0x9a>
 8009b4c:	1c74      	adds	r4, r6, #1
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4616      	mov	r6, r2
 8009b52:	3201      	adds	r2, #1
 8009b54:	7830      	ldrb	r0, [r6, #0]
 8009b56:	f7ff ff9f 	bl	8009a98 <__hexdig_fun>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d1f8      	bne.n	8009b50 <__gethex+0x8c>
 8009b5e:	1ba4      	subs	r4, r4, r6
 8009b60:	00a7      	lsls	r7, r4, #2
 8009b62:	7833      	ldrb	r3, [r6, #0]
 8009b64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b68:	2b50      	cmp	r3, #80	@ 0x50
 8009b6a:	d13e      	bne.n	8009bea <__gethex+0x126>
 8009b6c:	7873      	ldrb	r3, [r6, #1]
 8009b6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b70:	d033      	beq.n	8009bda <__gethex+0x116>
 8009b72:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b74:	d034      	beq.n	8009be0 <__gethex+0x11c>
 8009b76:	1c71      	adds	r1, r6, #1
 8009b78:	2400      	movs	r4, #0
 8009b7a:	7808      	ldrb	r0, [r1, #0]
 8009b7c:	f7ff ff8c 	bl	8009a98 <__hexdig_fun>
 8009b80:	1e43      	subs	r3, r0, #1
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b18      	cmp	r3, #24
 8009b86:	d830      	bhi.n	8009bea <__gethex+0x126>
 8009b88:	f1a0 0210 	sub.w	r2, r0, #16
 8009b8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b90:	f7ff ff82 	bl	8009a98 <__hexdig_fun>
 8009b94:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b98:	fa5f fc8c 	uxtb.w	ip, ip
 8009b9c:	f1bc 0f18 	cmp.w	ip, #24
 8009ba0:	f04f 030a 	mov.w	r3, #10
 8009ba4:	d91e      	bls.n	8009be4 <__gethex+0x120>
 8009ba6:	b104      	cbz	r4, 8009baa <__gethex+0xe6>
 8009ba8:	4252      	negs	r2, r2
 8009baa:	4417      	add	r7, r2
 8009bac:	f8ca 1000 	str.w	r1, [sl]
 8009bb0:	b1ed      	cbz	r5, 8009bee <__gethex+0x12a>
 8009bb2:	f1bb 0f00 	cmp.w	fp, #0
 8009bb6:	bf0c      	ite	eq
 8009bb8:	2506      	moveq	r5, #6
 8009bba:	2500      	movne	r5, #0
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	b005      	add	sp, #20
 8009bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	2500      	movs	r5, #0
 8009bc6:	462c      	mov	r4, r5
 8009bc8:	e7b0      	b.n	8009b2c <__gethex+0x68>
 8009bca:	2c00      	cmp	r4, #0
 8009bcc:	d1c7      	bne.n	8009b5e <__gethex+0x9a>
 8009bce:	4627      	mov	r7, r4
 8009bd0:	e7c7      	b.n	8009b62 <__gethex+0x9e>
 8009bd2:	464e      	mov	r6, r9
 8009bd4:	462f      	mov	r7, r5
 8009bd6:	2501      	movs	r5, #1
 8009bd8:	e7c3      	b.n	8009b62 <__gethex+0x9e>
 8009bda:	2400      	movs	r4, #0
 8009bdc:	1cb1      	adds	r1, r6, #2
 8009bde:	e7cc      	b.n	8009b7a <__gethex+0xb6>
 8009be0:	2401      	movs	r4, #1
 8009be2:	e7fb      	b.n	8009bdc <__gethex+0x118>
 8009be4:	fb03 0002 	mla	r0, r3, r2, r0
 8009be8:	e7ce      	b.n	8009b88 <__gethex+0xc4>
 8009bea:	4631      	mov	r1, r6
 8009bec:	e7de      	b.n	8009bac <__gethex+0xe8>
 8009bee:	eba6 0309 	sub.w	r3, r6, r9
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	2b07      	cmp	r3, #7
 8009bf8:	dc0a      	bgt.n	8009c10 <__gethex+0x14c>
 8009bfa:	9801      	ldr	r0, [sp, #4]
 8009bfc:	f7fd ff92 	bl	8007b24 <_Balloc>
 8009c00:	4604      	mov	r4, r0
 8009c02:	b940      	cbnz	r0, 8009c16 <__gethex+0x152>
 8009c04:	4b5c      	ldr	r3, [pc, #368]	@ (8009d78 <__gethex+0x2b4>)
 8009c06:	4602      	mov	r2, r0
 8009c08:	21e4      	movs	r1, #228	@ 0xe4
 8009c0a:	485c      	ldr	r0, [pc, #368]	@ (8009d7c <__gethex+0x2b8>)
 8009c0c:	f7ff fec0 	bl	8009990 <__assert_func>
 8009c10:	3101      	adds	r1, #1
 8009c12:	105b      	asrs	r3, r3, #1
 8009c14:	e7ef      	b.n	8009bf6 <__gethex+0x132>
 8009c16:	f100 0a14 	add.w	sl, r0, #20
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4655      	mov	r5, sl
 8009c1e:	469b      	mov	fp, r3
 8009c20:	45b1      	cmp	r9, r6
 8009c22:	d337      	bcc.n	8009c94 <__gethex+0x1d0>
 8009c24:	f845 bb04 	str.w	fp, [r5], #4
 8009c28:	eba5 050a 	sub.w	r5, r5, sl
 8009c2c:	10ad      	asrs	r5, r5, #2
 8009c2e:	6125      	str	r5, [r4, #16]
 8009c30:	4658      	mov	r0, fp
 8009c32:	f7fe f869 	bl	8007d08 <__hi0bits>
 8009c36:	016d      	lsls	r5, r5, #5
 8009c38:	f8d8 6000 	ldr.w	r6, [r8]
 8009c3c:	1a2d      	subs	r5, r5, r0
 8009c3e:	42b5      	cmp	r5, r6
 8009c40:	dd54      	ble.n	8009cec <__gethex+0x228>
 8009c42:	1bad      	subs	r5, r5, r6
 8009c44:	4629      	mov	r1, r5
 8009c46:	4620      	mov	r0, r4
 8009c48:	f7fe fbfd 	bl	8008446 <__any_on>
 8009c4c:	4681      	mov	r9, r0
 8009c4e:	b178      	cbz	r0, 8009c70 <__gethex+0x1ac>
 8009c50:	1e6b      	subs	r3, r5, #1
 8009c52:	1159      	asrs	r1, r3, #5
 8009c54:	f003 021f 	and.w	r2, r3, #31
 8009c58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c5c:	f04f 0901 	mov.w	r9, #1
 8009c60:	fa09 f202 	lsl.w	r2, r9, r2
 8009c64:	420a      	tst	r2, r1
 8009c66:	d003      	beq.n	8009c70 <__gethex+0x1ac>
 8009c68:	454b      	cmp	r3, r9
 8009c6a:	dc36      	bgt.n	8009cda <__gethex+0x216>
 8009c6c:	f04f 0902 	mov.w	r9, #2
 8009c70:	4629      	mov	r1, r5
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff febe 	bl	80099f4 <rshift>
 8009c78:	442f      	add	r7, r5
 8009c7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c7e:	42bb      	cmp	r3, r7
 8009c80:	da42      	bge.n	8009d08 <__gethex+0x244>
 8009c82:	9801      	ldr	r0, [sp, #4]
 8009c84:	4621      	mov	r1, r4
 8009c86:	f7fd ff8d 	bl	8007ba4 <_Bfree>
 8009c8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	25a3      	movs	r5, #163	@ 0xa3
 8009c92:	e793      	b.n	8009bbc <__gethex+0xf8>
 8009c94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c98:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c9a:	d012      	beq.n	8009cc2 <__gethex+0x1fe>
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d104      	bne.n	8009caa <__gethex+0x1e6>
 8009ca0:	f845 bb04 	str.w	fp, [r5], #4
 8009ca4:	f04f 0b00 	mov.w	fp, #0
 8009ca8:	465b      	mov	r3, fp
 8009caa:	7830      	ldrb	r0, [r6, #0]
 8009cac:	9303      	str	r3, [sp, #12]
 8009cae:	f7ff fef3 	bl	8009a98 <__hexdig_fun>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	f000 000f 	and.w	r0, r0, #15
 8009cb8:	4098      	lsls	r0, r3
 8009cba:	ea4b 0b00 	orr.w	fp, fp, r0
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	e7ae      	b.n	8009c20 <__gethex+0x15c>
 8009cc2:	45b1      	cmp	r9, r6
 8009cc4:	d8ea      	bhi.n	8009c9c <__gethex+0x1d8>
 8009cc6:	492b      	ldr	r1, [pc, #172]	@ (8009d74 <__gethex+0x2b0>)
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7ff fe23 	bl	8009918 <strncmp>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d1e1      	bne.n	8009c9c <__gethex+0x1d8>
 8009cd8:	e7a2      	b.n	8009c20 <__gethex+0x15c>
 8009cda:	1ea9      	subs	r1, r5, #2
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f7fe fbb2 	bl	8008446 <__any_on>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0c2      	beq.n	8009c6c <__gethex+0x1a8>
 8009ce6:	f04f 0903 	mov.w	r9, #3
 8009cea:	e7c1      	b.n	8009c70 <__gethex+0x1ac>
 8009cec:	da09      	bge.n	8009d02 <__gethex+0x23e>
 8009cee:	1b75      	subs	r5, r6, r5
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	9801      	ldr	r0, [sp, #4]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	f7fe f96d 	bl	8007fd4 <__lshift>
 8009cfa:	1b7f      	subs	r7, r7, r5
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f100 0a14 	add.w	sl, r0, #20
 8009d02:	f04f 0900 	mov.w	r9, #0
 8009d06:	e7b8      	b.n	8009c7a <__gethex+0x1b6>
 8009d08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d0c:	42bd      	cmp	r5, r7
 8009d0e:	dd6f      	ble.n	8009df0 <__gethex+0x32c>
 8009d10:	1bed      	subs	r5, r5, r7
 8009d12:	42ae      	cmp	r6, r5
 8009d14:	dc34      	bgt.n	8009d80 <__gethex+0x2bc>
 8009d16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d022      	beq.n	8009d64 <__gethex+0x2a0>
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d024      	beq.n	8009d6c <__gethex+0x2a8>
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d115      	bne.n	8009d52 <__gethex+0x28e>
 8009d26:	42ae      	cmp	r6, r5
 8009d28:	d113      	bne.n	8009d52 <__gethex+0x28e>
 8009d2a:	2e01      	cmp	r6, #1
 8009d2c:	d10b      	bne.n	8009d46 <__gethex+0x282>
 8009d2e:	9a02      	ldr	r2, [sp, #8]
 8009d30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	2301      	movs	r3, #1
 8009d38:	6123      	str	r3, [r4, #16]
 8009d3a:	f8ca 3000 	str.w	r3, [sl]
 8009d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d40:	2562      	movs	r5, #98	@ 0x62
 8009d42:	601c      	str	r4, [r3, #0]
 8009d44:	e73a      	b.n	8009bbc <__gethex+0xf8>
 8009d46:	1e71      	subs	r1, r6, #1
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7fe fb7c 	bl	8008446 <__any_on>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d1ed      	bne.n	8009d2e <__gethex+0x26a>
 8009d52:	9801      	ldr	r0, [sp, #4]
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7fd ff25 	bl	8007ba4 <_Bfree>
 8009d5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	2550      	movs	r5, #80	@ 0x50
 8009d62:	e72b      	b.n	8009bbc <__gethex+0xf8>
 8009d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1f3      	bne.n	8009d52 <__gethex+0x28e>
 8009d6a:	e7e0      	b.n	8009d2e <__gethex+0x26a>
 8009d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1dd      	bne.n	8009d2e <__gethex+0x26a>
 8009d72:	e7ee      	b.n	8009d52 <__gethex+0x28e>
 8009d74:	0800a4d0 	.word	0x0800a4d0
 8009d78:	0800a369 	.word	0x0800a369
 8009d7c:	0800a67e 	.word	0x0800a67e
 8009d80:	1e6f      	subs	r7, r5, #1
 8009d82:	f1b9 0f00 	cmp.w	r9, #0
 8009d86:	d130      	bne.n	8009dea <__gethex+0x326>
 8009d88:	b127      	cbz	r7, 8009d94 <__gethex+0x2d0>
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f7fe fb5a 	bl	8008446 <__any_on>
 8009d92:	4681      	mov	r9, r0
 8009d94:	117a      	asrs	r2, r7, #5
 8009d96:	2301      	movs	r3, #1
 8009d98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d9c:	f007 071f 	and.w	r7, r7, #31
 8009da0:	40bb      	lsls	r3, r7
 8009da2:	4213      	tst	r3, r2
 8009da4:	4629      	mov	r1, r5
 8009da6:	4620      	mov	r0, r4
 8009da8:	bf18      	it	ne
 8009daa:	f049 0902 	orrne.w	r9, r9, #2
 8009dae:	f7ff fe21 	bl	80099f4 <rshift>
 8009db2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009db6:	1b76      	subs	r6, r6, r5
 8009db8:	2502      	movs	r5, #2
 8009dba:	f1b9 0f00 	cmp.w	r9, #0
 8009dbe:	d047      	beq.n	8009e50 <__gethex+0x38c>
 8009dc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d015      	beq.n	8009df4 <__gethex+0x330>
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d017      	beq.n	8009dfc <__gethex+0x338>
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d109      	bne.n	8009de4 <__gethex+0x320>
 8009dd0:	f019 0f02 	tst.w	r9, #2
 8009dd4:	d006      	beq.n	8009de4 <__gethex+0x320>
 8009dd6:	f8da 3000 	ldr.w	r3, [sl]
 8009dda:	ea49 0903 	orr.w	r9, r9, r3
 8009dde:	f019 0f01 	tst.w	r9, #1
 8009de2:	d10e      	bne.n	8009e02 <__gethex+0x33e>
 8009de4:	f045 0510 	orr.w	r5, r5, #16
 8009de8:	e032      	b.n	8009e50 <__gethex+0x38c>
 8009dea:	f04f 0901 	mov.w	r9, #1
 8009dee:	e7d1      	b.n	8009d94 <__gethex+0x2d0>
 8009df0:	2501      	movs	r5, #1
 8009df2:	e7e2      	b.n	8009dba <__gethex+0x2f6>
 8009df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df6:	f1c3 0301 	rsb	r3, r3, #1
 8009dfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0f0      	beq.n	8009de4 <__gethex+0x320>
 8009e02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e06:	f104 0314 	add.w	r3, r4, #20
 8009e0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e12:	f04f 0c00 	mov.w	ip, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e20:	d01b      	beq.n	8009e5a <__gethex+0x396>
 8009e22:	3201      	adds	r2, #1
 8009e24:	6002      	str	r2, [r0, #0]
 8009e26:	2d02      	cmp	r5, #2
 8009e28:	f104 0314 	add.w	r3, r4, #20
 8009e2c:	d13c      	bne.n	8009ea8 <__gethex+0x3e4>
 8009e2e:	f8d8 2000 	ldr.w	r2, [r8]
 8009e32:	3a01      	subs	r2, #1
 8009e34:	42b2      	cmp	r2, r6
 8009e36:	d109      	bne.n	8009e4c <__gethex+0x388>
 8009e38:	1171      	asrs	r1, r6, #5
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e40:	f006 061f 	and.w	r6, r6, #31
 8009e44:	fa02 f606 	lsl.w	r6, r2, r6
 8009e48:	421e      	tst	r6, r3
 8009e4a:	d13a      	bne.n	8009ec2 <__gethex+0x3fe>
 8009e4c:	f045 0520 	orr.w	r5, r5, #32
 8009e50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e52:	601c      	str	r4, [r3, #0]
 8009e54:	9b02      	ldr	r3, [sp, #8]
 8009e56:	601f      	str	r7, [r3, #0]
 8009e58:	e6b0      	b.n	8009bbc <__gethex+0xf8>
 8009e5a:	4299      	cmp	r1, r3
 8009e5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e60:	d8d9      	bhi.n	8009e16 <__gethex+0x352>
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	459b      	cmp	fp, r3
 8009e66:	db17      	blt.n	8009e98 <__gethex+0x3d4>
 8009e68:	6861      	ldr	r1, [r4, #4]
 8009e6a:	9801      	ldr	r0, [sp, #4]
 8009e6c:	3101      	adds	r1, #1
 8009e6e:	f7fd fe59 	bl	8007b24 <_Balloc>
 8009e72:	4681      	mov	r9, r0
 8009e74:	b918      	cbnz	r0, 8009e7e <__gethex+0x3ba>
 8009e76:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee0 <__gethex+0x41c>)
 8009e78:	4602      	mov	r2, r0
 8009e7a:	2184      	movs	r1, #132	@ 0x84
 8009e7c:	e6c5      	b.n	8009c0a <__gethex+0x146>
 8009e7e:	6922      	ldr	r2, [r4, #16]
 8009e80:	3202      	adds	r2, #2
 8009e82:	f104 010c 	add.w	r1, r4, #12
 8009e86:	0092      	lsls	r2, r2, #2
 8009e88:	300c      	adds	r0, #12
 8009e8a:	f7fc ff9e 	bl	8006dca <memcpy>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	9801      	ldr	r0, [sp, #4]
 8009e92:	f7fd fe87 	bl	8007ba4 <_Bfree>
 8009e96:	464c      	mov	r4, r9
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ea0:	6122      	str	r2, [r4, #16]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	615a      	str	r2, [r3, #20]
 8009ea6:	e7be      	b.n	8009e26 <__gethex+0x362>
 8009ea8:	6922      	ldr	r2, [r4, #16]
 8009eaa:	455a      	cmp	r2, fp
 8009eac:	dd0b      	ble.n	8009ec6 <__gethex+0x402>
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f7ff fd9f 	bl	80099f4 <rshift>
 8009eb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eba:	3701      	adds	r7, #1
 8009ebc:	42bb      	cmp	r3, r7
 8009ebe:	f6ff aee0 	blt.w	8009c82 <__gethex+0x1be>
 8009ec2:	2501      	movs	r5, #1
 8009ec4:	e7c2      	b.n	8009e4c <__gethex+0x388>
 8009ec6:	f016 061f 	ands.w	r6, r6, #31
 8009eca:	d0fa      	beq.n	8009ec2 <__gethex+0x3fe>
 8009ecc:	4453      	add	r3, sl
 8009ece:	f1c6 0620 	rsb	r6, r6, #32
 8009ed2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ed6:	f7fd ff17 	bl	8007d08 <__hi0bits>
 8009eda:	42b0      	cmp	r0, r6
 8009edc:	dbe7      	blt.n	8009eae <__gethex+0x3ea>
 8009ede:	e7f0      	b.n	8009ec2 <__gethex+0x3fe>
 8009ee0:	0800a369 	.word	0x0800a369

08009ee4 <L_shift>:
 8009ee4:	f1c2 0208 	rsb	r2, r2, #8
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	b570      	push	{r4, r5, r6, lr}
 8009eec:	f1c2 0620 	rsb	r6, r2, #32
 8009ef0:	6843      	ldr	r3, [r0, #4]
 8009ef2:	6804      	ldr	r4, [r0, #0]
 8009ef4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ef8:	432c      	orrs	r4, r5
 8009efa:	40d3      	lsrs	r3, r2
 8009efc:	6004      	str	r4, [r0, #0]
 8009efe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f02:	4288      	cmp	r0, r1
 8009f04:	d3f4      	bcc.n	8009ef0 <L_shift+0xc>
 8009f06:	bd70      	pop	{r4, r5, r6, pc}

08009f08 <__match>:
 8009f08:	b530      	push	{r4, r5, lr}
 8009f0a:	6803      	ldr	r3, [r0, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f12:	b914      	cbnz	r4, 8009f1a <__match+0x12>
 8009f14:	6003      	str	r3, [r0, #0]
 8009f16:	2001      	movs	r0, #1
 8009f18:	bd30      	pop	{r4, r5, pc}
 8009f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f22:	2d19      	cmp	r5, #25
 8009f24:	bf98      	it	ls
 8009f26:	3220      	addls	r2, #32
 8009f28:	42a2      	cmp	r2, r4
 8009f2a:	d0f0      	beq.n	8009f0e <__match+0x6>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e7f3      	b.n	8009f18 <__match+0x10>

08009f30 <__hexnan>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	680b      	ldr	r3, [r1, #0]
 8009f36:	6801      	ldr	r1, [r0, #0]
 8009f38:	115e      	asrs	r6, r3, #5
 8009f3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f3e:	f013 031f 	ands.w	r3, r3, #31
 8009f42:	b087      	sub	sp, #28
 8009f44:	bf18      	it	ne
 8009f46:	3604      	addne	r6, #4
 8009f48:	2500      	movs	r5, #0
 8009f4a:	1f37      	subs	r7, r6, #4
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	4690      	mov	r8, r2
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f56:	46b9      	mov	r9, r7
 8009f58:	463c      	mov	r4, r7
 8009f5a:	9502      	str	r5, [sp, #8]
 8009f5c:	46ab      	mov	fp, r5
 8009f5e:	784a      	ldrb	r2, [r1, #1]
 8009f60:	1c4b      	adds	r3, r1, #1
 8009f62:	9303      	str	r3, [sp, #12]
 8009f64:	b342      	cbz	r2, 8009fb8 <__hexnan+0x88>
 8009f66:	4610      	mov	r0, r2
 8009f68:	9105      	str	r1, [sp, #20]
 8009f6a:	9204      	str	r2, [sp, #16]
 8009f6c:	f7ff fd94 	bl	8009a98 <__hexdig_fun>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d151      	bne.n	800a018 <__hexnan+0xe8>
 8009f74:	9a04      	ldr	r2, [sp, #16]
 8009f76:	9905      	ldr	r1, [sp, #20]
 8009f78:	2a20      	cmp	r2, #32
 8009f7a:	d818      	bhi.n	8009fae <__hexnan+0x7e>
 8009f7c:	9b02      	ldr	r3, [sp, #8]
 8009f7e:	459b      	cmp	fp, r3
 8009f80:	dd13      	ble.n	8009faa <__hexnan+0x7a>
 8009f82:	454c      	cmp	r4, r9
 8009f84:	d206      	bcs.n	8009f94 <__hexnan+0x64>
 8009f86:	2d07      	cmp	r5, #7
 8009f88:	dc04      	bgt.n	8009f94 <__hexnan+0x64>
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7ff ffa8 	bl	8009ee4 <L_shift>
 8009f94:	4544      	cmp	r4, r8
 8009f96:	d952      	bls.n	800a03e <__hexnan+0x10e>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f1a4 0904 	sub.w	r9, r4, #4
 8009f9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fa2:	f8cd b008 	str.w	fp, [sp, #8]
 8009fa6:	464c      	mov	r4, r9
 8009fa8:	461d      	mov	r5, r3
 8009faa:	9903      	ldr	r1, [sp, #12]
 8009fac:	e7d7      	b.n	8009f5e <__hexnan+0x2e>
 8009fae:	2a29      	cmp	r2, #41	@ 0x29
 8009fb0:	d157      	bne.n	800a062 <__hexnan+0x132>
 8009fb2:	3102      	adds	r1, #2
 8009fb4:	f8ca 1000 	str.w	r1, [sl]
 8009fb8:	f1bb 0f00 	cmp.w	fp, #0
 8009fbc:	d051      	beq.n	800a062 <__hexnan+0x132>
 8009fbe:	454c      	cmp	r4, r9
 8009fc0:	d206      	bcs.n	8009fd0 <__hexnan+0xa0>
 8009fc2:	2d07      	cmp	r5, #7
 8009fc4:	dc04      	bgt.n	8009fd0 <__hexnan+0xa0>
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f7ff ff8a 	bl	8009ee4 <L_shift>
 8009fd0:	4544      	cmp	r4, r8
 8009fd2:	d936      	bls.n	800a042 <__hexnan+0x112>
 8009fd4:	f1a8 0204 	sub.w	r2, r8, #4
 8009fd8:	4623      	mov	r3, r4
 8009fda:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fde:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fe2:	429f      	cmp	r7, r3
 8009fe4:	d2f9      	bcs.n	8009fda <__hexnan+0xaa>
 8009fe6:	1b3b      	subs	r3, r7, r4
 8009fe8:	f023 0303 	bic.w	r3, r3, #3
 8009fec:	3304      	adds	r3, #4
 8009fee:	3401      	adds	r4, #1
 8009ff0:	3e03      	subs	r6, #3
 8009ff2:	42b4      	cmp	r4, r6
 8009ff4:	bf88      	it	hi
 8009ff6:	2304      	movhi	r3, #4
 8009ff8:	4443      	add	r3, r8
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f843 2b04 	str.w	r2, [r3], #4
 800a000:	429f      	cmp	r7, r3
 800a002:	d2fb      	bcs.n	8009ffc <__hexnan+0xcc>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	b91b      	cbnz	r3, 800a010 <__hexnan+0xe0>
 800a008:	4547      	cmp	r7, r8
 800a00a:	d128      	bne.n	800a05e <__hexnan+0x12e>
 800a00c:	2301      	movs	r3, #1
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	2005      	movs	r0, #5
 800a012:	b007      	add	sp, #28
 800a014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a018:	3501      	adds	r5, #1
 800a01a:	2d08      	cmp	r5, #8
 800a01c:	f10b 0b01 	add.w	fp, fp, #1
 800a020:	dd06      	ble.n	800a030 <__hexnan+0x100>
 800a022:	4544      	cmp	r4, r8
 800a024:	d9c1      	bls.n	8009faa <__hexnan+0x7a>
 800a026:	2300      	movs	r3, #0
 800a028:	f844 3c04 	str.w	r3, [r4, #-4]
 800a02c:	2501      	movs	r5, #1
 800a02e:	3c04      	subs	r4, #4
 800a030:	6822      	ldr	r2, [r4, #0]
 800a032:	f000 000f 	and.w	r0, r0, #15
 800a036:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a03a:	6020      	str	r0, [r4, #0]
 800a03c:	e7b5      	b.n	8009faa <__hexnan+0x7a>
 800a03e:	2508      	movs	r5, #8
 800a040:	e7b3      	b.n	8009faa <__hexnan+0x7a>
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0dd      	beq.n	800a004 <__hexnan+0xd4>
 800a048:	f1c3 0320 	rsb	r3, r3, #32
 800a04c:	f04f 32ff 	mov.w	r2, #4294967295
 800a050:	40da      	lsrs	r2, r3
 800a052:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a056:	4013      	ands	r3, r2
 800a058:	f846 3c04 	str.w	r3, [r6, #-4]
 800a05c:	e7d2      	b.n	800a004 <__hexnan+0xd4>
 800a05e:	3f04      	subs	r7, #4
 800a060:	e7d0      	b.n	800a004 <__hexnan+0xd4>
 800a062:	2004      	movs	r0, #4
 800a064:	e7d5      	b.n	800a012 <__hexnan+0xe2>

0800a066 <__ascii_mbtowc>:
 800a066:	b082      	sub	sp, #8
 800a068:	b901      	cbnz	r1, 800a06c <__ascii_mbtowc+0x6>
 800a06a:	a901      	add	r1, sp, #4
 800a06c:	b142      	cbz	r2, 800a080 <__ascii_mbtowc+0x1a>
 800a06e:	b14b      	cbz	r3, 800a084 <__ascii_mbtowc+0x1e>
 800a070:	7813      	ldrb	r3, [r2, #0]
 800a072:	600b      	str	r3, [r1, #0]
 800a074:	7812      	ldrb	r2, [r2, #0]
 800a076:	1e10      	subs	r0, r2, #0
 800a078:	bf18      	it	ne
 800a07a:	2001      	movne	r0, #1
 800a07c:	b002      	add	sp, #8
 800a07e:	4770      	bx	lr
 800a080:	4610      	mov	r0, r2
 800a082:	e7fb      	b.n	800a07c <__ascii_mbtowc+0x16>
 800a084:	f06f 0001 	mvn.w	r0, #1
 800a088:	e7f8      	b.n	800a07c <__ascii_mbtowc+0x16>

0800a08a <_realloc_r>:
 800a08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08e:	4680      	mov	r8, r0
 800a090:	4615      	mov	r5, r2
 800a092:	460c      	mov	r4, r1
 800a094:	b921      	cbnz	r1, 800a0a0 <_realloc_r+0x16>
 800a096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a09a:	4611      	mov	r1, r2
 800a09c:	f7fb bce4 	b.w	8005a68 <_malloc_r>
 800a0a0:	b92a      	cbnz	r2, 800a0ae <_realloc_r+0x24>
 800a0a2:	f7fd fcf5 	bl	8007a90 <_free_r>
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ae:	f000 f840 	bl	800a132 <_malloc_usable_size_r>
 800a0b2:	4285      	cmp	r5, r0
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	d802      	bhi.n	800a0be <_realloc_r+0x34>
 800a0b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0bc:	d8f4      	bhi.n	800a0a8 <_realloc_r+0x1e>
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	f7fb fcd1 	bl	8005a68 <_malloc_r>
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0ec      	beq.n	800a0a6 <_realloc_r+0x1c>
 800a0cc:	42b5      	cmp	r5, r6
 800a0ce:	462a      	mov	r2, r5
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	bf28      	it	cs
 800a0d4:	4632      	movcs	r2, r6
 800a0d6:	f7fc fe78 	bl	8006dca <memcpy>
 800a0da:	4621      	mov	r1, r4
 800a0dc:	4640      	mov	r0, r8
 800a0de:	f7fd fcd7 	bl	8007a90 <_free_r>
 800a0e2:	463c      	mov	r4, r7
 800a0e4:	e7e0      	b.n	800a0a8 <_realloc_r+0x1e>

0800a0e6 <__ascii_wctomb>:
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	b141      	cbz	r1, 800a0fe <__ascii_wctomb+0x18>
 800a0ec:	2aff      	cmp	r2, #255	@ 0xff
 800a0ee:	d904      	bls.n	800a0fa <__ascii_wctomb+0x14>
 800a0f0:	228a      	movs	r2, #138	@ 0x8a
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	4770      	bx	lr
 800a0fa:	700a      	strb	r2, [r1, #0]
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	4770      	bx	lr

0800a100 <fiprintf>:
 800a100:	b40e      	push	{r1, r2, r3}
 800a102:	b503      	push	{r0, r1, lr}
 800a104:	4601      	mov	r1, r0
 800a106:	ab03      	add	r3, sp, #12
 800a108:	4805      	ldr	r0, [pc, #20]	@ (800a120 <fiprintf+0x20>)
 800a10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10e:	6800      	ldr	r0, [r0, #0]
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	f7ff f9c1 	bl	8009498 <_vfiprintf_r>
 800a116:	b002      	add	sp, #8
 800a118:	f85d eb04 	ldr.w	lr, [sp], #4
 800a11c:	b003      	add	sp, #12
 800a11e:	4770      	bx	lr
 800a120:	2000001c 	.word	0x2000001c

0800a124 <abort>:
 800a124:	b508      	push	{r3, lr}
 800a126:	2006      	movs	r0, #6
 800a128:	f000 f834 	bl	800a194 <raise>
 800a12c:	2001      	movs	r0, #1
 800a12e:	f7f7 fec9 	bl	8001ec4 <_exit>

0800a132 <_malloc_usable_size_r>:
 800a132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a136:	1f18      	subs	r0, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfbc      	itt	lt
 800a13c:	580b      	ldrlt	r3, [r1, r0]
 800a13e:	18c0      	addlt	r0, r0, r3
 800a140:	4770      	bx	lr

0800a142 <_raise_r>:
 800a142:	291f      	cmp	r1, #31
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4605      	mov	r5, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	d904      	bls.n	800a156 <_raise_r+0x14>
 800a14c:	2316      	movs	r3, #22
 800a14e:	6003      	str	r3, [r0, #0]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a158:	b112      	cbz	r2, 800a160 <_raise_r+0x1e>
 800a15a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a15e:	b94b      	cbnz	r3, 800a174 <_raise_r+0x32>
 800a160:	4628      	mov	r0, r5
 800a162:	f000 f831 	bl	800a1c8 <_getpid_r>
 800a166:	4622      	mov	r2, r4
 800a168:	4601      	mov	r1, r0
 800a16a:	4628      	mov	r0, r5
 800a16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a170:	f000 b818 	b.w	800a1a4 <_kill_r>
 800a174:	2b01      	cmp	r3, #1
 800a176:	d00a      	beq.n	800a18e <_raise_r+0x4c>
 800a178:	1c59      	adds	r1, r3, #1
 800a17a:	d103      	bne.n	800a184 <_raise_r+0x42>
 800a17c:	2316      	movs	r3, #22
 800a17e:	6003      	str	r3, [r0, #0]
 800a180:	2001      	movs	r0, #1
 800a182:	e7e7      	b.n	800a154 <_raise_r+0x12>
 800a184:	2100      	movs	r1, #0
 800a186:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a18a:	4620      	mov	r0, r4
 800a18c:	4798      	blx	r3
 800a18e:	2000      	movs	r0, #0
 800a190:	e7e0      	b.n	800a154 <_raise_r+0x12>
	...

0800a194 <raise>:
 800a194:	4b02      	ldr	r3, [pc, #8]	@ (800a1a0 <raise+0xc>)
 800a196:	4601      	mov	r1, r0
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	f7ff bfd2 	b.w	800a142 <_raise_r>
 800a19e:	bf00      	nop
 800a1a0:	2000001c 	.word	0x2000001c

0800a1a4 <_kill_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d07      	ldr	r5, [pc, #28]	@ (800a1c4 <_kill_r+0x20>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	f7f7 fe77 	bl	8001ea4 <_kill>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d102      	bne.n	800a1c0 <_kill_r+0x1c>
 800a1ba:	682b      	ldr	r3, [r5, #0]
 800a1bc:	b103      	cbz	r3, 800a1c0 <_kill_r+0x1c>
 800a1be:	6023      	str	r3, [r4, #0]
 800a1c0:	bd38      	pop	{r3, r4, r5, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000594 	.word	0x20000594

0800a1c8 <_getpid_r>:
 800a1c8:	f7f7 be64 	b.w	8001e94 <_getpid>

0800a1cc <_init>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <_fini>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr
