
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800a2c0  0800a2c0  0000b2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7b8  0800a7b8  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7b8  0800a7b8  0000b7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c0  0800a7c0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c0  0800a7c0  0000b7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7c4  0800a7c4  0000b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a7c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001d8  0800a9a0  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800a9a0  0000c59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123b5  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026dc  00000000  00000000  0001e5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00020ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b73  00000000  00000000  00021b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b631  00000000  00000000  000226eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013158  00000000  00000000  0004dd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d3b  00000000  00000000  00060e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165baf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052dc  00000000  00000000  00165bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a2a4 	.word	0x0800a2a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	0800a2a4 	.word	0x0800a2a4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4804      	ldr	r0, [pc, #16]	@ (800103c <_write+0x28>)
 800102c:	f003 feac 	bl	8004d88 <HAL_UART_Transmit>
	return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000248 	.word	0x20000248

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f001 f854 	bl	80020f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f905 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f9e1 	bl	8001414 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001052:	f000 f993 	bl	800137c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001056:	f000 f951 	bl	80012fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lastBeat = HAL_GetTick();
 800105a:	f001 f8b3 	bl	80021c4 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	4a70      	ldr	r2, [pc, #448]	@ (8001224 <main+0x1e4>)
 8001062:	6013      	str	r3, [r2, #0]
  beatsPerMinute = 0;
 8001064:	4b70      	ldr	r3, [pc, #448]	@ (8001228 <main+0x1e8>)
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < RATE_SIZE; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	77fb      	strb	r3, [r7, #31]
 8001070:	e006      	b.n	8001080 <main+0x40>
      rates[i] = 0;
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	4a6d      	ldr	r2, [pc, #436]	@ (800122c <main+0x1ec>)
 8001076:	2100      	movs	r1, #0
 8001078:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < RATE_SIZE; i++) {
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	3301      	adds	r3, #1
 800107e:	77fb      	strb	r3, [r7, #31]
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d9f5      	bls.n	8001072 <main+0x32>
  }
  rateSpot = 0;
 8001086:	4b6a      	ldr	r3, [pc, #424]	@ (8001230 <main+0x1f0>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
  beatAvg = 0;
 800108c:	4b69      	ldr	r3, [pc, #420]	@ (8001234 <main+0x1f4>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
  // Initialize sensor
  max30102_init(&max30102, &hi2c1);
 8001092:	4969      	ldr	r1, [pc, #420]	@ (8001238 <main+0x1f8>)
 8001094:	4869      	ldr	r0, [pc, #420]	@ (800123c <main+0x1fc>)
 8001096:	f000 fa10 	bl	80014ba <max30102_init>


  // Reset sensor and clear FIFO
  max30102_reset(&max30102);
 800109a:	4868      	ldr	r0, [pc, #416]	@ (800123c <main+0x1fc>)
 800109c:	f000 fa84 	bl	80015a8 <max30102_reset>
  max30102_clear_fifo(&max30102);
 80010a0:	4866      	ldr	r0, [pc, #408]	@ (800123c <main+0x1fc>)
 80010a2:	f000 fc43 	bl	800192c <max30102_clear_fifo>

  // Configure FIFO settings
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 80010a6:	2307      	movs	r3, #7
 80010a8:	2201      	movs	r2, #1
 80010aa:	2103      	movs	r1, #3
 80010ac:	4863      	ldr	r0, [pc, #396]	@ (800123c <main+0x1fc>)
 80010ae:	f000 fc03 	bl	80018b8 <max30102_set_fifo_config>

  // Configure LED settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80010b2:	2101      	movs	r1, #1
 80010b4:	4861      	ldr	r0, [pc, #388]	@ (800123c <main+0x1fc>)
 80010b6:	f000 fb66 	bl	8001786 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80010ba:	2100      	movs	r1, #0
 80010bc:	485f      	ldr	r0, [pc, #380]	@ (800123c <main+0x1fc>)
 80010be:	f000 fb85 	bl	80017cc <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80010c2:	2104      	movs	r1, #4
 80010c4:	485d      	ldr	r0, [pc, #372]	@ (800123c <main+0x1fc>)
 80010c6:	f000 fb3a 	bl	800173e <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 80010ca:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8001240 <main+0x200>
 80010ce:	485b      	ldr	r0, [pc, #364]	@ (800123c <main+0x1fc>)
 80010d0:	f000 fba2 	bl	8001818 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 80010d4:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8001240 <main+0x200>
 80010d8:	4858      	ldr	r0, [pc, #352]	@ (800123c <main+0x1fc>)
 80010da:	f000 fbc5 	bl	8001868 <max30102_set_led_current_2>

  // Enter SpO2 measurement mode
  max30102_set_mode(&max30102, max30102_spo2);
 80010de:	2103      	movs	r1, #3
 80010e0:	4856      	ldr	r0, [pc, #344]	@ (800123c <main+0x1fc>)
 80010e2:	f000 fb06 	bl	80016f2 <max30102_set_mode>

  // Enable interrupts
  max30102_set_a_full(&max30102, 1);
 80010e6:	2101      	movs	r1, #1
 80010e8:	4854      	ldr	r0, [pc, #336]	@ (800123c <main+0x1fc>)
 80010ea:	f000 fa6e 	bl	80015ca <max30102_set_a_full>
  max30102_set_die_temp_en(&max30102, 1);
 80010ee:	2101      	movs	r1, #1
 80010f0:	4852      	ldr	r0, [pc, #328]	@ (800123c <main+0x1fc>)
 80010f2:	f000 faaa 	bl	800164a <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 80010f6:	2101      	movs	r1, #1
 80010f8:	4850      	ldr	r0, [pc, #320]	@ (800123c <main+0x1fc>)
 80010fa:	f000 fa8e 	bl	800161a <max30102_set_die_temp_rdy>

  printf("MAX30102 initialized and configured\r\n");
 80010fe:	4851      	ldr	r0, [pc, #324]	@ (8001244 <main+0x204>)
 8001100:	f005 fd42 	bl	8006b88 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Process the interrupt
	      max30102_interrupt_handler(&max30102);
 8001104:	484d      	ldr	r0, [pc, #308]	@ (800123c <main+0x1fc>)
 8001106:	f000 fac6 	bl	8001696 <max30102_interrupt_handler>

	      // Read data from FIFO
	      max30102_read_fifo(&max30102);
 800110a:	484c      	ldr	r0, [pc, #304]	@ (800123c <main+0x1fc>)
 800110c:	f000 fc2d 	bl	800196a <max30102_read_fifo>

	      // Access the data from the max30102 object
	      // The first sample in each array is the most recent
	      uint32_t ir_sample = max30102._ir_samples[0];
 8001110:	4b4a      	ldr	r3, [pc, #296]	@ (800123c <main+0x1fc>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
	      uint32_t red_sample = max30102._red_samples[0];
 8001116:	4b49      	ldr	r3, [pc, #292]	@ (800123c <main+0x1fc>)
 8001118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800111c:	617b      	str	r3, [r7, #20]

	      // Check for heartbeat

	      if (checkForBeat(ir_sample) == true)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fc9d 	bl	8001a60 <checkForBeat>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d077      	beq.n	800121c <main+0x1dc>
	      {
	          // We sensed a beat!
	          uint32_t currentTime = HAL_GetTick();
 800112c:	f001 f84a 	bl	80021c4 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]
	          uint32_t delta = currentTime - lastBeat;
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <main+0x1e4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	60fb      	str	r3, [r7, #12]
	          lastBeat = currentTime;
 800113c:	4a39      	ldr	r2, [pc, #228]	@ (8001224 <main+0x1e4>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6013      	str	r3, [r2, #0]

	          beatsPerMinute = 60 / (delta / 1000.0);
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff f9f6 	bl	8000534 <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b3e      	ldr	r3, [pc, #248]	@ (8001248 <main+0x208>)
 800114e:	f7ff fb95 	bl	800087c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	493c      	ldr	r1, [pc, #240]	@ (800124c <main+0x20c>)
 800115c:	f7ff fb8e 	bl	800087c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd56 	bl	8000c18 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	4a2e      	ldr	r2, [pc, #184]	@ (8001228 <main+0x1e8>)
 8001170:	6013      	str	r3, [r2, #0]

	          if (beatsPerMinute < 255 && beatsPerMinute > 20)
 8001172:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <main+0x1e8>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001250 <main+0x210>
 800117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d54a      	bpl.n	800121c <main+0x1dc>
 8001186:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <main+0x1e8>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	dd40      	ble.n	800121c <main+0x1dc>
	          {
	              rates[rateSpot++] = (uint8_t)beatsPerMinute; // Store this reading in the array
 800119a:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <main+0x1e8>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <main+0x1f0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	b2d1      	uxtb	r1, r2
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <main+0x1f0>)
 80011aa:	7011      	strb	r1, [r2, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80011b6:	793b      	ldrb	r3, [r7, #4]
 80011b8:	b2d9      	uxtb	r1, r3
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <main+0x1ec>)
 80011bc:	5499      	strb	r1, [r3, r2]
	              rateSpot %= RATE_SIZE; // Wrap variable
 80011be:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <main+0x1f0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <main+0x1f0>)
 80011ca:	701a      	strb	r2, [r3, #0]

	              // Take average of readings
	              beatAvg = 0;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <main+0x1f4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	              for (uint8_t x = 0; x < RATE_SIZE; x++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	77bb      	strb	r3, [r7, #30]
 80011d6:	e00b      	b.n	80011f0 <main+0x1b0>
	                  beatAvg += rates[x];
 80011d8:	7fbb      	ldrb	r3, [r7, #30]
 80011da:	4a14      	ldr	r2, [pc, #80]	@ (800122c <main+0x1ec>)
 80011dc:	5cd2      	ldrb	r2, [r2, r3]
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <main+0x1f4>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <main+0x1f4>)
 80011e8:	701a      	strb	r2, [r3, #0]
	              for (uint8_t x = 0; x < RATE_SIZE; x++)
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	3301      	adds	r3, #1
 80011ee:	77bb      	strb	r3, [r7, #30]
 80011f0:	7fbb      	ldrb	r3, [r7, #30]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d9f0      	bls.n	80011d8 <main+0x198>
	              beatAvg /= RATE_SIZE;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <main+0x1f4>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <main+0x1f4>)
 8001200:	701a      	strb	r2, [r3, #0]

	              // Print heart rate information
	              printf("BPM: %.1f, Avg BPM: %u\r\n", beatsPerMinute, beatAvg);
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <main+0x1e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9b6 	bl	8000578 <__aeabi_f2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4908      	ldr	r1, [pc, #32]	@ (8001234 <main+0x1f4>)
 8001212:	7809      	ldrb	r1, [r1, #0]
 8001214:	9100      	str	r1, [sp, #0]
 8001216:	480f      	ldr	r0, [pc, #60]	@ (8001254 <main+0x214>)
 8001218:	f005 fc4e 	bl	8006ab8 <iprintf>
	          }
	      }

	    HAL_Delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f000 ffdd 	bl	80021dc <HAL_Delay>
  {
 8001222:	e76f      	b.n	8001104 <main+0xc4>
 8001224:	200003e4 	.word	0x200003e4
 8001228:	200003e8 	.word	0x200003e8
 800122c:	200003ec 	.word	0x200003ec
 8001230:	200003f0 	.word	0x200003f0
 8001234:	200003f1 	.word	0x200003f1
 8001238:	200001f4 	.word	0x200001f4
 800123c:	200002dc 	.word	0x200002dc
 8001240:	40c66666 	.word	0x40c66666
 8001244:	0800a2c0 	.word	0x0800a2c0
 8001248:	408f4000 	.word	0x408f4000
 800124c:	404e0000 	.word	0x404e0000
 8001250:	437f0000 	.word	0x437f0000
 8001254:	0800a2e8 	.word	0x0800a2e8

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b096      	sub	sp, #88	@ 0x58
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2244      	movs	r2, #68	@ 0x44
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f005 fd8e 	bl	8006d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800127a:	2000      	movs	r0, #0
 800127c:	f002 f8a0 	bl	80033c0 <HAL_PWREx_ControlVoltageScaling>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001286:	f000 f907 	bl	8001498 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800128a:	2310      	movs	r3, #16
 800128c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001296:	2360      	movs	r3, #96	@ 0x60
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800129e:	2301      	movs	r3, #1
 80012a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80012a6:	233c      	movs	r3, #60	@ 0x3c
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 f924 	bl	8003508 <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012c6:	f000 f8e7 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2303      	movs	r3, #3
 80012d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2105      	movs	r1, #5
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fd2a 	bl	8003d3c <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ee:	f000 f8d3 	bl	8001498 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3758      	adds	r7, #88	@ 0x58
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	@ (8001374 <MX_I2C1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <MX_I2C1_Init+0x7c>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001336:	480e      	ldr	r0, [pc, #56]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001338:	f001 fa3b 	bl	80027b2 <HAL_I2C_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001342:	f000 f8a9 	bl	8001498 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <MX_I2C1_Init+0x74>)
 800134a:	f001 ff81 	bl	8003250 <HAL_I2CEx_ConfigAnalogFilter>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001354:	f000 f8a0 	bl	8001498 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_I2C1_Init+0x74>)
 800135c:	f001 ffc3 	bl	80032e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 f897 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001f4 	.word	0x200001f4
 8001374:	40005400 	.word	0x40005400
 8001378:	30a175ab 	.word	0x30a175ab

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <MX_USART1_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_USART1_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_USART1_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013c6:	f003 fc8f 	bl	8004ce8 <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f000 f862 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013d8:	f004 fab8 	bl	800594c <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 f859 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013ea:	f004 faed 	bl	80059c8 <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 f850 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_USART1_UART_Init+0x90>)
 80013fa:	f004 fa6e 	bl	80058da <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f000 f848 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000248 	.word	0x20000248
 8001410:	40013800 	.word	0x40013800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <MX_GPIO_Init+0x7c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <MX_GPIO_Init+0x7c>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_GPIO_Init+0x7c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <MX_GPIO_Init+0x7c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_GPIO_Init+0x7c>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <MX_GPIO_Init+0x7c>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800145a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001460:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001472:	f000 ffe9 	bl	8002448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2028      	movs	r0, #40	@ 0x28
 800147c:	f000 ffad 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001480:	2028      	movs	r0, #40	@ 0x28
 8001482:	f000 ffc6 	bl	8002412 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	48000c00 	.word	0x48000c00

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <max30102_plot>:
 * @note Override this in your main.c if you do not use printf() for printing.
 * @param ir_sample
 * @param red_sample
 */
__weak void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    UNUSED(ir_sample);
    UNUSED(red_sample);
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fc54 	bl	8006d88 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3384      	adds	r3, #132	@ 0x84
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f005 fc4d 	bl	8006d88 <memset>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b088      	sub	sp, #32
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	461a      	mov	r2, r3
 8001502:	460b      	mov	r3, r1
 8001504:	72fb      	strb	r3, [r7, #11]
 8001506:	4613      	mov	r3, r2
 8001508:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800150a:	893b      	ldrh	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fae6 	bl	8005ae0 <malloc>
 8001514:	4603      	mov	r3, r0
 8001516:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	7afa      	ldrb	r2, [r7, #11]
 800151c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <max30102_write+0x42>
 8001524:	893b      	ldrh	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	893a      	ldrh	r2, [r7, #8]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fcb7 	bl	8006ea6 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	893b      	ldrh	r3, [r7, #8]
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	21ae      	movs	r1, #174	@ 0xae
 800154c:	f001 f9cc 	bl	80028e8 <HAL_I2C_Master_Transmit>
    free(payload);
 8001550:	6978      	ldr	r0, [r7, #20]
 8001552:	f004 facd 	bl	8005af0 <free>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b088      	sub	sp, #32
 8001562:	af02      	add	r7, sp, #8
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	460b      	mov	r3, r1
 800156c:	72fb      	strb	r3, [r7, #11]
 800156e:	4613      	mov	r3, r2
 8001570:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	f107 0217 	add.w	r2, r7, #23
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	21ae      	movs	r1, #174	@ 0xae
 8001588:	f001 f9ae 	bl	80028e8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	893b      	ldrh	r3, [r7, #8]
 8001592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	21ae      	movs	r1, #174	@ 0xae
 800159c:	f001 fabc 	bl	8002b18 <HAL_I2C_Master_Receive>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80015b0:	2340      	movs	r3, #64	@ 0x40
 80015b2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80015b4:	f107 020f 	add.w	r2, r7, #15
 80015b8:	2301      	movs	r3, #1
 80015ba:	2109      	movs	r1, #9
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff9a 	bl	80014f6 <max30102_write>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80015da:	f107 020f 	add.w	r2, r7, #15
 80015de:	2301      	movs	r3, #1
 80015e0:	2102      	movs	r1, #2
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffbb 	bl	800155e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 80015f2:	78fb      	ldrb	r3, [r7, #3]
 80015f4:	01db      	lsls	r3, r3, #7
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001604:	f107 020f 	add.w	r2, r7, #15
 8001608:	2301      	movs	r3, #1
 800160a:	2102      	movs	r1, #2
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff72 	bl	80014f6 <max30102_write>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8001634:	f107 020f 	add.w	r2, r7, #15
 8001638:	2301      	movs	r3, #1
 800163a:	2103      	movs	r1, #3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff5a 	bl	80014f6 <max30102_write>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8001664:	f107 020f 	add.w	r2, r7, #15
 8001668:	2301      	movs	r3, #1
 800166a:	2121      	movs	r1, #33	@ 0x21
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff42 	bl	80014f6 <max30102_write>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800169e:	2300      	movs	r3, #0
 80016a0:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	2302      	movs	r3, #2
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff57 	bl	800155e <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 80016b0:	7b3b      	ldrb	r3, [r7, #12]
 80016b2:	09db      	lsrs	r3, r3, #7
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f953 	bl	800196a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80016c4:	7b7b      	ldrb	r3, [r7, #13]
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 80016d2:	f107 020a 	add.w	r2, r7, #10
 80016d6:	f107 030b 	add.w	r3, r7, #11
 80016da:	4619      	mov	r1, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f9a9 	bl	8001a34 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80016fe:	f107 020f 	add.w	r2, r7, #15
 8001702:	2301      	movs	r3, #1
 8001704:	2109      	movs	r1, #9
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff29 	bl	800155e <max30102_read>
    config = (config & 0xf8) | mode;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f023 0307 	bic.w	r3, r3, #7
 8001714:	b25a      	sxtb	r2, r3
 8001716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800171a:	4313      	orrs	r3, r2
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001722:	f107 020f 	add.w	r2, r7, #15
 8001726:	2301      	movs	r3, #1
 8001728:	2109      	movs	r1, #9
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fee3 	bl	80014f6 <max30102_write>
    max30102_clear_fifo(obj);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8fb 	bl	800192c <max30102_clear_fifo>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800174a:	f107 020f 	add.w	r2, r7, #15
 800174e:	2301      	movs	r3, #1
 8001750:	210a      	movs	r1, #10
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff03 	bl	800155e <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 8001760:	b25a      	sxtb	r2, r3
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b25b      	sxtb	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001770:	f107 020f 	add.w	r2, r7, #15
 8001774:	2301      	movs	r3, #1
 8001776:	210a      	movs	r1, #10
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff febc 	bl	80014f6 <max30102_write>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001792:	f107 020f 	add.w	r2, r7, #15
 8001796:	2301      	movs	r3, #1
 8001798:	210a      	movs	r1, #10
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fedf 	bl	800155e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80017b6:	f107 020f 	add.w	r2, r7, #15
 80017ba:	2301      	movs	r3, #1
 80017bc:	210a      	movs	r1, #10
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe99 	bl	80014f6 <max30102_write>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80017d8:	f107 020f 	add.w	r2, r7, #15
 80017dc:	2301      	movs	r3, #1
 80017de:	210a      	movs	r1, #10
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff febc 	bl	800155e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	015b      	lsls	r3, r3, #5
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80017fe:	f107 020f 	add.w	r2, r7, #15
 8001802:	2301      	movs	r3, #1
 8001804:	210a      	movs	r1, #10
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fe75 	bl	80014f6 <max30102_write>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	0000      	movs	r0, r0
	...

08001818 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8001824:	6838      	ldr	r0, [r7, #0]
 8001826:	f7fe fea7 	bl	8000578 <__aeabi_f2d>
 800182a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001860 <max30102_set_led_current_1+0x48>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7ff f824 	bl	800087c <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f9cc 	bl	8000bd8 <__aeabi_d2uiz>
 8001840:	4603      	mov	r3, r0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8001846:	f107 020f 	add.w	r2, r7, #15
 800184a:	2301      	movs	r3, #1
 800184c:	210c      	movs	r1, #12
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fe51 	bl	80014f6 <max30102_write>
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	f3af 8000 	nop.w
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fc99999 	.word	0x3fc99999

08001868 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8001874:	6838      	ldr	r0, [r7, #0]
 8001876:	f7fe fe7f 	bl	8000578 <__aeabi_f2d>
 800187a:	a30d      	add	r3, pc, #52	@ (adr r3, 80018b0 <max30102_set_led_current_2+0x48>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe fffc 	bl	800087c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f9a4 	bl	8000bd8 <__aeabi_d2uiz>
 8001890:	4603      	mov	r3, r0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8001896:	f107 020f 	add.w	r2, r7, #15
 800189a:	2301      	movs	r3, #1
 800189c:	210d      	movs	r1, #13
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fe29 	bl	80014f6 <max30102_write>
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	9999999a 	.word	0x9999999a
 80018b4:	3fc99999 	.word	0x3fc99999

080018b8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	70fb      	strb	r3, [r7, #3]
 80018ca:	460b      	mov	r3, r1
 80018cc:	70bb      	strb	r3, [r7, #2]
 80018ce:	4613      	mov	r3, r2
 80018d0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	b25a      	sxtb	r2, r3
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80018e8:	78bb      	ldrb	r3, [r7, #2]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001900:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	b25a      	sxtb	r2, r3
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b25b      	sxtb	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8001916:	f107 020f 	add.w	r2, r7, #15
 800191a:	2301      	movs	r3, #1
 800191c:	2108      	movs	r1, #8
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fde9 	bl	80014f6 <max30102_write>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001938:	f107 020f 	add.w	r2, r7, #15
 800193c:	2303      	movs	r3, #3
 800193e:	2104      	movs	r1, #4
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fdd8 	bl	80014f6 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8001946:	f107 020f 	add.w	r2, r7, #15
 800194a:	2303      	movs	r3, #3
 800194c:	2106      	movs	r1, #6
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fdd1 	bl	80014f6 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8001954:	f107 020f 	add.w	r2, r7, #15
 8001958:	2303      	movs	r3, #3
 800195a:	2105      	movs	r1, #5
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fdca 	bl	80014f6 <max30102_write>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b088      	sub	sp, #32
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	74fb      	strb	r3, [r7, #19]
 8001976:	2300      	movs	r3, #0
 8001978:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800197a:	f107 0213 	add.w	r2, r7, #19
 800197e:	2301      	movs	r3, #1
 8001980:	2104      	movs	r1, #4
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fdeb 	bl	800155e <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001988:	f107 0212 	add.w	r2, r7, #18
 800198c:	2301      	movs	r3, #1
 800198e:	2106      	movs	r1, #6
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fde4 	bl	800155e <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8001996:	7cfa      	ldrb	r2, [r7, #19]
 8001998:	7cbb      	ldrb	r3, [r7, #18]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 80019a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dc03      	bgt.n	80019b0 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	3320      	adds	r3, #32
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	77bb      	strb	r3, [r7, #30]
 80019b4:	e033      	b.n	8001a1e <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	2306      	movs	r3, #6
 80019bc:	2107      	movs	r1, #7
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fdcd 	bl	800155e <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	041a      	lsls	r2, r3, #16
 80019c8:	7b7b      	ldrb	r3, [r7, #13]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4313      	orrs	r3, r2
 80019ce:	7bba      	ldrb	r2, [r7, #14]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80019d6:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	7c3b      	ldrb	r3, [r7, #16]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4313      	orrs	r3, r2
 80019e2:	7c7a      	ldrb	r2, [r7, #17]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80019ea:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80019ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80019fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3320      	adds	r3, #32
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8001a0a:	6979      	ldr	r1, [r7, #20]
 8001a0c:	69b8      	ldr	r0, [r7, #24]
 8001a0e:	f7ff fd49 	bl	80014a4 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8001a12:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	77bb      	strb	r3, [r7, #30]
 8001a1e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001a22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbc5      	blt.n	80019b6 <max30102_read_fifo+0x4c>
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001a40:	2301      	movs	r3, #1
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	211f      	movs	r1, #31
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fd89 	bl	800155e <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	2120      	movs	r1, #32
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fd83 	bl	800155e <max30102_read>
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <checkForBeat>:
int16_t lowPassFIRFilter(int16_t din);
int32_t mul16(int16_t x, int16_t y);

// Function to check for a heartbeat
bool checkForBeat(int32_t sample)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    bool beatDetected = false;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

    IR_AC_Signal_Previous = IR_AC_Signal_Current;
 8001a6c:	4b47      	ldr	r3, [pc, #284]	@ (8001b8c <checkForBeat+0x12c>)
 8001a6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a72:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <checkForBeat+0x130>)
 8001a74:	801a      	strh	r2, [r3, #0]

    IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, (uint16_t)sample);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4845      	ldr	r0, [pc, #276]	@ (8001b94 <checkForBeat+0x134>)
 8001a7e:	f000 f899 	bl	8001bb4 <averageDCEstimator>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <checkForBeat+0x138>)
 8001a88:	801a      	strh	r2, [r3, #0]
    IR_AC_Signal_Current = lowPassFIRFilter((int16_t)(sample - IR_Average_Estimated));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b42      	ldr	r3, [pc, #264]	@ (8001b98 <checkForBeat+0x138>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f8a5 	bl	8001bec <lowPassFIRFilter>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b39      	ldr	r3, [pc, #228]	@ (8001b8c <checkForBeat+0x12c>)
 8001aa8:	801a      	strh	r2, [r3, #0]

    // Detect positive zero crossing (rising edge)
    if ((IR_AC_Signal_Previous < 0) && (IR_AC_Signal_Current >= 0))
 8001aaa:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <checkForBeat+0x130>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da2e      	bge.n	8001b12 <checkForBeat+0xb2>
 8001ab4:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <checkForBeat+0x12c>)
 8001ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db29      	blt.n	8001b12 <checkForBeat+0xb2>

    {
        IR_AC_Max = IR_AC_Signal_max;
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <checkForBeat+0x13c>)
 8001ac0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ac4:	4b36      	ldr	r3, [pc, #216]	@ (8001ba0 <checkForBeat+0x140>)
 8001ac6:	801a      	strh	r2, [r3, #0]
        IR_AC_Min = IR_AC_Signal_min;
 8001ac8:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <checkForBeat+0x144>)
 8001aca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <checkForBeat+0x148>)
 8001ad0:	801a      	strh	r2, [r3, #0]

        positiveEdge = 1;
 8001ad2:	4b36      	ldr	r3, [pc, #216]	@ (8001bac <checkForBeat+0x14c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	801a      	strh	r2, [r3, #0]
        negativeEdge = 0;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	@ (8001bb0 <checkForBeat+0x150>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
        IR_AC_Signal_max = 0;
 8001ade:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <checkForBeat+0x13c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]

        if ((IR_AC_Max - IR_AC_Min) > 20 && (IR_AC_Max - IR_AC_Min) < 1000)
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba0 <checkForBeat+0x140>)
 8001ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <checkForBeat+0x148>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b14      	cmp	r3, #20
 8001af6:	dd0c      	ble.n	8001b12 <checkForBeat+0xb2>
 8001af8:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <checkForBeat+0x140>)
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <checkForBeat+0x148>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b0c:	da01      	bge.n	8001b12 <checkForBeat+0xb2>
        {
            beatDetected = true;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
        }
    }

    // Detect negative zero crossing (falling edge)
    if ((IR_AC_Signal_Previous > 0) && (IR_AC_Signal_Current <= 0))
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <checkForBeat+0x130>)
 8001b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	dd0d      	ble.n	8001b38 <checkForBeat+0xd8>
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <checkForBeat+0x12c>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dc08      	bgt.n	8001b38 <checkForBeat+0xd8>
    {
        positiveEdge = 0;
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <checkForBeat+0x14c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
        negativeEdge = 1;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <checkForBeat+0x150>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	801a      	strh	r2, [r3, #0]
        IR_AC_Signal_min = 0;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <checkForBeat+0x144>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	801a      	strh	r2, [r3, #0]
    }

    // Find maximum in positive cycle
    if (positiveEdge && (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <checkForBeat+0x14c>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <checkForBeat+0xfc>
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <checkForBeat+0x12c>)
 8001b44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <checkForBeat+0x130>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	dd04      	ble.n	8001b5c <checkForBeat+0xfc>
    {
        IR_AC_Signal_max = IR_AC_Signal_Current;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <checkForBeat+0x12c>)
 8001b54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <checkForBeat+0x13c>)
 8001b5a:	801a      	strh	r2, [r3, #0]
    }

    // Find minimum in negative cycle
    if (negativeEdge && (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <checkForBeat+0x150>)
 8001b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <checkForBeat+0x120>
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <checkForBeat+0x12c>)
 8001b68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <checkForBeat+0x130>)
 8001b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	da04      	bge.n	8001b80 <checkForBeat+0x120>
    {
        IR_AC_Signal_min = IR_AC_Signal_Current;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <checkForBeat+0x12c>)
 8001b78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <checkForBeat+0x144>)
 8001b7e:	801a      	strh	r2, [r3, #0]
    }

    return beatDetected;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200003f2 	.word	0x200003f2
 8001b90:	200003f4 	.word	0x200003f4
 8001b94:	20000400 	.word	0x20000400
 8001b98:	200003fa 	.word	0x200003fa
 8001b9c:	200003f8 	.word	0x200003f8
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	200003f6 	.word	0x200003f6
 8001ba8:	20000002 	.word	0x20000002
 8001bac:	200003fc 	.word	0x200003fc
 8001bb0:	200003fe 	.word	0x200003fe

08001bb4 <averageDCEstimator>:

// DC average estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
    *p += (((int32_t)x << 15) - *p) >> 4;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	03d9      	lsls	r1, r3, #15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1acb      	subs	r3, r1, r3
 8001bce:	111b      	asrs	r3, r3, #4
 8001bd0:	441a      	add	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
    return (int16_t)(*p >> 15);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	13db      	asrs	r3, r3, #15
 8001bdc:	b21b      	sxth	r3, r3
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <lowPassFIRFilter>:

// FIR Low-pass filter
int16_t lowPassFIRFilter(int16_t din)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
    cbuf[offset] = din;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <lowPassFIRFilter+0xc0>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb0 <lowPassFIRFilter+0xc4>)
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

    int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 8001c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <lowPassFIRFilter+0xc0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3b0b      	subs	r3, #11
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	4926      	ldr	r1, [pc, #152]	@ (8001cb0 <lowPassFIRFilter+0xc4>)
 8001c16:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f000 f84b 	bl	8001cb8 <mul16>
 8001c22:	60f8      	str	r0, [r7, #12]

    for (uint8_t i = 0; i < 11; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	72fb      	strb	r3, [r7, #11]
 8001c28:	e028      	b.n	8001c7c <lowPassFIRFilter+0x90>
    {
        z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	4a21      	ldr	r2, [pc, #132]	@ (8001cb4 <lowPassFIRFilter+0xc8>)
 8001c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c32:	b218      	sxth	r0, r3
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <lowPassFIRFilter+0xc0>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <lowPassFIRFilter+0xc4>)
 8001c44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <lowPassFIRFilter+0xc0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f1a3 0116 	sub.w	r1, r3, #22
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	440b      	add	r3, r1
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	4915      	ldr	r1, [pc, #84]	@ (8001cb0 <lowPassFIRFilter+0xc4>)
 8001c5c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f000 f825 	bl	8001cb8 <mul16>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 11; i++)
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	72fb      	strb	r3, [r7, #11]
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
 8001c7e:	2b0a      	cmp	r3, #10
 8001c80:	d9d3      	bls.n	8001c2a <lowPassFIRFilter+0x3e>
    }

    offset = (offset + 1) % 32;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <lowPassFIRFilter+0xc0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	425a      	negs	r2, r3
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	bf58      	it	pl
 8001c94:	4253      	negpl	r3, r2
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <lowPassFIRFilter+0xc0>)
 8001c9a:	701a      	strb	r2, [r3, #0]

    return (int16_t)(z >> 15);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	13db      	asrs	r3, r3, #15
 8001ca0:	b21b      	sxth	r3, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000444 	.word	0x20000444
 8001cb0:	20000404 	.word	0x20000404
 8001cb4:	0800a304 	.word	0x0800a304

08001cb8 <mul16>:

// Integer multiplication helper
int32_t mul16(int16_t x, int16_t y)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	80bb      	strh	r3, [r7, #4]
    return (int32_t)x * (int32_t)y;
 8001cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ccc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_MspInit+0x44>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	4a0e      	ldr	r2, [pc, #56]	@ (8001d24 <HAL_MspInit+0x44>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <HAL_MspInit+0x44>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_MspInit+0x44>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <HAL_MspInit+0x44>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_MspInit+0x44>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	2294      	movs	r2, #148	@ 0x94
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 f81d 	bl	8006d88 <memset>
  if(hi2c->Instance==I2C1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <HAL_I2C_MspInit+0xb0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d13b      	bne.n	8001dd0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d58:	2340      	movs	r3, #64	@ 0x40
 8001d5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 faa7 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d70:	f7ff fb92 	bl	8001498 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d78:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d80:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da6:	2304      	movs	r3, #4
 8001da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001db4:	f000 fb48 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	37b8      	adds	r7, #184	@ 0xb8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0ae      	sub	sp, #184	@ 0xb8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2294      	movs	r2, #148	@ 0x94
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 ffbf 	bl	8006d88 <memset>
  if(huart->Instance==USART1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <HAL_UART_MspInit+0xb0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d13a      	bne.n	8001e8a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 fa49 	bl	80042b8 <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e2c:	f7ff fb34 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_UART_MspInit+0xb4>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e34:	4a18      	ldr	r2, [pc, #96]	@ (8001e98 <HAL_UART_MspInit+0xb4>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_UART_MspInit+0xb4>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_UART_MspInit+0xb4>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <HAL_UART_MspInit+0xb4>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e54:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_UART_MspInit+0xb4>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e60:	23c0      	movs	r3, #192	@ 0xc0
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <HAL_UART_MspInit+0xb8>)
 8001e86:	f000 fadf 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e8a:	bf00      	nop
 8001e8c:	37b8      	adds	r7, #184	@ 0xb8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	48000400 	.word	0x48000400

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f000 f951 	bl	800219c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}

08001efe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001f06:	f000 fc31 	bl	800276c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <EXTI3_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI3_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f14:	2008      	movs	r0, #8
 8001f16:	f000 fc29 	bl	800276c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  max30102_on_interrupt(&max30102);
 8001f1a:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <EXTI3_IRQHandler+0x14>)
 8001f1c:	f7ff fbad 	bl	800167a <max30102_on_interrupt>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200002dc 	.word	0x200002dc

08001f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_kill>:

int _kill(int pid, int sig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f42:	f004 ff83 	bl	8006e4c <__errno>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2216      	movs	r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_exit>:

void _exit (int status)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffe7 	bl	8001f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f6a:	bf00      	nop
 8001f6c:	e7fd      	b.n	8001f6a <_exit+0x12>

08001f6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e00a      	b.n	8001f96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f80:	f3af 8000 	nop.w
 8001f84:	4601      	mov	r1, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	60ba      	str	r2, [r7, #8]
 8001f8c:	b2ca      	uxtb	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbf0      	blt.n	8001f80 <_read+0x12>
  }

  return len;
 8001f9e:	687b      	ldr	r3, [r7, #4]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_isatty>:

int _isatty(int file)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	@ (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f004 ff04 	bl	8006e4c <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	220c      	movs	r2, #12
 8002048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200a0000 	.word	0x200a0000
 8002070:	00000400 	.word	0x00000400
 8002074:	20000448 	.word	0x20000448
 8002078:	200005a0 	.word	0x200005a0

0800207c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <SystemInit+0x20>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <SystemInit+0x20>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a4:	f7ff ffea 	bl	800207c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <LoopForever+0x6>)
  ldr r1, =_edata
 80020aa:	490d      	ldr	r1, [pc, #52]	@ (80020e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <LoopForever+0xe>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c0:	4c0a      	ldr	r4, [pc, #40]	@ (80020ec <LoopForever+0x16>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ce:	f004 fec3 	bl	8006e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020d2:	f7fe ffb5 	bl	8001040 <main>

080020d6 <LoopForever>:

LoopForever:
    b LoopForever
 80020d6:	e7fe      	b.n	80020d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80020e4:	0800a7c8 	.word	0x0800a7c8
  ldr r2, =_sbss
 80020e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80020ec:	2000059c 	.word	0x2000059c

080020f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC1_IRQHandler>

080020f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f961 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002102:	2000      	movs	r0, #0
 8002104:	f000 f80e 	bl	8002124 <HAL_InitTick>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	e001      	b.n	8002118 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002114:	f7ff fde4 	bl	8001ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002118:	79fb      	ldrb	r3, [r7, #7]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002130:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <HAL_InitTick+0x6c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_InitTick+0x70>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <HAL_InitTick+0x6c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f96d 	bl	800242e <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b0f      	cmp	r3, #15
 800215e:	d809      	bhi.n	8002174 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002160:	2200      	movs	r2, #0
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f000 f937 	bl	80023da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_InitTick+0x74>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e007      	b.n	8002184 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e004      	b.n	8002184 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e001      	b.n	8002184 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c
 8002194:	20000004 	.word	0x20000004
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_IncTick+0x20>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x24>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <HAL_IncTick+0x24>)
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	2000044c 	.word	0x2000044c

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <HAL_GetTick+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000044c 	.word	0x2000044c

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff ffee 	bl	80021c4 <HAL_GetTick>
 80021e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002202:	bf00      	nop
 8002204:	f7ff ffde 	bl	80021c4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000000c 	.word	0x2000000c

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <__NVIC_EnableIRQ+0x38>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff29 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff3e 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff31 	bl	8002288 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e166      	b.n	8002726 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8158 	beq.w	8002720 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d017      	beq.n	8002526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d123      	bne.n	800257a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80b2 	beq.w	8002720 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025bc:	4b61      	ldr	r3, [pc, #388]	@ (8002744 <HAL_GPIO_Init+0x2fc>)
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	4a60      	ldr	r2, [pc, #384]	@ (8002744 <HAL_GPIO_Init+0x2fc>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80025c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002744 <HAL_GPIO_Init+0x2fc>)
 80025ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025fe:	d02b      	beq.n	8002658 <HAL_GPIO_Init+0x210>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a52      	ldr	r2, [pc, #328]	@ (800274c <HAL_GPIO_Init+0x304>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d025      	beq.n	8002654 <HAL_GPIO_Init+0x20c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a51      	ldr	r2, [pc, #324]	@ (8002750 <HAL_GPIO_Init+0x308>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01f      	beq.n	8002650 <HAL_GPIO_Init+0x208>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a50      	ldr	r2, [pc, #320]	@ (8002754 <HAL_GPIO_Init+0x30c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d019      	beq.n	800264c <HAL_GPIO_Init+0x204>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a4f      	ldr	r2, [pc, #316]	@ (8002758 <HAL_GPIO_Init+0x310>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_GPIO_Init+0x200>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a4e      	ldr	r2, [pc, #312]	@ (800275c <HAL_GPIO_Init+0x314>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00d      	beq.n	8002644 <HAL_GPIO_Init+0x1fc>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4d      	ldr	r2, [pc, #308]	@ (8002760 <HAL_GPIO_Init+0x318>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x1f8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4c      	ldr	r2, [pc, #304]	@ (8002764 <HAL_GPIO_Init+0x31c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_GPIO_Init+0x1f4>
 8002638:	2307      	movs	r3, #7
 800263a:	e00e      	b.n	800265a <HAL_GPIO_Init+0x212>
 800263c:	2308      	movs	r3, #8
 800263e:	e00c      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002640:	2306      	movs	r3, #6
 8002642:	e00a      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002644:	2305      	movs	r3, #5
 8002646:	e008      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002648:	2304      	movs	r3, #4
 800264a:	e006      	b.n	800265a <HAL_GPIO_Init+0x212>
 800264c:	2303      	movs	r3, #3
 800264e:	e004      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002650:	2302      	movs	r3, #2
 8002652:	e002      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_GPIO_Init+0x212>
 8002658:	2300      	movs	r3, #0
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	4093      	lsls	r3, r2
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800266a:	4937      	ldr	r1, [pc, #220]	@ (8002748 <HAL_GPIO_Init+0x300>)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002678:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_GPIO_Init+0x320>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800269c:	4a32      	ldr	r2, [pc, #200]	@ (8002768 <HAL_GPIO_Init+0x320>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026a2:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_GPIO_Init+0x320>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026c6:	4a28      	ldr	r2, [pc, #160]	@ (8002768 <HAL_GPIO_Init+0x320>)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <HAL_GPIO_Init+0x320>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002768 <HAL_GPIO_Init+0x320>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <HAL_GPIO_Init+0x320>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800271a:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <HAL_GPIO_Init+0x320>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f ae91 	bne.w	8002458 <HAL_GPIO_Init+0x10>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000
 800274c:	48000400 	.word	0x48000400
 8002750:	48000800 	.word	0x48000800
 8002754:	48000c00 	.word	0x48000c00
 8002758:	48001000 	.word	0x48001000
 800275c:	48001400 	.word	0x48001400
 8002760:	48001800 	.word	0x48001800
 8002764:	48001c00 	.word	0x48001c00
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f806 	bl	800279c <HAL_GPIO_EXTI_Callback>
  }
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e08d      	b.n	80028e0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff faa5 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2224      	movs	r2, #36	@ 0x24
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002802:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002812:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002838:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d108      	bne.n	8002854 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	e007      	b.n	8002864 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002862:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002876:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002886:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69d9      	ldr	r1, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	461a      	mov	r2, r3
 80028f4:	460b      	mov	r3, r1
 80028f6:	817b      	strh	r3, [r7, #10]
 80028f8:	4613      	mov	r3, r2
 80028fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	f040 80fd 	bne.w	8002b04 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x30>
 8002914:	2302      	movs	r3, #2
 8002916:	e0f6      	b.n	8002b06 <HAL_I2C_Master_Transmit+0x21e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002920:	f7ff fc50 	bl	80021c4 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2319      	movs	r3, #25
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fa0a 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0e1      	b.n	8002b06 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	@ 0x21
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2210      	movs	r2, #16
 800294e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	893a      	ldrh	r2, [r7, #8]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	2bff      	cmp	r3, #255	@ 0xff
 8002972:	d906      	bls.n	8002982 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	22ff      	movs	r2, #255	@ 0xff
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800297a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e007      	b.n	8002992 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800298c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002990:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d024      	beq.n	80029e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	8979      	ldrh	r1, [r7, #10]
 80029d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b10 <HAL_I2C_Master_Transmit+0x228>)
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fc05 	bl	80031ec <I2C_TransferConfig>
 80029e2:	e066      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	4b48      	ldr	r3, [pc, #288]	@ (8002b10 <HAL_I2C_Master_Transmit+0x228>)
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fbfa 	bl	80031ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029f8:	e05b      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f9fd 	bl	8002dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07b      	b.n	8002b06 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d034      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ca>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d130      	bne.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2200      	movs	r2, #0
 8002a58:	2180      	movs	r1, #128	@ 0x80
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f976 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e04d      	b.n	8002b06 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2bff      	cmp	r3, #255	@ 0xff
 8002a72:	d90e      	bls.n	8002a92 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22ff      	movs	r2, #255	@ 0xff
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	8979      	ldrh	r1, [r7, #10]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbae 	bl	80031ec <I2C_TransferConfig>
 8002a90:	e00f      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	8979      	ldrh	r1, [r7, #10]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fb9d 	bl	80031ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d19e      	bne.n	80029fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f9e3 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e01a      	b.n	8002b06 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <HAL_I2C_Master_Transmit+0x22c>)
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	80002000 	.word	0x80002000
 8002b14:	fe00e800 	.word	0xfe00e800

08002b18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	460b      	mov	r3, r1
 8002b26:	817b      	strh	r3, [r7, #10]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	f040 80db 	bne.w	8002cf0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_I2C_Master_Receive+0x30>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e0d4      	b.n	8002cf2 <HAL_I2C_Master_Receive+0x1da>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b50:	f7ff fb38 	bl	80021c4 <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2319      	movs	r3, #25
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f8f2 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0bf      	b.n	8002cf2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2222      	movs	r2, #34	@ 0x22
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	893a      	ldrh	r2, [r7, #8]
 8002b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2bff      	cmp	r3, #255	@ 0xff
 8002ba2:	d90e      	bls.n	8002bc2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	8979      	ldrh	r1, [r7, #10]
 8002bb2:	4b52      	ldr	r3, [pc, #328]	@ (8002cfc <HAL_I2C_Master_Receive+0x1e4>)
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fb16 	bl	80031ec <I2C_TransferConfig>
 8002bc0:	e06d      	b.n	8002c9e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	4b49      	ldr	r3, [pc, #292]	@ (8002cfc <HAL_I2C_Master_Receive+0x1e4>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb05 	bl	80031ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002be2:	e05c      	b.n	8002c9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f993 	bl	8002f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e07c      	b.n	8002cf2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d034      	beq.n	8002c9e <HAL_I2C_Master_Receive+0x186>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d130      	bne.n	8002c9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f880 	bl	8002d4c <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e04d      	b.n	8002cf2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2bff      	cmp	r3, #255	@ 0xff
 8002c5e:	d90e      	bls.n	8002c7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	22ff      	movs	r2, #255	@ 0xff
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	8979      	ldrh	r1, [r7, #10]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fab8 	bl	80031ec <I2C_TransferConfig>
 8002c7c:	e00f      	b.n	8002c9e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	2300      	movs	r3, #0
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 faa7 	bl	80031ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d19d      	bne.n	8002be4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	6a39      	ldr	r1, [r7, #32]
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f8ed 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e01a      	b.n	8002cf2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <HAL_I2C_Master_Receive+0x1e8>)
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	80002400 	.word	0x80002400
 8002d00:	fe00e800 	.word	0xfe00e800

08002d04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d007      	beq.n	8002d40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	619a      	str	r2, [r3, #24]
  }
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d5c:	e03b      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f962 	bl	800302c <I2C_IsErrorOccurred>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e041      	b.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d02d      	beq.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7ff fa23 	bl	80021c4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d122      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d113      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d0b4      	beq.n	8002d5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e0a:	e033      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f90b 	bl	800302c <I2C_IsErrorOccurred>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e031      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d025      	beq.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e28:	f7ff f9cc 	bl	80021c4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d302      	bcc.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11a      	bne.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d013      	beq.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d1c4      	bne.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	e02f      	b.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8c4 	bl	800302c <I2C_IsErrorOccurred>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e02d      	b.n	8002f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7ff f989 	bl	80021c4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11a      	bne.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d013      	beq.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e007      	b.n	8002f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d1c8      	bne.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f24:	e071      	b.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f87e 	bl	800302c <I2C_IsErrorOccurred>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d13b      	bne.n	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d138      	bne.n	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d105      	bne.n	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d121      	bne.n	8002fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2204      	movs	r2, #4
 8002f82:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
 8002fb8:	e002      	b.n	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002fc0:	f7ff f900 	bl	80021c4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d119      	bne.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00f      	beq.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b04      	cmp	r3, #4
 8003016:	d002      	beq.n	800301e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d083      	beq.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	fe00e800 	.word	0xfe00e800

0800302c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	@ 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d068      	beq.n	800312a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2210      	movs	r2, #16
 800305e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003060:	e049      	b.n	80030f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d045      	beq.n	80030f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7ff f8ab 	bl	80021c4 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_IsErrorOccurred+0x54>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d13a      	bne.n	80030f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003092:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a2:	d121      	bne.n	80030e8 <I2C_IsErrorOccurred+0xbc>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030aa:	d01d      	beq.n	80030e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d01a      	beq.n	80030e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030c2:	f7ff f87f 	bl	80021c4 <HAL_GetTick>
 80030c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c8:	e00e      	b.n	80030e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030ca:	f7ff f87b 	bl	80021c4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b19      	cmp	r3, #25
 80030d6:	d907      	bls.n	80030e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030e6:	e006      	b.n	80030f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d1e9      	bne.n	80030ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d003      	beq.n	800310c <I2C_IsErrorOccurred+0xe0>
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0aa      	beq.n	8003062 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2220      	movs	r2, #32
 800311a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800316e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003190:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff fdaf 	bl	8002d04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <I2C_IsErrorOccurred+0x1bc>)
 80031b2:	400b      	ands	r3, r1
 80031b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3728      	adds	r7, #40	@ 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	fe00e800 	.word	0xfe00e800

080031ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	4613      	mov	r3, r2
 80031fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003204:	7a7b      	ldrb	r3, [r7, #9]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	4313      	orrs	r3, r2
 8003216:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800321a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	0d5b      	lsrs	r3, r3, #21
 8003226:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <I2C_TransferConfig+0x60>)
 800322c:	430b      	orrs	r3, r1
 800322e:	43db      	mvns	r3, r3
 8003230:	ea02 0103 	and.w	r1, r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	03ff63ff 	.word	0x03ff63ff

08003250 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	d138      	bne.n	80032d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003270:	2302      	movs	r3, #2
 8003272:	e032      	b.n	80032da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	@ 0x24
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d139      	bne.n	8003370 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003306:	2302      	movs	r3, #2
 8003308:	e033      	b.n	8003372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2224      	movs	r2, #36	@ 0x24
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003338:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003384:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003390:	d102      	bne.n	8003398 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003396:	e00b      	b.n	80033b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003398:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800339a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a6:	d102      	bne.n	80033ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80033a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033ac:	e000      	b.n	80033b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80033ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40007000 	.word	0x40007000

080033c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d141      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ce:	4b4b      	ldr	r3, [pc, #300]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d131      	bne.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033dc:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e2:	4a46      	ldr	r2, [pc, #280]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ec:	4b43      	ldr	r3, [pc, #268]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033f4:	4a41      	ldr	r2, [pc, #260]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033fc:	4b40      	ldr	r3, [pc, #256]	@ (8003500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2232      	movs	r2, #50	@ 0x32
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	4a3f      	ldr	r2, [pc, #252]	@ (8003504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003412:	e002      	b.n	800341a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341a:	4b38      	ldr	r3, [pc, #224]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003426:	d102      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f2      	bne.n	8003414 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342e:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343a:	d158      	bne.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e057      	b.n	80034f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003440:	4b2e      	ldr	r3, [pc, #184]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003446:	4a2d      	ldr	r2, [pc, #180]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800344c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003450:	e04d      	b.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003458:	d141      	bne.n	80034de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800345a:	4b28      	ldr	r3, [pc, #160]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003466:	d131      	bne.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003468:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346e:	4a23      	ldr	r2, [pc, #140]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003478:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003480:	4a1e      	ldr	r2, [pc, #120]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003482:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003486:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2232      	movs	r2, #50	@ 0x32
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	0c9b      	lsrs	r3, r3, #18
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800349e:	e002      	b.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d102      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f2      	bne.n	80034a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c6:	d112      	bne.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e011      	b.n	80034f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034dc:	e007      	b.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034e6:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40007000 	.word	0x40007000
 8003500:	20000004 	.word	0x20000004
 8003504:	431bde83 	.word	0x431bde83

08003508 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f000 bc08 	b.w	8003d2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351c:	4b96      	ldr	r3, [pc, #600]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003526:	4b94      	ldr	r3, [pc, #592]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80e4 	beq.w	8003706 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_RCC_OscConfig+0x4c>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	f040 808b 	bne.w	8003662 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b01      	cmp	r3, #1
 8003550:	f040 8087 	bne.w	8003662 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003554:	4b88      	ldr	r3, [pc, #544]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x64>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e3df      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	4b81      	ldr	r3, [pc, #516]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_RCC_OscConfig+0x7e>
 800357c:	4b7e      	ldr	r3, [pc, #504]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003584:	e005      	b.n	8003592 <HAL_RCC_OscConfig+0x8a>
 8003586:	4b7c      	ldr	r3, [pc, #496]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003592:	4293      	cmp	r3, r2
 8003594:	d223      	bcs.n	80035de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fdcc 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e3c0      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035aa:	4b73      	ldr	r3, [pc, #460]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a72      	ldr	r2, [pc, #456]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b70      	ldr	r3, [pc, #448]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	496d      	ldr	r1, [pc, #436]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	4968      	ldr	r1, [pc, #416]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e025      	b.n	800362a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035de:	4b66      	ldr	r3, [pc, #408]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a65      	ldr	r2, [pc, #404]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b63      	ldr	r3, [pc, #396]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4960      	ldr	r1, [pc, #384]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	495b      	ldr	r1, [pc, #364]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fd8c 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e380      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800362a:	f000 fcc1 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 800362e:	4602      	mov	r2, r0
 8003630:	4b51      	ldr	r3, [pc, #324]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	4950      	ldr	r1, [pc, #320]	@ (800377c <HAL_RCC_OscConfig+0x274>)
 800363c:	5ccb      	ldrb	r3, [r1, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a4e      	ldr	r2, [pc, #312]	@ (8003780 <HAL_RCC_OscConfig+0x278>)
 8003648:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800364a:	4b4e      	ldr	r3, [pc, #312]	@ (8003784 <HAL_RCC_OscConfig+0x27c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fd68 	bl	8002124 <HAL_InitTick>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d052      	beq.n	8003704 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	e364      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d032      	beq.n	80036d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800366a:	4b43      	ldr	r3, [pc, #268]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a42      	ldr	r2, [pc, #264]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003676:	f7fe fda5 	bl	80021c4 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367e:	f7fe fda1 	bl	80021c4 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e34d      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003690:	4b39      	ldr	r3, [pc, #228]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369c:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a35      	ldr	r2, [pc, #212]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036a2:	f043 0308 	orr.w	r3, r3, #8
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b33      	ldr	r3, [pc, #204]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4930      	ldr	r1, [pc, #192]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	492b      	ldr	r1, [pc, #172]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
 80036ce:	e01a      	b.n	8003706 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036d0:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a28      	ldr	r2, [pc, #160]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fd72 	bl	80021c4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e4:	f7fe fd6e 	bl	80021c4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e31a      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f6:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x1dc>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d073      	beq.n	80037fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d005      	beq.n	8003724 <HAL_RCC_OscConfig+0x21c>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d10e      	bne.n	800373c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d10b      	bne.n	800373c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d063      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d15f      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e2f7      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003744:	d106      	bne.n	8003754 <HAL_RCC_OscConfig+0x24c>
 8003746:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a0b      	ldr	r2, [pc, #44]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e025      	b.n	80037a0 <HAL_RCC_OscConfig+0x298>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800375c:	d114      	bne.n	8003788 <HAL_RCC_OscConfig+0x280>
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a02      	ldr	r2, [pc, #8]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e013      	b.n	80037a0 <HAL_RCC_OscConfig+0x298>
 8003778:	40021000 	.word	0x40021000
 800377c:	0800a31c 	.word	0x0800a31c
 8003780:	20000004 	.word	0x20000004
 8003784:	20000008 	.word	0x20000008
 8003788:	4ba0      	ldr	r3, [pc, #640]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a9f      	ldr	r2, [pc, #636]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b9d      	ldr	r3, [pc, #628]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a9c      	ldr	r2, [pc, #624]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fd0c 	bl	80021c4 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fd08 	bl	80021c4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e2b4      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c2:	4b92      	ldr	r3, [pc, #584]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2a8>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe fcf8 	bl	80021c4 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fcf4 	bl	80021c4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e2a0      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ea:	4b88      	ldr	r3, [pc, #544]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d0>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d060      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x310>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d119      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d116      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	4b7c      	ldr	r3, [pc, #496]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x328>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e27d      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b76      	ldr	r3, [pc, #472]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4973      	ldr	r1, [pc, #460]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e040      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6e      	ldr	r2, [pc, #440]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fcb3 	bl	80021c4 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe fcaf 	bl	80021c4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e25b      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003874:	4b65      	ldr	r3, [pc, #404]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b62      	ldr	r3, [pc, #392]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	495f      	ldr	r1, [pc, #380]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e018      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b5d      	ldr	r3, [pc, #372]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5c      	ldr	r2, [pc, #368]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800389c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe fc8f 	bl	80021c4 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe fc8b 	bl	80021c4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e237      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038bc:	4b53      	ldr	r3, [pc, #332]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03c      	beq.n	800394e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038dc:	4b4b      	ldr	r3, [pc, #300]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fc6a 	bl	80021c4 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fc66 	bl	80021c4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e212      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003906:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3ec>
 8003914:	e01b      	b.n	800394e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b3d      	ldr	r3, [pc, #244]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fc4d 	bl	80021c4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe fc49 	bl	80021c4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1f5      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a6 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003960:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b27      	ldr	r3, [pc, #156]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	4a26      	ldr	r2, [pc, #152]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	@ 0x58
 8003978:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003988:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d118      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003994:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fe fc10 	bl	80021c4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fc0c 	bl	80021c4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1b8      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4d8>
 80039ce:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039de:	e029      	b.n	8003a34 <HAL_RCC_OscConfig+0x52c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d115      	bne.n	8003a14 <HAL_RCC_OscConfig+0x50c>
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	4a07      	ldr	r2, [pc, #28]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	4a03      	ldr	r2, [pc, #12]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a08:	e014      	b.n	8003a34 <HAL_RCC_OscConfig+0x52c>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	4b9d      	ldr	r3, [pc, #628]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1a:	4a9c      	ldr	r2, [pc, #624]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a24:	4b99      	ldr	r3, [pc, #612]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	4a98      	ldr	r2, [pc, #608]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fbc2 	bl	80021c4 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fe fbbe 	bl	80021c4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e168      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCC_OscConfig+0x53c>
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fbab 	bl	80021c4 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe fba7 	bl	80021c4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e151      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a88:	4b80      	ldr	r3, [pc, #512]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ed      	bne.n	8003a72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a96:	7ffb      	ldrb	r3, [r7, #31]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b7b      	ldr	r3, [pc, #492]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa0:	4a7a      	ldr	r2, [pc, #488]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003abc:	4b73      	ldr	r3, [pc, #460]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ac2:	4a72      	ldr	r2, [pc, #456]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fb7a 	bl	80021c4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad4:	f7fe fb76 	bl	80021c4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e122      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ae6:	4b69      	ldr	r3, [pc, #420]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x5cc>
 8003af4:	e01b      	b.n	8003b2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003af6:	4b65      	ldr	r3, [pc, #404]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afc:	4a63      	ldr	r2, [pc, #396]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fe fb5d 	bl	80021c4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0e:	f7fe fb59 	bl	80021c4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e105      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b20:	4b5a      	ldr	r3, [pc, #360]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ef      	bne.n	8003b0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80f9 	beq.w	8003d2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	f040 80cf 	bne.w	8003ce0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b42:	4b52      	ldr	r3, [pc, #328]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0203 	and.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d12c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	3b01      	subs	r3, #1
 8003b62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d123      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d11b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d113      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	3b01      	subs	r3, #1
 8003b96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d071      	beq.n	8003c94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d068      	beq.n	8003c88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bb6:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bc2:	4b32      	ldr	r3, [pc, #200]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0ac      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bde:	f7fe faf1 	bl	80021c4 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe faed 	bl	80021c4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e099      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c04:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	4b21      	ldr	r3, [pc, #132]	@ (8003c90 <HAL_RCC_OscConfig+0x788>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	4311      	orrs	r1, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c1e:	0212      	lsls	r2, r2, #8
 8003c20:	4311      	orrs	r1, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c26:	0852      	lsrs	r2, r2, #1
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0552      	lsls	r2, r2, #21
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c32:	0852      	lsrs	r2, r2, #1
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0652      	lsls	r2, r2, #25
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c3e:	06d2      	lsls	r2, r2, #27
 8003c40:	430a      	orrs	r2, r1
 8003c42:	4912      	ldr	r1, [pc, #72]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c48:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c54:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c60:	f7fe fab0 	bl	80021c4 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe faac 	bl	80021c4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e058      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c86:	e050      	b.n	8003d2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04f      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d144      	bne.n	8003d2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cac:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cb8:	f7fe fa84 	bl	80021c4 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe fa80 	bl	80021c4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e02c      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd2:	4b18      	ldr	r3, [pc, #96]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x7b8>
 8003cde:	e024      	b.n	8003d2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d01f      	beq.n	8003d26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003cec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fa67 	bl	80021c4 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fa63 	bl	80021c4 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d18:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	4905      	ldr	r1, [pc, #20]	@ (8003d34 <HAL_RCC_OscConfig+0x82c>)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_RCC_OscConfig+0x830>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60cb      	str	r3, [r1, #12]
 8003d24:	e001      	b.n	8003d2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	feeefffc 	.word	0xfeeefffc

08003d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e11d      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b90      	ldr	r3, [pc, #576]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b8d      	ldr	r3, [pc, #564]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	498b      	ldr	r1, [pc, #556]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b89      	ldr	r3, [pc, #548]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e105      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b81      	ldr	r3, [pc, #516]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d908      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b7e      	ldr	r3, [pc, #504]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	497b      	ldr	r1, [pc, #492]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d079      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d11e      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	4b75      	ldr	r3, [pc, #468]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0dc      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003dd6:	f000 fa09 	bl	80041ec <RCC_GetSysClockFreqFromPLLSource>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4a70      	ldr	r2, [pc, #448]	@ (8003fa0 <HAL_RCC_ClockConfig+0x264>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d946      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003de2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d140      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dee:	4b6b      	ldr	r3, [pc, #428]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003df6:	4a69      	ldr	r2, [pc, #420]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e035      	b.n	8003e70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0c:	4b63      	ldr	r3, [pc, #396]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b9      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e24:	4b5d      	ldr	r3, [pc, #372]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0ad      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e34:	4b59      	ldr	r3, [pc, #356]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0a5      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003e44:	f000 f8b4 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4a55      	ldr	r2, [pc, #340]	@ (8003fa0 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d90f      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e50:	4b52      	ldr	r3, [pc, #328]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e64:	4a4d      	ldr	r2, [pc, #308]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e6c:	2380      	movs	r3, #128	@ 0x80
 8003e6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e70:	4b4a      	ldr	r3, [pc, #296]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 0203 	bic.w	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4947      	ldr	r1, [pc, #284]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fe f99f 	bl	80021c4 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8a:	f7fe f99b 	bl	80021c4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e077      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 020c 	and.w	r2, r3, #12
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d1eb      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b80      	cmp	r3, #128	@ 0x80
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eb8:	4b38      	ldr	r3, [pc, #224]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a37      	ldr	r2, [pc, #220]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d010      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	4b31      	ldr	r3, [pc, #196]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d208      	bcs.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	492b      	ldr	r1, [pc, #172]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef2:	4b29      	ldr	r3, [pc, #164]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d210      	bcs.n	8003f22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f00:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 020f 	bic.w	r2, r3, #15
 8003f08:	4923      	ldr	r1, [pc, #140]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f10:	4b21      	ldr	r3, [pc, #132]	@ (8003f98 <HAL_RCC_ClockConfig+0x25c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e036      	b.n	8003f90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	4918      	ldr	r1, [pc, #96]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d009      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4910      	ldr	r1, [pc, #64]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f60:	f000 f826 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <HAL_RCC_ClockConfig+0x260>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	490c      	ldr	r1, [pc, #48]	@ (8003fa4 <HAL_RCC_ClockConfig+0x268>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <HAL_RCC_ClockConfig+0x26c>)
 8003f7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_RCC_ClockConfig+0x270>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe f8cd 	bl	8002124 <HAL_InitTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	04c4b400 	.word	0x04c4b400
 8003fa4:	0800a31c 	.word	0x0800a31c
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	20000008 	.word	0x20000008

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	@ 0x24
 8003fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d121      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d11e      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe4:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff0:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e005      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004000:	4b2d      	ldr	r3, [pc, #180]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800400c:	4a2b      	ldr	r2, [pc, #172]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d102      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004028:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e004      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d101      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004034:	4b23      	ldr	r3, [pc, #140]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d134      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403e:	4b1e      	ldr	r3, [pc, #120]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0xa6>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d003      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0xac>
 8004054:	e005      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004056:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004058:	617b      	str	r3, [r7, #20]
      break;
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800405c:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	617b      	str	r3, [r7, #20]
      break;
 8004060:	e002      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	617b      	str	r3, [r7, #20]
      break;
 8004066:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3301      	adds	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	fb03 f202 	mul.w	r2, r3, r2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408e:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	0e5b      	lsrs	r3, r3, #25
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	3301      	adds	r3, #1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	@ 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800a334 	.word	0x0800a334
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	007a1200 	.word	0x007a1200

080040c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b03      	ldr	r3, [pc, #12]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000004 	.word	0x20000004

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4904      	ldr	r1, [pc, #16]	@ (8004108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	0800a32c 	.word	0x0800a32c

0800410c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004110:	f7ff ffda 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0adb      	lsrs	r3, r3, #11
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4904      	ldr	r1, [pc, #16]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	0800a32c 	.word	0x0800a32c

08004138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004144:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004150:	f7ff f916 	bl	8003380 <HAL_PWREx_GetVoltageRange>
 8004154:	6178      	str	r0, [r7, #20]
 8004156:	e014      	b.n	8004182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004162:	6593      	str	r3, [r2, #88]	@ 0x58
 8004164:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004170:	f7ff f906 	bl	8003380 <HAL_PWREx_GetVoltageRange>
 8004174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004176:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004188:	d10b      	bne.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b80      	cmp	r3, #128	@ 0x80
 800418e:	d913      	bls.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2ba0      	cmp	r3, #160	@ 0xa0
 8004194:	d902      	bls.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004196:	2302      	movs	r3, #2
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e00d      	b.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800419c:	2301      	movs	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e00a      	b.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80041a6:	d902      	bls.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80041a8:	2302      	movs	r3, #2
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e004      	b.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b70      	cmp	r3, #112	@ 0x70
 80041b2:	d101      	bne.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b4:	2301      	movs	r3, #1
 80041b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 020f 	bic.w	r2, r3, #15
 80041c0:	4909      	ldr	r1, [pc, #36]	@ (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041c8:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40022000 	.word	0x40022000

080041ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041f2:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d00b      	beq.n	800421a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d825      	bhi.n	8004254 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d008      	beq.n	8004220 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d11f      	bne.n	8004254 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004214:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004216:	613b      	str	r3, [r7, #16]
    break;
 8004218:	e01f      	b.n	800425a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800421a:	4b25      	ldr	r3, [pc, #148]	@ (80042b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800421c:	613b      	str	r3, [r7, #16]
    break;
 800421e:	e01c      	b.n	800425a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800422c:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e005      	b.n	8004248 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800423c:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004248:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	613b      	str	r3, [r7, #16]
    break;
 8004252:	e002      	b.n	800425a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
    break;
 8004258:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425a:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	3301      	adds	r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	fb03 f202 	mul.w	r2, r3, r2
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004280:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0e5b      	lsrs	r3, r3, #25
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	3301      	adds	r3, #1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800429a:	683b      	ldr	r3, [r7, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40021000 	.word	0x40021000
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200
 80042b4:	0800a334 	.word	0x0800a334

080042b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c0:	2300      	movs	r3, #0
 80042c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d040      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042d8:	2b80      	cmp	r3, #128	@ 0x80
 80042da:	d02a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042dc:	2b80      	cmp	r3, #128	@ 0x80
 80042de:	d825      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042e0:	2b60      	cmp	r3, #96	@ 0x60
 80042e2:	d026      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042e4:	2b60      	cmp	r3, #96	@ 0x60
 80042e6:	d821      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d006      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80042ec:	2b40      	cmp	r3, #64	@ 0x40
 80042ee:	d81d      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d010      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80042f8:	e018      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042fa:	4b89      	ldr	r3, [pc, #548]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4a88      	ldr	r2, [pc, #544]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004304:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004306:	e015      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fb02 	bl	8004918 <RCCEx_PLLSAI1_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004318:	e00c      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3320      	adds	r3, #32
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fbed 	bl	8004b00 <RCCEx_PLLSAI2_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800432a:	e003      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	74fb      	strb	r3, [r7, #19]
      break;
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800433a:	4b79      	ldr	r3, [pc, #484]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800433c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004340:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004348:	4975      	ldr	r1, [pc, #468]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004350:	e001      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d047      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d030      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d82a      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004376:	d02a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004378:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437c:	d824      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800437e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004382:	d008      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004388:	d81e      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800438e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004392:	d010      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004394:	e018      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004396:	4b62      	ldr	r3, [pc, #392]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4a61      	ldr	r2, [pc, #388]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a2:	e015      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fab4 	bl	8004918 <RCCEx_PLLSAI1_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b4:	e00c      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3320      	adds	r3, #32
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fb9f 	bl	8004b00 <RCCEx_PLLSAI2_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	74fb      	strb	r3, [r7, #19]
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80043ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043d6:	4b52      	ldr	r3, [pc, #328]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	494e      	ldr	r1, [pc, #312]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80043ec:	e001      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 809f 	beq.w	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004400:	2300      	movs	r3, #0
 8004402:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004404:	4b46      	ldr	r3, [pc, #280]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004414:	2300      	movs	r3, #0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00d      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b41      	ldr	r3, [pc, #260]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441e:	4a40      	ldr	r2, [pc, #256]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	6593      	str	r3, [r2, #88]	@ 0x58
 8004426:	4b3e      	ldr	r3, [pc, #248]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004436:	4b3b      	ldr	r3, [pc, #236]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3a      	ldr	r2, [pc, #232]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004442:	f7fd febf 	bl	80021c4 <HAL_GetTick>
 8004446:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004448:	e009      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fd febb 	bl	80021c4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d902      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	74fb      	strb	r3, [r7, #19]
        break;
 800445c:	e005      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800445e:	4b31      	ldr	r3, [pc, #196]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ef      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d15b      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004470:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01f      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	429a      	cmp	r2, r3
 800448c:	d019      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800448e:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004498:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800449a:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ba:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d016      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fe7a 	bl	80021c4 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d2:	e00b      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd fe76 	bl	80021c4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d902      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	74fb      	strb	r3, [r7, #19]
            break;
 80044ea:	e006      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ec      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10c      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	4903      	ldr	r1, [pc, #12]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004518:	e008      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	74bb      	strb	r3, [r7, #18]
 800451e:	e005      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452c:	7c7b      	ldrb	r3, [r7, #17]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004532:	4ba0      	ldr	r3, [pc, #640]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	4a9f      	ldr	r2, [pc, #636]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800453c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454a:	4b9a      	ldr	r3, [pc, #616]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004550:	f023 0203 	bic.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004558:	4996      	ldr	r1, [pc, #600]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800456c:	4b91      	ldr	r3, [pc, #580]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	f023 020c 	bic.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	498e      	ldr	r1, [pc, #568]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800458e:	4b89      	ldr	r3, [pc, #548]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	4985      	ldr	r1, [pc, #532]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045b0:	4b80      	ldr	r3, [pc, #512]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045be:	497d      	ldr	r1, [pc, #500]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d2:	4b78      	ldr	r3, [pc, #480]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e0:	4974      	ldr	r1, [pc, #464]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f4:	4b6f      	ldr	r3, [pc, #444]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004602:	496c      	ldr	r1, [pc, #432]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004616:	4b67      	ldr	r3, [pc, #412]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004624:	4963      	ldr	r1, [pc, #396]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004638:	4b5e      	ldr	r3, [pc, #376]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004646:	495b      	ldr	r1, [pc, #364]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465a:	4b56      	ldr	r3, [pc, #344]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004660:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004668:	4952      	ldr	r1, [pc, #328]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467c:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468a:	494a      	ldr	r1, [pc, #296]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469e:	4b45      	ldr	r3, [pc, #276]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ac:	4941      	ldr	r1, [pc, #260]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046c0:	4b3c      	ldr	r3, [pc, #240]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	4939      	ldr	r1, [pc, #228]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d028      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e2:	4b34      	ldr	r3, [pc, #208]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f0:	4930      	ldr	r1, [pc, #192]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004700:	d106      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004702:	4b2c      	ldr	r3, [pc, #176]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a2b      	ldr	r2, [pc, #172]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470c:	60d3      	str	r3, [r2, #12]
 800470e:	e011      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f8f9 	bl	8004918 <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d04d      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004748:	d108      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800474a:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004750:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004756:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800475a:	e012      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800475c:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004762:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004768:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800477a:	490e      	ldr	r1, [pc, #56]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800478a:	d106      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478c:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004796:	60d3      	str	r3, [r2, #12]
 8004798:	e020      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a2:	d109      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a02      	ldr	r2, [pc, #8]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ae:	60d3      	str	r3, [r2, #12]
 80047b0:	e014      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f8a5 	bl	8004918 <RCCEx_PLLSAI1_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d028      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f6:	4947      	ldr	r1, [pc, #284]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004806:	d106      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004808:	4b42      	ldr	r3, [pc, #264]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a41      	ldr	r2, [pc, #260]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004812:	60d3      	str	r3, [r2, #12]
 8004814:	e011      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800481a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800481e:	d10c      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f876 	bl	8004918 <RCCEx_PLLSAI1_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01e      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004846:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004856:	492f      	ldr	r1, [pc, #188]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004868:	d10c      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f851 	bl	8004918 <RCCEx_PLLSAI1_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004890:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004896:	f023 0204 	bic.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a0:	491c      	ldr	r1, [pc, #112]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048b4:	4b17      	ldr	r3, [pc, #92]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ba:	f023 0218 	bic.w	r2, r3, #24
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	4913      	ldr	r1, [pc, #76]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d017      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048e8:	490a      	ldr	r1, [pc, #40]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004908:	7cbb      	ldrb	r3, [r7, #18]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000

08004918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004926:	4b72      	ldr	r3, [pc, #456]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004932:	4b6f      	ldr	r3, [pc, #444]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d103      	bne.n	800494a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
       ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d142      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e03f      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d018      	beq.n	800498a <RCCEx_PLLSAI1_Config+0x72>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d825      	bhi.n	80049a8 <RCCEx_PLLSAI1_Config+0x90>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d002      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x4e>
 8004960:	2b02      	cmp	r3, #2
 8004962:	d009      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x60>
 8004964:	e020      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004966:	4b62      	ldr	r3, [pc, #392]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11d      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004976:	e01a      	b.n	80049ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004978:	4b5d      	ldr	r3, [pc, #372]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004988:	e013      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498a:	4b59      	ldr	r3, [pc, #356]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004996:	4b56      	ldr	r3, [pc, #344]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a6:	e006      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e004      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80049be:	4b4c      	ldr	r3, [pc, #304]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4949      	ldr	r1, [pc, #292]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8086 	bne.w	8004ae4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049d8:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a44      	ldr	r2, [pc, #272]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e4:	f7fd fbee 	bl	80021c4 <HAL_GetTick>
 80049e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ea:	e009      	b.n	8004a00 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ec:	f7fd fbea 	bl	80021c4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d902      	bls.n	8004a00 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	73fb      	strb	r3, [r7, #15]
        break;
 80049fe:	e005      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a00:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ef      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d168      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a18:	4b35      	ldr	r3, [pc, #212]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	4b35      	ldr	r3, [pc, #212]	@ (8004af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6892      	ldr	r2, [r2, #8]
 8004a24:	0211      	lsls	r1, r2, #8
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68d2      	ldr	r2, [r2, #12]
 8004a2a:	06d2      	lsls	r2, r2, #27
 8004a2c:	4311      	orrs	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6852      	ldr	r2, [r2, #4]
 8004a32:	3a01      	subs	r2, #1
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	430a      	orrs	r2, r1
 8004a38:	492d      	ldr	r1, [pc, #180]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]
 8004a3e:	e02d      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d115      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a46:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6912      	ldr	r2, [r2, #16]
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	0552      	lsls	r2, r2, #21
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6852      	ldr	r2, [r2, #4]
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	4921      	ldr	r1, [pc, #132]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
 8004a70:	e014      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a72:	4b1f      	ldr	r3, [pc, #124]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6892      	ldr	r2, [r2, #8]
 8004a7e:	0211      	lsls	r1, r2, #8
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6952      	ldr	r2, [r2, #20]
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0652      	lsls	r2, r2, #25
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6852      	ldr	r2, [r2, #4]
 8004a90:	3a01      	subs	r2, #1
 8004a92:	0112      	lsls	r2, r2, #4
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4916      	ldr	r1, [pc, #88]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a9c:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fb8c 	bl	80021c4 <HAL_GetTick>
 8004aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aae:	e009      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab0:	f7fd fb88 	bl	80021c4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac2:	e005      	b.n	8004ad0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	4904      	ldr	r1, [pc, #16]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	07ff800f 	.word	0x07ff800f
 8004af8:	ff9f800f 	.word	0xff9f800f
 8004afc:	f9ff800f 	.word	0xf9ff800f

08004b00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b0e:	4b72      	ldr	r3, [pc, #456]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00e      	beq.n	8004b38 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0203 	and.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d103      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d142      	bne.n	8004bb8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	e03f      	b.n	8004bb8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d018      	beq.n	8004b72 <RCCEx_PLLSAI2_Config+0x72>
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d825      	bhi.n	8004b90 <RCCEx_PLLSAI2_Config+0x90>
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d002      	beq.n	8004b4e <RCCEx_PLLSAI2_Config+0x4e>
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d009      	beq.n	8004b60 <RCCEx_PLLSAI2_Config+0x60>
 8004b4c:	e020      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b4e:	4b62      	ldr	r3, [pc, #392]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11d      	bne.n	8004b96 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5e:	e01a      	b.n	8004b96 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b60:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b70:	e013      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b72:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b7e:	4b56      	ldr	r3, [pc, #344]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b8e:	e006      	b.n	8004b9e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
      break;
 8004b94:	e004      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b96:	bf00      	nop
 8004b98:	e002      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4949      	ldr	r1, [pc, #292]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 8086 	bne.w	8004ccc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bc0:	4b45      	ldr	r3, [pc, #276]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a44      	ldr	r2, [pc, #272]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd fafa 	bl	80021c4 <HAL_GetTick>
 8004bd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bd2:	e009      	b.n	8004be8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd4:	f7fd faf6 	bl	80021c4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d902      	bls.n	8004be8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	73fb      	strb	r3, [r7, #15]
        break;
 8004be6:	e005      	b.n	8004bf4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004be8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ef      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d168      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d113      	bne.n	8004c28 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c00:	4b35      	ldr	r3, [pc, #212]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	4b35      	ldr	r3, [pc, #212]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6892      	ldr	r2, [r2, #8]
 8004c0c:	0211      	lsls	r1, r2, #8
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68d2      	ldr	r2, [r2, #12]
 8004c12:	06d2      	lsls	r2, r2, #27
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6852      	ldr	r2, [r2, #4]
 8004c1a:	3a01      	subs	r2, #1
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	492d      	ldr	r1, [pc, #180]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	614b      	str	r3, [r1, #20]
 8004c26:	e02d      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d115      	bne.n	8004c5a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6892      	ldr	r2, [r2, #8]
 8004c3a:	0211      	lsls	r1, r2, #8
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6912      	ldr	r2, [r2, #16]
 8004c40:	0852      	lsrs	r2, r2, #1
 8004c42:	3a01      	subs	r2, #1
 8004c44:	0552      	lsls	r2, r2, #21
 8004c46:	4311      	orrs	r1, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6852      	ldr	r2, [r2, #4]
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4921      	ldr	r1, [pc, #132]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	614b      	str	r3, [r1, #20]
 8004c58:	e014      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ce4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6892      	ldr	r2, [r2, #8]
 8004c66:	0211      	lsls	r1, r2, #8
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6952      	ldr	r2, [r2, #20]
 8004c6c:	0852      	lsrs	r2, r2, #1
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	0652      	lsls	r2, r2, #25
 8004c72:	4311      	orrs	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0112      	lsls	r2, r2, #4
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	4916      	ldr	r1, [pc, #88]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c84:	4b14      	ldr	r3, [pc, #80]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a13      	ldr	r2, [pc, #76]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fd fa98 	bl	80021c4 <HAL_GetTick>
 8004c94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c96:	e009      	b.n	8004cac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c98:	f7fd fa94 	bl	80021c4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d902      	bls.n	8004cac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	73fb      	strb	r3, [r7, #15]
          break;
 8004caa:	e005      	b.n	8004cb8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ef      	beq.n	8004c98 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cbe:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	4904      	ldr	r1, [pc, #16]	@ (8004cd8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	07ff800f 	.word	0x07ff800f
 8004ce0:	ff9f800f 	.word	0xff9f800f
 8004ce4:	f9ff800f 	.word	0xf9ff800f

08004ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e042      	b.n	8004d80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fd f869 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	@ 0x24
 8004d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fbb2 	bl	800549c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8b3 	bl	8004ea4 <UART_SetConfig>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e01b      	b.n	8004d80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fc31 	bl	80055e0 <UART_CheckIdleState>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d17b      	bne.n	8004e9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Transmit+0x26>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e074      	b.n	8004e9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2221      	movs	r2, #33	@ 0x21
 8004dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc2:	f7fd f9ff 	bl	80021c4 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de0:	d108      	bne.n	8004df4 <HAL_UART_Transmit+0x6c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e003      	b.n	8004dfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dfc:	e030      	b.n	8004e60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2180      	movs	r1, #128	@ 0x80
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fc93 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e03d      	b.n	8004e9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	881a      	ldrh	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e32:	b292      	uxth	r2, r2
 8004e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e007      	b.n	8004e4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1c8      	bne.n	8004dfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2200      	movs	r2, #0
 8004e74:	2140      	movs	r1, #64	@ 0x40
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fc5c 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e006      	b.n	8004e9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e000      	b.n	8004e9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
  }
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea8:	b08c      	sub	sp, #48	@ 0x30
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4baa      	ldr	r3, [pc, #680]	@ (800517c <UART_SetConfig+0x2d8>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a9f      	ldr	r2, [pc, #636]	@ (8005180 <UART_SetConfig+0x2dc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	f023 010f 	bic.w	r1, r3, #15
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a90      	ldr	r2, [pc, #576]	@ (8005184 <UART_SetConfig+0x2e0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d125      	bne.n	8004f94 <UART_SetConfig+0xf0>
 8004f48:	4b8f      	ldr	r3, [pc, #572]	@ (8005188 <UART_SetConfig+0x2e4>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d81a      	bhi.n	8004f8c <UART_SetConfig+0xe8>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <UART_SetConfig+0xb8>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f75 	.word	0x08004f75
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f72:	e116      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e112      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e10e      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e10a      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e106      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a7c      	ldr	r2, [pc, #496]	@ (800518c <UART_SetConfig+0x2e8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d138      	bne.n	8005010 <UART_SetConfig+0x16c>
 8004f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8005188 <UART_SetConfig+0x2e4>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b0c      	cmp	r3, #12
 8004faa:	d82d      	bhi.n	8005008 <UART_SetConfig+0x164>
 8004fac:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <UART_SetConfig+0x110>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	08005009 	.word	0x08005009
 8004fbc:	08005009 	.word	0x08005009
 8004fc0:	08005009 	.word	0x08005009
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	08005009 	.word	0x08005009
 8004fcc:	08005009 	.word	0x08005009
 8004fd0:	08005009 	.word	0x08005009
 8004fd4:	08004ff1 	.word	0x08004ff1
 8004fd8:	08005009 	.word	0x08005009
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e0d8      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff6:	e0d4      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffe:	e0d0      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005006:	e0cc      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500e:	e0c8      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5e      	ldr	r2, [pc, #376]	@ (8005190 <UART_SetConfig+0x2ec>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d125      	bne.n	8005066 <UART_SetConfig+0x1c2>
 800501a:	4b5b      	ldr	r3, [pc, #364]	@ (8005188 <UART_SetConfig+0x2e4>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005024:	2b30      	cmp	r3, #48	@ 0x30
 8005026:	d016      	beq.n	8005056 <UART_SetConfig+0x1b2>
 8005028:	2b30      	cmp	r3, #48	@ 0x30
 800502a:	d818      	bhi.n	800505e <UART_SetConfig+0x1ba>
 800502c:	2b20      	cmp	r3, #32
 800502e:	d00a      	beq.n	8005046 <UART_SetConfig+0x1a2>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d814      	bhi.n	800505e <UART_SetConfig+0x1ba>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <UART_SetConfig+0x19a>
 8005038:	2b10      	cmp	r3, #16
 800503a:	d008      	beq.n	800504e <UART_SetConfig+0x1aa>
 800503c:	e00f      	b.n	800505e <UART_SetConfig+0x1ba>
 800503e:	2300      	movs	r3, #0
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005044:	e0ad      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005046:	2302      	movs	r3, #2
 8005048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504c:	e0a9      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800504e:	2304      	movs	r3, #4
 8005050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005054:	e0a5      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005056:	2308      	movs	r3, #8
 8005058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505c:	e0a1      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800505e:	2310      	movs	r3, #16
 8005060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005064:	e09d      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a4a      	ldr	r2, [pc, #296]	@ (8005194 <UART_SetConfig+0x2f0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d125      	bne.n	80050bc <UART_SetConfig+0x218>
 8005070:	4b45      	ldr	r3, [pc, #276]	@ (8005188 <UART_SetConfig+0x2e4>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005076:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800507a:	2bc0      	cmp	r3, #192	@ 0xc0
 800507c:	d016      	beq.n	80050ac <UART_SetConfig+0x208>
 800507e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005080:	d818      	bhi.n	80050b4 <UART_SetConfig+0x210>
 8005082:	2b80      	cmp	r3, #128	@ 0x80
 8005084:	d00a      	beq.n	800509c <UART_SetConfig+0x1f8>
 8005086:	2b80      	cmp	r3, #128	@ 0x80
 8005088:	d814      	bhi.n	80050b4 <UART_SetConfig+0x210>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <UART_SetConfig+0x1f0>
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d008      	beq.n	80050a4 <UART_SetConfig+0x200>
 8005092:	e00f      	b.n	80050b4 <UART_SetConfig+0x210>
 8005094:	2300      	movs	r3, #0
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e082      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e07e      	b.n	80051a2 <UART_SetConfig+0x2fe>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e07a      	b.n	80051a2 <UART_SetConfig+0x2fe>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e076      	b.n	80051a2 <UART_SetConfig+0x2fe>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e072      	b.n	80051a2 <UART_SetConfig+0x2fe>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a35      	ldr	r2, [pc, #212]	@ (8005198 <UART_SetConfig+0x2f4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d12a      	bne.n	800511c <UART_SetConfig+0x278>
 80050c6:	4b30      	ldr	r3, [pc, #192]	@ (8005188 <UART_SetConfig+0x2e4>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050d4:	d01a      	beq.n	800510c <UART_SetConfig+0x268>
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050da:	d81b      	bhi.n	8005114 <UART_SetConfig+0x270>
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e0:	d00c      	beq.n	80050fc <UART_SetConfig+0x258>
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e6:	d815      	bhi.n	8005114 <UART_SetConfig+0x270>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <UART_SetConfig+0x250>
 80050ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050f0:	d008      	beq.n	8005104 <UART_SetConfig+0x260>
 80050f2:	e00f      	b.n	8005114 <UART_SetConfig+0x270>
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e052      	b.n	80051a2 <UART_SetConfig+0x2fe>
 80050fc:	2302      	movs	r3, #2
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e04e      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005104:	2304      	movs	r3, #4
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e04a      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800510c:	2308      	movs	r3, #8
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005112:	e046      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005114:	2310      	movs	r3, #16
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511a:	e042      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a17      	ldr	r2, [pc, #92]	@ (8005180 <UART_SetConfig+0x2dc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d13a      	bne.n	800519c <UART_SetConfig+0x2f8>
 8005126:	4b18      	ldr	r3, [pc, #96]	@ (8005188 <UART_SetConfig+0x2e4>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005134:	d01a      	beq.n	800516c <UART_SetConfig+0x2c8>
 8005136:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800513a:	d81b      	bhi.n	8005174 <UART_SetConfig+0x2d0>
 800513c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005140:	d00c      	beq.n	800515c <UART_SetConfig+0x2b8>
 8005142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005146:	d815      	bhi.n	8005174 <UART_SetConfig+0x2d0>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <UART_SetConfig+0x2b0>
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005150:	d008      	beq.n	8005164 <UART_SetConfig+0x2c0>
 8005152:	e00f      	b.n	8005174 <UART_SetConfig+0x2d0>
 8005154:	2300      	movs	r3, #0
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515a:	e022      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800515c:	2302      	movs	r3, #2
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005162:	e01e      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005164:	2304      	movs	r3, #4
 8005166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516a:	e01a      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800516c:	2308      	movs	r3, #8
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005172:	e016      	b.n	80051a2 <UART_SetConfig+0x2fe>
 8005174:	2310      	movs	r3, #16
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517a:	e012      	b.n	80051a2 <UART_SetConfig+0x2fe>
 800517c:	cfff69f3 	.word	0xcfff69f3
 8005180:	40008000 	.word	0x40008000
 8005184:	40013800 	.word	0x40013800
 8005188:	40021000 	.word	0x40021000
 800518c:	40004400 	.word	0x40004400
 8005190:	40004800 	.word	0x40004800
 8005194:	40004c00 	.word	0x40004c00
 8005198:	40005000 	.word	0x40005000
 800519c:	2310      	movs	r3, #16
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4aae      	ldr	r2, [pc, #696]	@ (8005460 <UART_SetConfig+0x5bc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	f040 8097 	bne.w	80052dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d823      	bhi.n	80051fe <UART_SetConfig+0x35a>
 80051b6:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <UART_SetConfig+0x318>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ef 	.word	0x080051ef
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	080051ff 	.word	0x080051ff
 80051dc:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fe ff7e 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051e6:	e010      	b.n	800520a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b9e      	ldr	r3, [pc, #632]	@ (8005464 <UART_SetConfig+0x5c0>)
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051ec:	e00d      	b.n	800520a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe fedf 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 80051f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051f4:	e009      	b.n	800520a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051fc:	e005      	b.n	800520a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8130 	beq.w	8005472 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	4a94      	ldr	r2, [pc, #592]	@ (8005468 <UART_SetConfig+0x5c4>)
 8005218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800521c:	461a      	mov	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	fbb3 f3f2 	udiv	r3, r3, r2
 8005224:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	429a      	cmp	r2, r3
 8005234:	d305      	bcc.n	8005242 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	429a      	cmp	r2, r3
 8005240:	d903      	bls.n	800524a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005248:	e113      	b.n	8005472 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	2200      	movs	r2, #0
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	60fa      	str	r2, [r7, #12]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	4a84      	ldr	r2, [pc, #528]	@ (8005468 <UART_SetConfig+0x5c4>)
 8005258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525c:	b29b      	uxth	r3, r3
 800525e:	2200      	movs	r2, #0
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800526c:	f7fb fd24 	bl	8000cb8 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	020b      	lsls	r3, r1, #8
 8005282:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005286:	0202      	lsls	r2, r0, #8
 8005288:	6979      	ldr	r1, [r7, #20]
 800528a:	6849      	ldr	r1, [r1, #4]
 800528c:	0849      	lsrs	r1, r1, #1
 800528e:	2000      	movs	r0, #0
 8005290:	460c      	mov	r4, r1
 8005292:	4605      	mov	r5, r0
 8005294:	eb12 0804 	adds.w	r8, r2, r4
 8005298:	eb43 0905 	adc.w	r9, r3, r5
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	469a      	mov	sl, r3
 80052a4:	4693      	mov	fp, r2
 80052a6:	4652      	mov	r2, sl
 80052a8:	465b      	mov	r3, fp
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	f7fb fd03 	bl	8000cb8 <__aeabi_uldivmod>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4613      	mov	r3, r2
 80052b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052c0:	d308      	bcc.n	80052d4 <UART_SetConfig+0x430>
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052c8:	d204      	bcs.n	80052d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	e0ce      	b.n	8005472 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052da:	e0ca      	b.n	8005472 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e4:	d166      	bne.n	80053b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d827      	bhi.n	800533e <UART_SetConfig+0x49a>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <UART_SetConfig+0x450>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	0800533f 	.word	0x0800533f
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800533f 	.word	0x0800533f
 800530c:	0800533f 	.word	0x0800533f
 8005310:	0800533f 	.word	0x0800533f
 8005314:	08005337 	.word	0x08005337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005318:	f7fe fee2 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531e:	e014      	b.n	800534a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005320:	f7fe fef4 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005326:	e010      	b.n	800534a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005328:	4b4e      	ldr	r3, [pc, #312]	@ (8005464 <UART_SetConfig+0x5c0>)
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800532c:	e00d      	b.n	800534a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532e:	f7fe fe3f 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8090 	beq.w	8005472 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	4a44      	ldr	r2, [pc, #272]	@ (8005468 <UART_SetConfig+0x5c4>)
 8005358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535c:	461a      	mov	r2, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	fbb3 f3f2 	udiv	r3, r3, r2
 8005364:	005a      	lsls	r2, r3, #1
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d916      	bls.n	80053ac <UART_SetConfig+0x508>
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d212      	bcs.n	80053ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f023 030f 	bic.w	r3, r3, #15
 800538e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	b29a      	uxth	r2, r3
 800539c:	8bfb      	ldrh	r3, [r7, #30]
 800539e:	4313      	orrs	r3, r2
 80053a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	8bfa      	ldrh	r2, [r7, #30]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	e062      	b.n	8005472 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053b2:	e05e      	b.n	8005472 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d828      	bhi.n	800540e <UART_SetConfig+0x56a>
 80053bc:	a201      	add	r2, pc, #4	@ (adr r2, 80053c4 <UART_SetConfig+0x520>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	0800540f 	.word	0x0800540f
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	0800540f 	.word	0x0800540f
 80053e0:	0800540f 	.word	0x0800540f
 80053e4:	08005407 	.word	0x08005407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e8:	f7fe fe7a 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 80053ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ee:	e014      	b.n	800541a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7fe fe8c 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 80053f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053f6:	e010      	b.n	800541a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <UART_SetConfig+0x5c0>)
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053fc:	e00d      	b.n	800541a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fe:	f7fe fdd7 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005402:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005404:	e009      	b.n	800541a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800540c:	e005      	b.n	800541a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005418:	bf00      	nop
    }

    if (pclk != 0U)
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d028      	beq.n	8005472 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	4a10      	ldr	r2, [pc, #64]	@ (8005468 <UART_SetConfig+0x5c4>)
 8005426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800542a:	461a      	mov	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	441a      	add	r2, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d910      	bls.n	800546c <UART_SetConfig+0x5c8>
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005450:	d20c      	bcs.n	800546c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	b29a      	uxth	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e009      	b.n	8005472 <UART_SetConfig+0x5ce>
 800545e:	bf00      	nop
 8005460:	40008000 	.word	0x40008000
 8005464:	00f42400 	.word	0x00f42400
 8005468:	0800a364 	.word	0x0800a364
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2201      	movs	r2, #1
 8005476:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2201      	movs	r2, #1
 800547e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800548e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005492:	4618      	mov	r0, r3
 8005494:	3730      	adds	r7, #48	@ 0x30
 8005496:	46bd      	mov	sp, r7
 8005498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800549c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01a      	beq.n	80055b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559a:	d10a      	bne.n	80055b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]
  }
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b098      	sub	sp, #96	@ 0x60
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055f0:	f7fc fde8 	bl	80021c4 <HAL_GetTick>
 80055f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b08      	cmp	r3, #8
 8005602:	d12f      	bne.n	8005664 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800560c:	2200      	movs	r2, #0
 800560e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f88e 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d022      	beq.n	8005664 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005632:	653b      	str	r3, [r7, #80]	@ 0x50
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800563c:	647b      	str	r3, [r7, #68]	@ 0x44
 800563e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800564a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e063      	b.n	800572c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d149      	bne.n	8005706 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005672:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567a:	2200      	movs	r2, #0
 800567c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f857 	bl	8005734 <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d03c      	beq.n	8005706 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	623b      	str	r3, [r7, #32]
   return(result);
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056de:	61fa      	str	r2, [r7, #28]
 80056e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	69b9      	ldr	r1, [r7, #24]
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	617b      	str	r3, [r7, #20]
   return(result);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e012      	b.n	800572c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3758      	adds	r7, #88	@ 0x58
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005744:	e04f      	b.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d04b      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fc fd39 	bl	80021c4 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <UART_WaitOnFlagUntilTimeout+0x30>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e04e      	b.n	8005806 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d037      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b80      	cmp	r3, #128	@ 0x80
 800577a:	d034      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b40      	cmp	r3, #64	@ 0x40
 8005780:	d031      	beq.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b08      	cmp	r3, #8
 800578e:	d110      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2208      	movs	r2, #8
 8005796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f838 	bl	800580e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2208      	movs	r2, #8
 80057a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e029      	b.n	8005806 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c0:	d111      	bne.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f81e 	bl	800580e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e00f      	b.n	8005806 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	429a      	cmp	r2, r3
 8005802:	d0a0      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580e:	b480      	push	{r7}
 8005810:	b095      	sub	sp, #84	@ 0x54
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	643b      	str	r3, [r7, #64]	@ 0x40
 8005836:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800583a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	61fb      	str	r3, [r7, #28]
   return(result);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e3      	bne.n	8005848 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d118      	bne.n	80058ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	60bb      	str	r3, [r7, #8]
   return(result);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f023 0310 	bic.w	r3, r3, #16
 800589c:	647b      	str	r3, [r7, #68]	@ 0x44
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6979      	ldr	r1, [r7, #20]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	613b      	str	r3, [r7, #16]
   return(result);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e6      	bne.n	8005888 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058ce:	bf00      	nop
 80058d0:	3754      	adds	r7, #84	@ 0x54
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e027      	b.n	8005940 <HAL_UARTEx_DisableFifoMode+0x66>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2224      	movs	r2, #36	@ 0x24
 80058fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800591e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005960:	2302      	movs	r3, #2
 8005962:	e02d      	b.n	80059c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	@ 0x24
 8005970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f84f 	bl	8005a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059dc:	2302      	movs	r3, #2
 80059de:	e02d      	b.n	8005a3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	@ 0x24
 80059ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f811 	bl	8005a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a64:	e031      	b.n	8005aca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a66:	2308      	movs	r3, #8
 8005a68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	0e5b      	lsrs	r3, r3, #25
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	0f5b      	lsrs	r3, r3, #29
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	7b3a      	ldrb	r2, [r7, #12]
 8005a92:	4911      	ldr	r1, [pc, #68]	@ (8005ad8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a94:	5c8a      	ldrb	r2, [r1, r2]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a9a:	7b3a      	ldrb	r2, [r7, #12]
 8005a9c:	490f      	ldr	r1, [pc, #60]	@ (8005adc <UARTEx_SetNbDataToProcess+0x98>)
 8005a9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	7b7a      	ldrb	r2, [r7, #13]
 8005ab0:	4909      	ldr	r1, [pc, #36]	@ (8005ad8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ab2:	5c8a      	ldrb	r2, [r1, r2]
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ab8:	7b7a      	ldrb	r2, [r7, #13]
 8005aba:	4908      	ldr	r1, [pc, #32]	@ (8005adc <UARTEx_SetNbDataToProcess+0x98>)
 8005abc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005abe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	0800a37c 	.word	0x0800a37c
 8005adc:	0800a384 	.word	0x0800a384

08005ae0 <malloc>:
 8005ae0:	4b02      	ldr	r3, [pc, #8]	@ (8005aec <malloc+0xc>)
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	f000 b82d 	b.w	8005b44 <_malloc_r>
 8005aea:	bf00      	nop
 8005aec:	2000001c 	.word	0x2000001c

08005af0 <free>:
 8005af0:	4b02      	ldr	r3, [pc, #8]	@ (8005afc <free+0xc>)
 8005af2:	4601      	mov	r1, r0
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f002 b837 	b.w	8007b68 <_free_r>
 8005afa:	bf00      	nop
 8005afc:	2000001c 	.word	0x2000001c

08005b00 <sbrk_aligned>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4e0f      	ldr	r6, [pc, #60]	@ (8005b40 <sbrk_aligned+0x40>)
 8005b04:	460c      	mov	r4, r1
 8005b06:	6831      	ldr	r1, [r6, #0]
 8005b08:	4605      	mov	r5, r0
 8005b0a:	b911      	cbnz	r1, 8005b12 <sbrk_aligned+0x12>
 8005b0c:	f001 f97c 	bl	8006e08 <_sbrk_r>
 8005b10:	6030      	str	r0, [r6, #0]
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f001 f977 	bl	8006e08 <_sbrk_r>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d103      	bne.n	8005b26 <sbrk_aligned+0x26>
 8005b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b22:	4620      	mov	r0, r4
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	1cc4      	adds	r4, r0, #3
 8005b28:	f024 0403 	bic.w	r4, r4, #3
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d0f8      	beq.n	8005b22 <sbrk_aligned+0x22>
 8005b30:	1a21      	subs	r1, r4, r0
 8005b32:	4628      	mov	r0, r5
 8005b34:	f001 f968 	bl	8006e08 <_sbrk_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d1f2      	bne.n	8005b22 <sbrk_aligned+0x22>
 8005b3c:	e7ef      	b.n	8005b1e <sbrk_aligned+0x1e>
 8005b3e:	bf00      	nop
 8005b40:	20000450 	.word	0x20000450

08005b44 <_malloc_r>:
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b48:	1ccd      	adds	r5, r1, #3
 8005b4a:	f025 0503 	bic.w	r5, r5, #3
 8005b4e:	3508      	adds	r5, #8
 8005b50:	2d0c      	cmp	r5, #12
 8005b52:	bf38      	it	cc
 8005b54:	250c      	movcc	r5, #12
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	4606      	mov	r6, r0
 8005b5a:	db01      	blt.n	8005b60 <_malloc_r+0x1c>
 8005b5c:	42a9      	cmp	r1, r5
 8005b5e:	d904      	bls.n	8005b6a <_malloc_r+0x26>
 8005b60:	230c      	movs	r3, #12
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	2000      	movs	r0, #0
 8005b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c40 <_malloc_r+0xfc>
 8005b6e:	f000 f869 	bl	8005c44 <__malloc_lock>
 8005b72:	f8d8 3000 	ldr.w	r3, [r8]
 8005b76:	461c      	mov	r4, r3
 8005b78:	bb44      	cbnz	r4, 8005bcc <_malloc_r+0x88>
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7ff ffbf 	bl	8005b00 <sbrk_aligned>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	4604      	mov	r4, r0
 8005b86:	d158      	bne.n	8005c3a <_malloc_r+0xf6>
 8005b88:	f8d8 4000 	ldr.w	r4, [r8]
 8005b8c:	4627      	mov	r7, r4
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	d143      	bne.n	8005c1a <_malloc_r+0xd6>
 8005b92:	2c00      	cmp	r4, #0
 8005b94:	d04b      	beq.n	8005c2e <_malloc_r+0xea>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	4639      	mov	r1, r7
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	eb04 0903 	add.w	r9, r4, r3
 8005ba0:	f001 f932 	bl	8006e08 <_sbrk_r>
 8005ba4:	4581      	cmp	r9, r0
 8005ba6:	d142      	bne.n	8005c2e <_malloc_r+0xea>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	1a6d      	subs	r5, r5, r1
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ffa6 	bl	8005b00 <sbrk_aligned>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d03a      	beq.n	8005c2e <_malloc_r+0xea>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	442b      	add	r3, r5
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	bb62      	cbnz	r2, 8005c20 <_malloc_r+0xdc>
 8005bc6:	f8c8 7000 	str.w	r7, [r8]
 8005bca:	e00f      	b.n	8005bec <_malloc_r+0xa8>
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	1b52      	subs	r2, r2, r5
 8005bd0:	d420      	bmi.n	8005c14 <_malloc_r+0xd0>
 8005bd2:	2a0b      	cmp	r2, #11
 8005bd4:	d917      	bls.n	8005c06 <_malloc_r+0xc2>
 8005bd6:	1961      	adds	r1, r4, r5
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	6025      	str	r5, [r4, #0]
 8005bdc:	bf18      	it	ne
 8005bde:	6059      	strne	r1, [r3, #4]
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	bf08      	it	eq
 8005be4:	f8c8 1000 	streq.w	r1, [r8]
 8005be8:	5162      	str	r2, [r4, r5]
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 f82f 	bl	8005c50 <__malloc_unlock>
 8005bf2:	f104 000b 	add.w	r0, r4, #11
 8005bf6:	1d23      	adds	r3, r4, #4
 8005bf8:	f020 0007 	bic.w	r0, r0, #7
 8005bfc:	1ac2      	subs	r2, r0, r3
 8005bfe:	bf1c      	itt	ne
 8005c00:	1a1b      	subne	r3, r3, r0
 8005c02:	50a3      	strne	r3, [r4, r2]
 8005c04:	e7af      	b.n	8005b66 <_malloc_r+0x22>
 8005c06:	6862      	ldr	r2, [r4, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	bf0c      	ite	eq
 8005c0c:	f8c8 2000 	streq.w	r2, [r8]
 8005c10:	605a      	strne	r2, [r3, #4]
 8005c12:	e7eb      	b.n	8005bec <_malloc_r+0xa8>
 8005c14:	4623      	mov	r3, r4
 8005c16:	6864      	ldr	r4, [r4, #4]
 8005c18:	e7ae      	b.n	8005b78 <_malloc_r+0x34>
 8005c1a:	463c      	mov	r4, r7
 8005c1c:	687f      	ldr	r7, [r7, #4]
 8005c1e:	e7b6      	b.n	8005b8e <_malloc_r+0x4a>
 8005c20:	461a      	mov	r2, r3
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d1fb      	bne.n	8005c20 <_malloc_r+0xdc>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6053      	str	r3, [r2, #4]
 8005c2c:	e7de      	b.n	8005bec <_malloc_r+0xa8>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	6033      	str	r3, [r6, #0]
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 f80c 	bl	8005c50 <__malloc_unlock>
 8005c38:	e794      	b.n	8005b64 <_malloc_r+0x20>
 8005c3a:	6005      	str	r5, [r0, #0]
 8005c3c:	e7d6      	b.n	8005bec <_malloc_r+0xa8>
 8005c3e:	bf00      	nop
 8005c40:	20000454 	.word	0x20000454

08005c44 <__malloc_lock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	@ (8005c4c <__malloc_lock+0x8>)
 8005c46:	f001 b92c 	b.w	8006ea2 <__retarget_lock_acquire_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000598 	.word	0x20000598

08005c50 <__malloc_unlock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	@ (8005c58 <__malloc_unlock+0x8>)
 8005c52:	f001 b927 	b.w	8006ea4 <__retarget_lock_release_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000598 	.word	0x20000598

08005c5c <__cvt>:
 8005c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	ec57 6b10 	vmov	r6, r7, d0
 8005c64:	2f00      	cmp	r7, #0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4619      	mov	r1, r3
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	bfbb      	ittet	lt
 8005c6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c72:	461f      	movlt	r7, r3
 8005c74:	2300      	movge	r3, #0
 8005c76:	232d      	movlt	r3, #45	@ 0x2d
 8005c78:	700b      	strb	r3, [r1, #0]
 8005c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c80:	4691      	mov	r9, r2
 8005c82:	f023 0820 	bic.w	r8, r3, #32
 8005c86:	bfbc      	itt	lt
 8005c88:	4632      	movlt	r2, r6
 8005c8a:	4616      	movlt	r6, r2
 8005c8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c90:	d005      	beq.n	8005c9e <__cvt+0x42>
 8005c92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c96:	d100      	bne.n	8005c9a <__cvt+0x3e>
 8005c98:	3401      	adds	r4, #1
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	e000      	b.n	8005ca0 <__cvt+0x44>
 8005c9e:	2103      	movs	r1, #3
 8005ca0:	ab03      	add	r3, sp, #12
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	ab02      	add	r3, sp, #8
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	ec47 6b10 	vmov	d0, r6, r7
 8005cac:	4653      	mov	r3, sl
 8005cae:	4622      	mov	r2, r4
 8005cb0:	f001 f996 	bl	8006fe0 <_dtoa_r>
 8005cb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005cb8:	4605      	mov	r5, r0
 8005cba:	d119      	bne.n	8005cf0 <__cvt+0x94>
 8005cbc:	f019 0f01 	tst.w	r9, #1
 8005cc0:	d00e      	beq.n	8005ce0 <__cvt+0x84>
 8005cc2:	eb00 0904 	add.w	r9, r0, r4
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f7fa ff13 	bl	8000af8 <__aeabi_dcmpeq>
 8005cd2:	b108      	cbz	r0, 8005cd8 <__cvt+0x7c>
 8005cd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cd8:	2230      	movs	r2, #48	@ 0x30
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	454b      	cmp	r3, r9
 8005cde:	d31e      	bcc.n	8005d1e <__cvt+0xc2>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ce4:	1b5b      	subs	r3, r3, r5
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	b004      	add	sp, #16
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cf4:	eb00 0904 	add.w	r9, r0, r4
 8005cf8:	d1e5      	bne.n	8005cc6 <__cvt+0x6a>
 8005cfa:	7803      	ldrb	r3, [r0, #0]
 8005cfc:	2b30      	cmp	r3, #48	@ 0x30
 8005cfe:	d10a      	bne.n	8005d16 <__cvt+0xba>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4630      	mov	r0, r6
 8005d06:	4639      	mov	r1, r7
 8005d08:	f7fa fef6 	bl	8000af8 <__aeabi_dcmpeq>
 8005d0c:	b918      	cbnz	r0, 8005d16 <__cvt+0xba>
 8005d0e:	f1c4 0401 	rsb	r4, r4, #1
 8005d12:	f8ca 4000 	str.w	r4, [sl]
 8005d16:	f8da 3000 	ldr.w	r3, [sl]
 8005d1a:	4499      	add	r9, r3
 8005d1c:	e7d3      	b.n	8005cc6 <__cvt+0x6a>
 8005d1e:	1c59      	adds	r1, r3, #1
 8005d20:	9103      	str	r1, [sp, #12]
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e7d9      	b.n	8005cda <__cvt+0x7e>

08005d26 <__exponent>:
 8005d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	bfba      	itte	lt
 8005d2c:	4249      	neglt	r1, r1
 8005d2e:	232d      	movlt	r3, #45	@ 0x2d
 8005d30:	232b      	movge	r3, #43	@ 0x2b
 8005d32:	2909      	cmp	r1, #9
 8005d34:	7002      	strb	r2, [r0, #0]
 8005d36:	7043      	strb	r3, [r0, #1]
 8005d38:	dd29      	ble.n	8005d8e <__exponent+0x68>
 8005d3a:	f10d 0307 	add.w	r3, sp, #7
 8005d3e:	461d      	mov	r5, r3
 8005d40:	270a      	movs	r7, #10
 8005d42:	461a      	mov	r2, r3
 8005d44:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d48:	fb07 1416 	mls	r4, r7, r6, r1
 8005d4c:	3430      	adds	r4, #48	@ 0x30
 8005d4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d52:	460c      	mov	r4, r1
 8005d54:	2c63      	cmp	r4, #99	@ 0x63
 8005d56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	dcf1      	bgt.n	8005d42 <__exponent+0x1c>
 8005d5e:	3130      	adds	r1, #48	@ 0x30
 8005d60:	1e94      	subs	r4, r2, #2
 8005d62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d66:	1c41      	adds	r1, r0, #1
 8005d68:	4623      	mov	r3, r4
 8005d6a:	42ab      	cmp	r3, r5
 8005d6c:	d30a      	bcc.n	8005d84 <__exponent+0x5e>
 8005d6e:	f10d 0309 	add.w	r3, sp, #9
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	42ac      	cmp	r4, r5
 8005d76:	bf88      	it	hi
 8005d78:	2300      	movhi	r3, #0
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	4403      	add	r3, r0
 8005d7e:	1a18      	subs	r0, r3, r0
 8005d80:	b003      	add	sp, #12
 8005d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d8c:	e7ed      	b.n	8005d6a <__exponent+0x44>
 8005d8e:	2330      	movs	r3, #48	@ 0x30
 8005d90:	3130      	adds	r1, #48	@ 0x30
 8005d92:	7083      	strb	r3, [r0, #2]
 8005d94:	70c1      	strb	r1, [r0, #3]
 8005d96:	1d03      	adds	r3, r0, #4
 8005d98:	e7f1      	b.n	8005d7e <__exponent+0x58>
	...

08005d9c <_printf_float>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	b08d      	sub	sp, #52	@ 0x34
 8005da2:	460c      	mov	r4, r1
 8005da4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005da8:	4616      	mov	r6, r2
 8005daa:	461f      	mov	r7, r3
 8005dac:	4605      	mov	r5, r0
 8005dae:	f000 fff3 	bl	8006d98 <_localeconv_r>
 8005db2:	6803      	ldr	r3, [r0, #0]
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fa fa72 	bl	80002a0 <strlen>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc4:	9005      	str	r0, [sp, #20]
 8005dc6:	3307      	adds	r3, #7
 8005dc8:	f023 0307 	bic.w	r3, r3, #7
 8005dcc:	f103 0208 	add.w	r2, r3, #8
 8005dd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005dd4:	f8d4 b000 	ldr.w	fp, [r4]
 8005dd8:	f8c8 2000 	str.w	r2, [r8]
 8005ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005de0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005de4:	9307      	str	r3, [sp, #28]
 8005de6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005df2:	4b9c      	ldr	r3, [pc, #624]	@ (8006064 <_printf_float+0x2c8>)
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	f7fa feb0 	bl	8000b5c <__aeabi_dcmpun>
 8005dfc:	bb70      	cbnz	r0, 8005e5c <_printf_float+0xc0>
 8005dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e02:	4b98      	ldr	r3, [pc, #608]	@ (8006064 <_printf_float+0x2c8>)
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	f7fa fe8a 	bl	8000b20 <__aeabi_dcmple>
 8005e0c:	bb30      	cbnz	r0, 8005e5c <_printf_float+0xc0>
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2300      	movs	r3, #0
 8005e12:	4640      	mov	r0, r8
 8005e14:	4649      	mov	r1, r9
 8005e16:	f7fa fe79 	bl	8000b0c <__aeabi_dcmplt>
 8005e1a:	b110      	cbz	r0, 8005e22 <_printf_float+0x86>
 8005e1c:	232d      	movs	r3, #45	@ 0x2d
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e22:	4a91      	ldr	r2, [pc, #580]	@ (8006068 <_printf_float+0x2cc>)
 8005e24:	4b91      	ldr	r3, [pc, #580]	@ (800606c <_printf_float+0x2d0>)
 8005e26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e2a:	bf94      	ite	ls
 8005e2c:	4690      	movls	r8, r2
 8005e2e:	4698      	movhi	r8, r3
 8005e30:	2303      	movs	r3, #3
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	f02b 0304 	bic.w	r3, fp, #4
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	f04f 0900 	mov.w	r9, #0
 8005e3e:	9700      	str	r7, [sp, #0]
 8005e40:	4633      	mov	r3, r6
 8005e42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e44:	4621      	mov	r1, r4
 8005e46:	4628      	mov	r0, r5
 8005e48:	f000 f9d2 	bl	80061f0 <_printf_common>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f040 808d 	bne.w	8005f6c <_printf_float+0x1d0>
 8005e52:	f04f 30ff 	mov.w	r0, #4294967295
 8005e56:	b00d      	add	sp, #52	@ 0x34
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	4649      	mov	r1, r9
 8005e64:	f7fa fe7a 	bl	8000b5c <__aeabi_dcmpun>
 8005e68:	b140      	cbz	r0, 8005e7c <_printf_float+0xe0>
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bfbc      	itt	lt
 8005e70:	232d      	movlt	r3, #45	@ 0x2d
 8005e72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e76:	4a7e      	ldr	r2, [pc, #504]	@ (8006070 <_printf_float+0x2d4>)
 8005e78:	4b7e      	ldr	r3, [pc, #504]	@ (8006074 <_printf_float+0x2d8>)
 8005e7a:	e7d4      	b.n	8005e26 <_printf_float+0x8a>
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e82:	9206      	str	r2, [sp, #24]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	d13b      	bne.n	8005f00 <_printf_float+0x164>
 8005e88:	2306      	movs	r3, #6
 8005e8a:	6063      	str	r3, [r4, #4]
 8005e8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e90:	2300      	movs	r3, #0
 8005e92:	6022      	str	r2, [r4, #0]
 8005e94:	9303      	str	r3, [sp, #12]
 8005e96:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e9c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	ec49 8b10 	vmov	d0, r8, r9
 8005ea6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7ff fed6 	bl	8005c5c <__cvt>
 8005eb0:	9b06      	ldr	r3, [sp, #24]
 8005eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005eb4:	2b47      	cmp	r3, #71	@ 0x47
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	d129      	bne.n	8005f0e <_printf_float+0x172>
 8005eba:	1cc8      	adds	r0, r1, #3
 8005ebc:	db02      	blt.n	8005ec4 <_printf_float+0x128>
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	dd41      	ble.n	8005f48 <_printf_float+0x1ac>
 8005ec4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ec8:	fa5f fa8a 	uxtb.w	sl, sl
 8005ecc:	3901      	subs	r1, #1
 8005ece:	4652      	mov	r2, sl
 8005ed0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ed4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ed6:	f7ff ff26 	bl	8005d26 <__exponent>
 8005eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005edc:	1813      	adds	r3, r2, r0
 8005ede:	2a01      	cmp	r2, #1
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	dc02      	bgt.n	8005eec <_printf_float+0x150>
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	07d2      	lsls	r2, r2, #31
 8005eea:	d501      	bpl.n	8005ef0 <_printf_float+0x154>
 8005eec:	3301      	adds	r3, #1
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0a2      	beq.n	8005e3e <_printf_float+0xa2>
 8005ef8:	232d      	movs	r3, #45	@ 0x2d
 8005efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005efe:	e79e      	b.n	8005e3e <_printf_float+0xa2>
 8005f00:	9a06      	ldr	r2, [sp, #24]
 8005f02:	2a47      	cmp	r2, #71	@ 0x47
 8005f04:	d1c2      	bne.n	8005e8c <_printf_float+0xf0>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1c0      	bne.n	8005e8c <_printf_float+0xf0>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e7bd      	b.n	8005e8a <_printf_float+0xee>
 8005f0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f12:	d9db      	bls.n	8005ecc <_printf_float+0x130>
 8005f14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f18:	d118      	bne.n	8005f4c <_printf_float+0x1b0>
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	6863      	ldr	r3, [r4, #4]
 8005f1e:	dd0b      	ble.n	8005f38 <_printf_float+0x19c>
 8005f20:	6121      	str	r1, [r4, #16]
 8005f22:	b913      	cbnz	r3, 8005f2a <_printf_float+0x18e>
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	07d0      	lsls	r0, r2, #31
 8005f28:	d502      	bpl.n	8005f30 <_printf_float+0x194>
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	440b      	add	r3, r1
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	e7db      	b.n	8005ef0 <_printf_float+0x154>
 8005f38:	b913      	cbnz	r3, 8005f40 <_printf_float+0x1a4>
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	07d2      	lsls	r2, r2, #31
 8005f3e:	d501      	bpl.n	8005f44 <_printf_float+0x1a8>
 8005f40:	3302      	adds	r3, #2
 8005f42:	e7f4      	b.n	8005f2e <_printf_float+0x192>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e7f2      	b.n	8005f2e <_printf_float+0x192>
 8005f48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	db05      	blt.n	8005f5e <_printf_float+0x1c2>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	6121      	str	r1, [r4, #16]
 8005f56:	07d8      	lsls	r0, r3, #31
 8005f58:	d5ea      	bpl.n	8005f30 <_printf_float+0x194>
 8005f5a:	1c4b      	adds	r3, r1, #1
 8005f5c:	e7e7      	b.n	8005f2e <_printf_float+0x192>
 8005f5e:	2900      	cmp	r1, #0
 8005f60:	bfd4      	ite	le
 8005f62:	f1c1 0202 	rsble	r2, r1, #2
 8005f66:	2201      	movgt	r2, #1
 8005f68:	4413      	add	r3, r2
 8005f6a:	e7e0      	b.n	8005f2e <_printf_float+0x192>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	055a      	lsls	r2, r3, #21
 8005f70:	d407      	bmi.n	8005f82 <_printf_float+0x1e6>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	4642      	mov	r2, r8
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d12b      	bne.n	8005fd8 <_printf_float+0x23c>
 8005f80:	e767      	b.n	8005e52 <_printf_float+0xb6>
 8005f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f86:	f240 80dd 	bls.w	8006144 <_printf_float+0x3a8>
 8005f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2300      	movs	r3, #0
 8005f92:	f7fa fdb1 	bl	8000af8 <__aeabi_dcmpeq>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d033      	beq.n	8006002 <_printf_float+0x266>
 8005f9a:	4a37      	ldr	r2, [pc, #220]	@ (8006078 <_printf_float+0x2dc>)
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f43f af54 	beq.w	8005e52 <_printf_float+0xb6>
 8005faa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005fae:	4543      	cmp	r3, r8
 8005fb0:	db02      	blt.n	8005fb8 <_printf_float+0x21c>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	07d8      	lsls	r0, r3, #31
 8005fb6:	d50f      	bpl.n	8005fd8 <_printf_float+0x23c>
 8005fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f af45 	beq.w	8005e52 <_printf_float+0xb6>
 8005fc8:	f04f 0900 	mov.w	r9, #0
 8005fcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fd0:	f104 0a1a 	add.w	sl, r4, #26
 8005fd4:	45c8      	cmp	r8, r9
 8005fd6:	dc09      	bgt.n	8005fec <_printf_float+0x250>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	079b      	lsls	r3, r3, #30
 8005fdc:	f100 8103 	bmi.w	80061e6 <_printf_float+0x44a>
 8005fe0:	68e0      	ldr	r0, [r4, #12]
 8005fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fe4:	4298      	cmp	r0, r3
 8005fe6:	bfb8      	it	lt
 8005fe8:	4618      	movlt	r0, r3
 8005fea:	e734      	b.n	8005e56 <_printf_float+0xba>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4652      	mov	r2, sl
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f af2b 	beq.w	8005e52 <_printf_float+0xb6>
 8005ffc:	f109 0901 	add.w	r9, r9, #1
 8006000:	e7e8      	b.n	8005fd4 <_printf_float+0x238>
 8006002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	dc39      	bgt.n	800607c <_printf_float+0x2e0>
 8006008:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <_printf_float+0x2dc>)
 800600a:	2301      	movs	r3, #1
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	f43f af1d 	beq.w	8005e52 <_printf_float+0xb6>
 8006018:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800601c:	ea59 0303 	orrs.w	r3, r9, r3
 8006020:	d102      	bne.n	8006028 <_printf_float+0x28c>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	07d9      	lsls	r1, r3, #31
 8006026:	d5d7      	bpl.n	8005fd8 <_printf_float+0x23c>
 8006028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f af0d 	beq.w	8005e52 <_printf_float+0xb6>
 8006038:	f04f 0a00 	mov.w	sl, #0
 800603c:	f104 0b1a 	add.w	fp, r4, #26
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	425b      	negs	r3, r3
 8006044:	4553      	cmp	r3, sl
 8006046:	dc01      	bgt.n	800604c <_printf_float+0x2b0>
 8006048:	464b      	mov	r3, r9
 800604a:	e793      	b.n	8005f74 <_printf_float+0x1d8>
 800604c:	2301      	movs	r3, #1
 800604e:	465a      	mov	r2, fp
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f aefb 	beq.w	8005e52 <_printf_float+0xb6>
 800605c:	f10a 0a01 	add.w	sl, sl, #1
 8006060:	e7ee      	b.n	8006040 <_printf_float+0x2a4>
 8006062:	bf00      	nop
 8006064:	7fefffff 	.word	0x7fefffff
 8006068:	0800a38c 	.word	0x0800a38c
 800606c:	0800a390 	.word	0x0800a390
 8006070:	0800a394 	.word	0x0800a394
 8006074:	0800a398 	.word	0x0800a398
 8006078:	0800a39c 	.word	0x0800a39c
 800607c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800607e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006082:	4553      	cmp	r3, sl
 8006084:	bfa8      	it	ge
 8006086:	4653      	movge	r3, sl
 8006088:	2b00      	cmp	r3, #0
 800608a:	4699      	mov	r9, r3
 800608c:	dc36      	bgt.n	80060fc <_printf_float+0x360>
 800608e:	f04f 0b00 	mov.w	fp, #0
 8006092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006096:	f104 021a 	add.w	r2, r4, #26
 800609a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800609c:	9306      	str	r3, [sp, #24]
 800609e:	eba3 0309 	sub.w	r3, r3, r9
 80060a2:	455b      	cmp	r3, fp
 80060a4:	dc31      	bgt.n	800610a <_printf_float+0x36e>
 80060a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a8:	459a      	cmp	sl, r3
 80060aa:	dc3a      	bgt.n	8006122 <_printf_float+0x386>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	07da      	lsls	r2, r3, #31
 80060b0:	d437      	bmi.n	8006122 <_printf_float+0x386>
 80060b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b4:	ebaa 0903 	sub.w	r9, sl, r3
 80060b8:	9b06      	ldr	r3, [sp, #24]
 80060ba:	ebaa 0303 	sub.w	r3, sl, r3
 80060be:	4599      	cmp	r9, r3
 80060c0:	bfa8      	it	ge
 80060c2:	4699      	movge	r9, r3
 80060c4:	f1b9 0f00 	cmp.w	r9, #0
 80060c8:	dc33      	bgt.n	8006132 <_printf_float+0x396>
 80060ca:	f04f 0800 	mov.w	r8, #0
 80060ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060d2:	f104 0b1a 	add.w	fp, r4, #26
 80060d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d8:	ebaa 0303 	sub.w	r3, sl, r3
 80060dc:	eba3 0309 	sub.w	r3, r3, r9
 80060e0:	4543      	cmp	r3, r8
 80060e2:	f77f af79 	ble.w	8005fd8 <_printf_float+0x23c>
 80060e6:	2301      	movs	r3, #1
 80060e8:	465a      	mov	r2, fp
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f aeae 	beq.w	8005e52 <_printf_float+0xb6>
 80060f6:	f108 0801 	add.w	r8, r8, #1
 80060fa:	e7ec      	b.n	80060d6 <_printf_float+0x33a>
 80060fc:	4642      	mov	r2, r8
 80060fe:	4631      	mov	r1, r6
 8006100:	4628      	mov	r0, r5
 8006102:	47b8      	blx	r7
 8006104:	3001      	adds	r0, #1
 8006106:	d1c2      	bne.n	800608e <_printf_float+0x2f2>
 8006108:	e6a3      	b.n	8005e52 <_printf_float+0xb6>
 800610a:	2301      	movs	r3, #1
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	9206      	str	r2, [sp, #24]
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f ae9c 	beq.w	8005e52 <_printf_float+0xb6>
 800611a:	9a06      	ldr	r2, [sp, #24]
 800611c:	f10b 0b01 	add.w	fp, fp, #1
 8006120:	e7bb      	b.n	800609a <_printf_float+0x2fe>
 8006122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d1c0      	bne.n	80060b2 <_printf_float+0x316>
 8006130:	e68f      	b.n	8005e52 <_printf_float+0xb6>
 8006132:	9a06      	ldr	r2, [sp, #24]
 8006134:	464b      	mov	r3, r9
 8006136:	4442      	add	r2, r8
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	d1c3      	bne.n	80060ca <_printf_float+0x32e>
 8006142:	e686      	b.n	8005e52 <_printf_float+0xb6>
 8006144:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006148:	f1ba 0f01 	cmp.w	sl, #1
 800614c:	dc01      	bgt.n	8006152 <_printf_float+0x3b6>
 800614e:	07db      	lsls	r3, r3, #31
 8006150:	d536      	bpl.n	80061c0 <_printf_float+0x424>
 8006152:	2301      	movs	r3, #1
 8006154:	4642      	mov	r2, r8
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f ae78 	beq.w	8005e52 <_printf_float+0xb6>
 8006162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	f43f ae70 	beq.w	8005e52 <_printf_float+0xb6>
 8006172:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006176:	2200      	movs	r2, #0
 8006178:	2300      	movs	r3, #0
 800617a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800617e:	f7fa fcbb 	bl	8000af8 <__aeabi_dcmpeq>
 8006182:	b9c0      	cbnz	r0, 80061b6 <_printf_float+0x41a>
 8006184:	4653      	mov	r3, sl
 8006186:	f108 0201 	add.w	r2, r8, #1
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	d10c      	bne.n	80061ae <_printf_float+0x412>
 8006194:	e65d      	b.n	8005e52 <_printf_float+0xb6>
 8006196:	2301      	movs	r3, #1
 8006198:	465a      	mov	r2, fp
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	f43f ae56 	beq.w	8005e52 <_printf_float+0xb6>
 80061a6:	f108 0801 	add.w	r8, r8, #1
 80061aa:	45d0      	cmp	r8, sl
 80061ac:	dbf3      	blt.n	8006196 <_printf_float+0x3fa>
 80061ae:	464b      	mov	r3, r9
 80061b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061b4:	e6df      	b.n	8005f76 <_printf_float+0x1da>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	f104 0b1a 	add.w	fp, r4, #26
 80061be:	e7f4      	b.n	80061aa <_printf_float+0x40e>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4642      	mov	r2, r8
 80061c4:	e7e1      	b.n	800618a <_printf_float+0x3ee>
 80061c6:	2301      	movs	r3, #1
 80061c8:	464a      	mov	r2, r9
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae3e 	beq.w	8005e52 <_printf_float+0xb6>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	68e3      	ldr	r3, [r4, #12]
 80061dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061de:	1a5b      	subs	r3, r3, r1
 80061e0:	4543      	cmp	r3, r8
 80061e2:	dcf0      	bgt.n	80061c6 <_printf_float+0x42a>
 80061e4:	e6fc      	b.n	8005fe0 <_printf_float+0x244>
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	f104 0919 	add.w	r9, r4, #25
 80061ee:	e7f4      	b.n	80061da <_printf_float+0x43e>

080061f0 <_printf_common>:
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	4616      	mov	r6, r2
 80061f6:	4698      	mov	r8, r3
 80061f8:	688a      	ldr	r2, [r1, #8]
 80061fa:	690b      	ldr	r3, [r1, #16]
 80061fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006200:	4293      	cmp	r3, r2
 8006202:	bfb8      	it	lt
 8006204:	4613      	movlt	r3, r2
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800620c:	4607      	mov	r7, r0
 800620e:	460c      	mov	r4, r1
 8006210:	b10a      	cbz	r2, 8006216 <_printf_common+0x26>
 8006212:	3301      	adds	r3, #1
 8006214:	6033      	str	r3, [r6, #0]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	0699      	lsls	r1, r3, #26
 800621a:	bf42      	ittt	mi
 800621c:	6833      	ldrmi	r3, [r6, #0]
 800621e:	3302      	addmi	r3, #2
 8006220:	6033      	strmi	r3, [r6, #0]
 8006222:	6825      	ldr	r5, [r4, #0]
 8006224:	f015 0506 	ands.w	r5, r5, #6
 8006228:	d106      	bne.n	8006238 <_printf_common+0x48>
 800622a:	f104 0a19 	add.w	sl, r4, #25
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	6832      	ldr	r2, [r6, #0]
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	42ab      	cmp	r3, r5
 8006236:	dc26      	bgt.n	8006286 <_printf_common+0x96>
 8006238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	3b00      	subs	r3, #0
 8006240:	bf18      	it	ne
 8006242:	2301      	movne	r3, #1
 8006244:	0692      	lsls	r2, r2, #26
 8006246:	d42b      	bmi.n	80062a0 <_printf_common+0xb0>
 8006248:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800624c:	4641      	mov	r1, r8
 800624e:	4638      	mov	r0, r7
 8006250:	47c8      	blx	r9
 8006252:	3001      	adds	r0, #1
 8006254:	d01e      	beq.n	8006294 <_printf_common+0xa4>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	6922      	ldr	r2, [r4, #16]
 800625a:	f003 0306 	and.w	r3, r3, #6
 800625e:	2b04      	cmp	r3, #4
 8006260:	bf02      	ittt	eq
 8006262:	68e5      	ldreq	r5, [r4, #12]
 8006264:	6833      	ldreq	r3, [r6, #0]
 8006266:	1aed      	subeq	r5, r5, r3
 8006268:	68a3      	ldr	r3, [r4, #8]
 800626a:	bf0c      	ite	eq
 800626c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006270:	2500      	movne	r5, #0
 8006272:	4293      	cmp	r3, r2
 8006274:	bfc4      	itt	gt
 8006276:	1a9b      	subgt	r3, r3, r2
 8006278:	18ed      	addgt	r5, r5, r3
 800627a:	2600      	movs	r6, #0
 800627c:	341a      	adds	r4, #26
 800627e:	42b5      	cmp	r5, r6
 8006280:	d11a      	bne.n	80062b8 <_printf_common+0xc8>
 8006282:	2000      	movs	r0, #0
 8006284:	e008      	b.n	8006298 <_printf_common+0xa8>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4641      	mov	r1, r8
 800628c:	4638      	mov	r0, r7
 800628e:	47c8      	blx	r9
 8006290:	3001      	adds	r0, #1
 8006292:	d103      	bne.n	800629c <_printf_common+0xac>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629c:	3501      	adds	r5, #1
 800629e:	e7c6      	b.n	800622e <_printf_common+0x3e>
 80062a0:	18e1      	adds	r1, r4, r3
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	2030      	movs	r0, #48	@ 0x30
 80062a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062aa:	4422      	add	r2, r4
 80062ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062b4:	3302      	adds	r3, #2
 80062b6:	e7c7      	b.n	8006248 <_printf_common+0x58>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4622      	mov	r2, r4
 80062bc:	4641      	mov	r1, r8
 80062be:	4638      	mov	r0, r7
 80062c0:	47c8      	blx	r9
 80062c2:	3001      	adds	r0, #1
 80062c4:	d0e6      	beq.n	8006294 <_printf_common+0xa4>
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7d9      	b.n	800627e <_printf_common+0x8e>
	...

080062cc <_printf_i>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	7e0f      	ldrb	r7, [r1, #24]
 80062d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062d4:	2f78      	cmp	r7, #120	@ 0x78
 80062d6:	4691      	mov	r9, r2
 80062d8:	4680      	mov	r8, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	469a      	mov	sl, r3
 80062de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062e2:	d807      	bhi.n	80062f4 <_printf_i+0x28>
 80062e4:	2f62      	cmp	r7, #98	@ 0x62
 80062e6:	d80a      	bhi.n	80062fe <_printf_i+0x32>
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	f000 80d2 	beq.w	8006492 <_printf_i+0x1c6>
 80062ee:	2f58      	cmp	r7, #88	@ 0x58
 80062f0:	f000 80b9 	beq.w	8006466 <_printf_i+0x19a>
 80062f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062fc:	e03a      	b.n	8006374 <_printf_i+0xa8>
 80062fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006302:	2b15      	cmp	r3, #21
 8006304:	d8f6      	bhi.n	80062f4 <_printf_i+0x28>
 8006306:	a101      	add	r1, pc, #4	@ (adr r1, 800630c <_printf_i+0x40>)
 8006308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800630c:	08006365 	.word	0x08006365
 8006310:	08006379 	.word	0x08006379
 8006314:	080062f5 	.word	0x080062f5
 8006318:	080062f5 	.word	0x080062f5
 800631c:	080062f5 	.word	0x080062f5
 8006320:	080062f5 	.word	0x080062f5
 8006324:	08006379 	.word	0x08006379
 8006328:	080062f5 	.word	0x080062f5
 800632c:	080062f5 	.word	0x080062f5
 8006330:	080062f5 	.word	0x080062f5
 8006334:	080062f5 	.word	0x080062f5
 8006338:	08006479 	.word	0x08006479
 800633c:	080063a3 	.word	0x080063a3
 8006340:	08006433 	.word	0x08006433
 8006344:	080062f5 	.word	0x080062f5
 8006348:	080062f5 	.word	0x080062f5
 800634c:	0800649b 	.word	0x0800649b
 8006350:	080062f5 	.word	0x080062f5
 8006354:	080063a3 	.word	0x080063a3
 8006358:	080062f5 	.word	0x080062f5
 800635c:	080062f5 	.word	0x080062f5
 8006360:	0800643b 	.word	0x0800643b
 8006364:	6833      	ldr	r3, [r6, #0]
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6032      	str	r2, [r6, #0]
 800636c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006370:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006374:	2301      	movs	r3, #1
 8006376:	e09d      	b.n	80064b4 <_printf_i+0x1e8>
 8006378:	6833      	ldr	r3, [r6, #0]
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1d19      	adds	r1, r3, #4
 800637e:	6031      	str	r1, [r6, #0]
 8006380:	0606      	lsls	r6, r0, #24
 8006382:	d501      	bpl.n	8006388 <_printf_i+0xbc>
 8006384:	681d      	ldr	r5, [r3, #0]
 8006386:	e003      	b.n	8006390 <_printf_i+0xc4>
 8006388:	0645      	lsls	r5, r0, #25
 800638a:	d5fb      	bpl.n	8006384 <_printf_i+0xb8>
 800638c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006390:	2d00      	cmp	r5, #0
 8006392:	da03      	bge.n	800639c <_printf_i+0xd0>
 8006394:	232d      	movs	r3, #45	@ 0x2d
 8006396:	426d      	negs	r5, r5
 8006398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800639c:	4859      	ldr	r0, [pc, #356]	@ (8006504 <_printf_i+0x238>)
 800639e:	230a      	movs	r3, #10
 80063a0:	e011      	b.n	80063c6 <_printf_i+0xfa>
 80063a2:	6821      	ldr	r1, [r4, #0]
 80063a4:	6833      	ldr	r3, [r6, #0]
 80063a6:	0608      	lsls	r0, r1, #24
 80063a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80063ac:	d402      	bmi.n	80063b4 <_printf_i+0xe8>
 80063ae:	0649      	lsls	r1, r1, #25
 80063b0:	bf48      	it	mi
 80063b2:	b2ad      	uxthmi	r5, r5
 80063b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80063b6:	4853      	ldr	r0, [pc, #332]	@ (8006504 <_printf_i+0x238>)
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	bf14      	ite	ne
 80063bc:	230a      	movne	r3, #10
 80063be:	2308      	moveq	r3, #8
 80063c0:	2100      	movs	r1, #0
 80063c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063c6:	6866      	ldr	r6, [r4, #4]
 80063c8:	60a6      	str	r6, [r4, #8]
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	bfa2      	ittt	ge
 80063ce:	6821      	ldrge	r1, [r4, #0]
 80063d0:	f021 0104 	bicge.w	r1, r1, #4
 80063d4:	6021      	strge	r1, [r4, #0]
 80063d6:	b90d      	cbnz	r5, 80063dc <_printf_i+0x110>
 80063d8:	2e00      	cmp	r6, #0
 80063da:	d04b      	beq.n	8006474 <_printf_i+0x1a8>
 80063dc:	4616      	mov	r6, r2
 80063de:	fbb5 f1f3 	udiv	r1, r5, r3
 80063e2:	fb03 5711 	mls	r7, r3, r1, r5
 80063e6:	5dc7      	ldrb	r7, [r0, r7]
 80063e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ec:	462f      	mov	r7, r5
 80063ee:	42bb      	cmp	r3, r7
 80063f0:	460d      	mov	r5, r1
 80063f2:	d9f4      	bls.n	80063de <_printf_i+0x112>
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d10b      	bne.n	8006410 <_printf_i+0x144>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07df      	lsls	r7, r3, #31
 80063fc:	d508      	bpl.n	8006410 <_printf_i+0x144>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	6861      	ldr	r1, [r4, #4]
 8006402:	4299      	cmp	r1, r3
 8006404:	bfde      	ittt	le
 8006406:	2330      	movle	r3, #48	@ 0x30
 8006408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800640c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006410:	1b92      	subs	r2, r2, r6
 8006412:	6122      	str	r2, [r4, #16]
 8006414:	f8cd a000 	str.w	sl, [sp]
 8006418:	464b      	mov	r3, r9
 800641a:	aa03      	add	r2, sp, #12
 800641c:	4621      	mov	r1, r4
 800641e:	4640      	mov	r0, r8
 8006420:	f7ff fee6 	bl	80061f0 <_printf_common>
 8006424:	3001      	adds	r0, #1
 8006426:	d14a      	bne.n	80064be <_printf_i+0x1f2>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	b004      	add	sp, #16
 800642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f043 0320 	orr.w	r3, r3, #32
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	4833      	ldr	r0, [pc, #204]	@ (8006508 <_printf_i+0x23c>)
 800643c:	2778      	movs	r7, #120	@ 0x78
 800643e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6831      	ldr	r1, [r6, #0]
 8006446:	061f      	lsls	r7, r3, #24
 8006448:	f851 5b04 	ldr.w	r5, [r1], #4
 800644c:	d402      	bmi.n	8006454 <_printf_i+0x188>
 800644e:	065f      	lsls	r7, r3, #25
 8006450:	bf48      	it	mi
 8006452:	b2ad      	uxthmi	r5, r5
 8006454:	6031      	str	r1, [r6, #0]
 8006456:	07d9      	lsls	r1, r3, #31
 8006458:	bf44      	itt	mi
 800645a:	f043 0320 	orrmi.w	r3, r3, #32
 800645e:	6023      	strmi	r3, [r4, #0]
 8006460:	b11d      	cbz	r5, 800646a <_printf_i+0x19e>
 8006462:	2310      	movs	r3, #16
 8006464:	e7ac      	b.n	80063c0 <_printf_i+0xf4>
 8006466:	4827      	ldr	r0, [pc, #156]	@ (8006504 <_printf_i+0x238>)
 8006468:	e7e9      	b.n	800643e <_printf_i+0x172>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	f023 0320 	bic.w	r3, r3, #32
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	e7f6      	b.n	8006462 <_printf_i+0x196>
 8006474:	4616      	mov	r6, r2
 8006476:	e7bd      	b.n	80063f4 <_printf_i+0x128>
 8006478:	6833      	ldr	r3, [r6, #0]
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	6961      	ldr	r1, [r4, #20]
 800647e:	1d18      	adds	r0, r3, #4
 8006480:	6030      	str	r0, [r6, #0]
 8006482:	062e      	lsls	r6, r5, #24
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	d501      	bpl.n	800648c <_printf_i+0x1c0>
 8006488:	6019      	str	r1, [r3, #0]
 800648a:	e002      	b.n	8006492 <_printf_i+0x1c6>
 800648c:	0668      	lsls	r0, r5, #25
 800648e:	d5fb      	bpl.n	8006488 <_printf_i+0x1bc>
 8006490:	8019      	strh	r1, [r3, #0]
 8006492:	2300      	movs	r3, #0
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	4616      	mov	r6, r2
 8006498:	e7bc      	b.n	8006414 <_printf_i+0x148>
 800649a:	6833      	ldr	r3, [r6, #0]
 800649c:	1d1a      	adds	r2, r3, #4
 800649e:	6032      	str	r2, [r6, #0]
 80064a0:	681e      	ldr	r6, [r3, #0]
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	2100      	movs	r1, #0
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7f9 feaa 	bl	8000200 <memchr>
 80064ac:	b108      	cbz	r0, 80064b2 <_printf_i+0x1e6>
 80064ae:	1b80      	subs	r0, r0, r6
 80064b0:	6060      	str	r0, [r4, #4]
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	6123      	str	r3, [r4, #16]
 80064b6:	2300      	movs	r3, #0
 80064b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064bc:	e7aa      	b.n	8006414 <_printf_i+0x148>
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	4632      	mov	r2, r6
 80064c2:	4649      	mov	r1, r9
 80064c4:	4640      	mov	r0, r8
 80064c6:	47d0      	blx	sl
 80064c8:	3001      	adds	r0, #1
 80064ca:	d0ad      	beq.n	8006428 <_printf_i+0x15c>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	079b      	lsls	r3, r3, #30
 80064d0:	d413      	bmi.n	80064fa <_printf_i+0x22e>
 80064d2:	68e0      	ldr	r0, [r4, #12]
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	4298      	cmp	r0, r3
 80064d8:	bfb8      	it	lt
 80064da:	4618      	movlt	r0, r3
 80064dc:	e7a6      	b.n	800642c <_printf_i+0x160>
 80064de:	2301      	movs	r3, #1
 80064e0:	4632      	mov	r2, r6
 80064e2:	4649      	mov	r1, r9
 80064e4:	4640      	mov	r0, r8
 80064e6:	47d0      	blx	sl
 80064e8:	3001      	adds	r0, #1
 80064ea:	d09d      	beq.n	8006428 <_printf_i+0x15c>
 80064ec:	3501      	adds	r5, #1
 80064ee:	68e3      	ldr	r3, [r4, #12]
 80064f0:	9903      	ldr	r1, [sp, #12]
 80064f2:	1a5b      	subs	r3, r3, r1
 80064f4:	42ab      	cmp	r3, r5
 80064f6:	dcf2      	bgt.n	80064de <_printf_i+0x212>
 80064f8:	e7eb      	b.n	80064d2 <_printf_i+0x206>
 80064fa:	2500      	movs	r5, #0
 80064fc:	f104 0619 	add.w	r6, r4, #25
 8006500:	e7f5      	b.n	80064ee <_printf_i+0x222>
 8006502:	bf00      	nop
 8006504:	0800a39e 	.word	0x0800a39e
 8006508:	0800a3af 	.word	0x0800a3af

0800650c <_scanf_float>:
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	b087      	sub	sp, #28
 8006512:	4617      	mov	r7, r2
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	688b      	ldr	r3, [r1, #8]
 8006518:	1e5a      	subs	r2, r3, #1
 800651a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800651e:	bf81      	itttt	hi
 8006520:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006524:	eb03 0b05 	addhi.w	fp, r3, r5
 8006528:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800652c:	608b      	strhi	r3, [r1, #8]
 800652e:	680b      	ldr	r3, [r1, #0]
 8006530:	460a      	mov	r2, r1
 8006532:	f04f 0500 	mov.w	r5, #0
 8006536:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800653a:	f842 3b1c 	str.w	r3, [r2], #28
 800653e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006542:	4680      	mov	r8, r0
 8006544:	460c      	mov	r4, r1
 8006546:	bf98      	it	ls
 8006548:	f04f 0b00 	movls.w	fp, #0
 800654c:	9201      	str	r2, [sp, #4]
 800654e:	4616      	mov	r6, r2
 8006550:	46aa      	mov	sl, r5
 8006552:	46a9      	mov	r9, r5
 8006554:	9502      	str	r5, [sp, #8]
 8006556:	68a2      	ldr	r2, [r4, #8]
 8006558:	b152      	cbz	r2, 8006570 <_scanf_float+0x64>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006560:	d864      	bhi.n	800662c <_scanf_float+0x120>
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d83c      	bhi.n	80065e0 <_scanf_float+0xd4>
 8006566:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800656a:	b2c8      	uxtb	r0, r1
 800656c:	280e      	cmp	r0, #14
 800656e:	d93a      	bls.n	80065e6 <_scanf_float+0xda>
 8006570:	f1b9 0f00 	cmp.w	r9, #0
 8006574:	d003      	beq.n	800657e <_scanf_float+0x72>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006582:	f1ba 0f01 	cmp.w	sl, #1
 8006586:	f200 8117 	bhi.w	80067b8 <_scanf_float+0x2ac>
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	429e      	cmp	r6, r3
 800658e:	f200 8108 	bhi.w	80067a2 <_scanf_float+0x296>
 8006592:	2001      	movs	r0, #1
 8006594:	b007      	add	sp, #28
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800659e:	2a0d      	cmp	r2, #13
 80065a0:	d8e6      	bhi.n	8006570 <_scanf_float+0x64>
 80065a2:	a101      	add	r1, pc, #4	@ (adr r1, 80065a8 <_scanf_float+0x9c>)
 80065a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065a8:	080066ef 	.word	0x080066ef
 80065ac:	08006571 	.word	0x08006571
 80065b0:	08006571 	.word	0x08006571
 80065b4:	08006571 	.word	0x08006571
 80065b8:	0800674f 	.word	0x0800674f
 80065bc:	08006727 	.word	0x08006727
 80065c0:	08006571 	.word	0x08006571
 80065c4:	08006571 	.word	0x08006571
 80065c8:	080066fd 	.word	0x080066fd
 80065cc:	08006571 	.word	0x08006571
 80065d0:	08006571 	.word	0x08006571
 80065d4:	08006571 	.word	0x08006571
 80065d8:	08006571 	.word	0x08006571
 80065dc:	080066b5 	.word	0x080066b5
 80065e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80065e4:	e7db      	b.n	800659e <_scanf_float+0x92>
 80065e6:	290e      	cmp	r1, #14
 80065e8:	d8c2      	bhi.n	8006570 <_scanf_float+0x64>
 80065ea:	a001      	add	r0, pc, #4	@ (adr r0, 80065f0 <_scanf_float+0xe4>)
 80065ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065f0:	080066a5 	.word	0x080066a5
 80065f4:	08006571 	.word	0x08006571
 80065f8:	080066a5 	.word	0x080066a5
 80065fc:	0800673b 	.word	0x0800673b
 8006600:	08006571 	.word	0x08006571
 8006604:	0800664d 	.word	0x0800664d
 8006608:	0800668b 	.word	0x0800668b
 800660c:	0800668b 	.word	0x0800668b
 8006610:	0800668b 	.word	0x0800668b
 8006614:	0800668b 	.word	0x0800668b
 8006618:	0800668b 	.word	0x0800668b
 800661c:	0800668b 	.word	0x0800668b
 8006620:	0800668b 	.word	0x0800668b
 8006624:	0800668b 	.word	0x0800668b
 8006628:	0800668b 	.word	0x0800668b
 800662c:	2b6e      	cmp	r3, #110	@ 0x6e
 800662e:	d809      	bhi.n	8006644 <_scanf_float+0x138>
 8006630:	2b60      	cmp	r3, #96	@ 0x60
 8006632:	d8b2      	bhi.n	800659a <_scanf_float+0x8e>
 8006634:	2b54      	cmp	r3, #84	@ 0x54
 8006636:	d07b      	beq.n	8006730 <_scanf_float+0x224>
 8006638:	2b59      	cmp	r3, #89	@ 0x59
 800663a:	d199      	bne.n	8006570 <_scanf_float+0x64>
 800663c:	2d07      	cmp	r5, #7
 800663e:	d197      	bne.n	8006570 <_scanf_float+0x64>
 8006640:	2508      	movs	r5, #8
 8006642:	e02c      	b.n	800669e <_scanf_float+0x192>
 8006644:	2b74      	cmp	r3, #116	@ 0x74
 8006646:	d073      	beq.n	8006730 <_scanf_float+0x224>
 8006648:	2b79      	cmp	r3, #121	@ 0x79
 800664a:	e7f6      	b.n	800663a <_scanf_float+0x12e>
 800664c:	6821      	ldr	r1, [r4, #0]
 800664e:	05c8      	lsls	r0, r1, #23
 8006650:	d51b      	bpl.n	800668a <_scanf_float+0x17e>
 8006652:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006656:	6021      	str	r1, [r4, #0]
 8006658:	f109 0901 	add.w	r9, r9, #1
 800665c:	f1bb 0f00 	cmp.w	fp, #0
 8006660:	d003      	beq.n	800666a <_scanf_float+0x15e>
 8006662:	3201      	adds	r2, #1
 8006664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006668:	60a2      	str	r2, [r4, #8]
 800666a:	68a3      	ldr	r3, [r4, #8]
 800666c:	3b01      	subs	r3, #1
 800666e:	60a3      	str	r3, [r4, #8]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	3301      	adds	r3, #1
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3b01      	subs	r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
 800667e:	f340 8087 	ble.w	8006790 <_scanf_float+0x284>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	e765      	b.n	8006556 <_scanf_float+0x4a>
 800668a:	eb1a 0105 	adds.w	r1, sl, r5
 800668e:	f47f af6f 	bne.w	8006570 <_scanf_float+0x64>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	460d      	mov	r5, r1
 800669c:	468a      	mov	sl, r1
 800669e:	f806 3b01 	strb.w	r3, [r6], #1
 80066a2:	e7e2      	b.n	800666a <_scanf_float+0x15e>
 80066a4:	6822      	ldr	r2, [r4, #0]
 80066a6:	0610      	lsls	r0, r2, #24
 80066a8:	f57f af62 	bpl.w	8006570 <_scanf_float+0x64>
 80066ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066b0:	6022      	str	r2, [r4, #0]
 80066b2:	e7f4      	b.n	800669e <_scanf_float+0x192>
 80066b4:	f1ba 0f00 	cmp.w	sl, #0
 80066b8:	d10e      	bne.n	80066d8 <_scanf_float+0x1cc>
 80066ba:	f1b9 0f00 	cmp.w	r9, #0
 80066be:	d10e      	bne.n	80066de <_scanf_float+0x1d2>
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80066c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80066ca:	d108      	bne.n	80066de <_scanf_float+0x1d2>
 80066cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	f04f 0a01 	mov.w	sl, #1
 80066d6:	e7e2      	b.n	800669e <_scanf_float+0x192>
 80066d8:	f1ba 0f02 	cmp.w	sl, #2
 80066dc:	d055      	beq.n	800678a <_scanf_float+0x27e>
 80066de:	2d01      	cmp	r5, #1
 80066e0:	d002      	beq.n	80066e8 <_scanf_float+0x1dc>
 80066e2:	2d04      	cmp	r5, #4
 80066e4:	f47f af44 	bne.w	8006570 <_scanf_float+0x64>
 80066e8:	3501      	adds	r5, #1
 80066ea:	b2ed      	uxtb	r5, r5
 80066ec:	e7d7      	b.n	800669e <_scanf_float+0x192>
 80066ee:	f1ba 0f01 	cmp.w	sl, #1
 80066f2:	f47f af3d 	bne.w	8006570 <_scanf_float+0x64>
 80066f6:	f04f 0a02 	mov.w	sl, #2
 80066fa:	e7d0      	b.n	800669e <_scanf_float+0x192>
 80066fc:	b97d      	cbnz	r5, 800671e <_scanf_float+0x212>
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	f47f af38 	bne.w	8006576 <_scanf_float+0x6a>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800670c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006710:	f040 8108 	bne.w	8006924 <_scanf_float+0x418>
 8006714:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	2501      	movs	r5, #1
 800671c:	e7bf      	b.n	800669e <_scanf_float+0x192>
 800671e:	2d03      	cmp	r5, #3
 8006720:	d0e2      	beq.n	80066e8 <_scanf_float+0x1dc>
 8006722:	2d05      	cmp	r5, #5
 8006724:	e7de      	b.n	80066e4 <_scanf_float+0x1d8>
 8006726:	2d02      	cmp	r5, #2
 8006728:	f47f af22 	bne.w	8006570 <_scanf_float+0x64>
 800672c:	2503      	movs	r5, #3
 800672e:	e7b6      	b.n	800669e <_scanf_float+0x192>
 8006730:	2d06      	cmp	r5, #6
 8006732:	f47f af1d 	bne.w	8006570 <_scanf_float+0x64>
 8006736:	2507      	movs	r5, #7
 8006738:	e7b1      	b.n	800669e <_scanf_float+0x192>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	0591      	lsls	r1, r2, #22
 800673e:	f57f af17 	bpl.w	8006570 <_scanf_float+0x64>
 8006742:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006746:	6022      	str	r2, [r4, #0]
 8006748:	f8cd 9008 	str.w	r9, [sp, #8]
 800674c:	e7a7      	b.n	800669e <_scanf_float+0x192>
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006754:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006758:	d006      	beq.n	8006768 <_scanf_float+0x25c>
 800675a:	0550      	lsls	r0, r2, #21
 800675c:	f57f af08 	bpl.w	8006570 <_scanf_float+0x64>
 8006760:	f1b9 0f00 	cmp.w	r9, #0
 8006764:	f000 80de 	beq.w	8006924 <_scanf_float+0x418>
 8006768:	0591      	lsls	r1, r2, #22
 800676a:	bf58      	it	pl
 800676c:	9902      	ldrpl	r1, [sp, #8]
 800676e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006772:	bf58      	it	pl
 8006774:	eba9 0101 	subpl.w	r1, r9, r1
 8006778:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800677c:	bf58      	it	pl
 800677e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	e789      	b.n	800669e <_scanf_float+0x192>
 800678a:	f04f 0a03 	mov.w	sl, #3
 800678e:	e786      	b.n	800669e <_scanf_float+0x192>
 8006790:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006794:	4639      	mov	r1, r7
 8006796:	4640      	mov	r0, r8
 8006798:	4798      	blx	r3
 800679a:	2800      	cmp	r0, #0
 800679c:	f43f aedb 	beq.w	8006556 <_scanf_float+0x4a>
 80067a0:	e6e6      	b.n	8006570 <_scanf_float+0x64>
 80067a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067aa:	463a      	mov	r2, r7
 80067ac:	4640      	mov	r0, r8
 80067ae:	4798      	blx	r3
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	e6e8      	b.n	800658a <_scanf_float+0x7e>
 80067b8:	1e6b      	subs	r3, r5, #1
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d824      	bhi.n	8006808 <_scanf_float+0x2fc>
 80067be:	2d02      	cmp	r5, #2
 80067c0:	d836      	bhi.n	8006830 <_scanf_float+0x324>
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	429e      	cmp	r6, r3
 80067c6:	f67f aee4 	bls.w	8006592 <_scanf_float+0x86>
 80067ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067d2:	463a      	mov	r2, r7
 80067d4:	4640      	mov	r0, r8
 80067d6:	4798      	blx	r3
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	3b01      	subs	r3, #1
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	e7f0      	b.n	80067c2 <_scanf_float+0x2b6>
 80067e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80067e8:	463a      	mov	r2, r7
 80067ea:	4640      	mov	r0, r8
 80067ec:	4798      	blx	r3
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067f8:	fa5f fa8a 	uxtb.w	sl, sl
 80067fc:	f1ba 0f02 	cmp.w	sl, #2
 8006800:	d1ee      	bne.n	80067e0 <_scanf_float+0x2d4>
 8006802:	3d03      	subs	r5, #3
 8006804:	b2ed      	uxtb	r5, r5
 8006806:	1b76      	subs	r6, r6, r5
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	05da      	lsls	r2, r3, #23
 800680c:	d530      	bpl.n	8006870 <_scanf_float+0x364>
 800680e:	055b      	lsls	r3, r3, #21
 8006810:	d511      	bpl.n	8006836 <_scanf_float+0x32a>
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	429e      	cmp	r6, r3
 8006816:	f67f aebc 	bls.w	8006592 <_scanf_float+0x86>
 800681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800681e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006822:	463a      	mov	r2, r7
 8006824:	4640      	mov	r0, r8
 8006826:	4798      	blx	r3
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	3b01      	subs	r3, #1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	e7f0      	b.n	8006812 <_scanf_float+0x306>
 8006830:	46aa      	mov	sl, r5
 8006832:	46b3      	mov	fp, r6
 8006834:	e7de      	b.n	80067f4 <_scanf_float+0x2e8>
 8006836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	2965      	cmp	r1, #101	@ 0x65
 800683e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006842:	f106 35ff 	add.w	r5, r6, #4294967295
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	d00c      	beq.n	8006864 <_scanf_float+0x358>
 800684a:	2945      	cmp	r1, #69	@ 0x45
 800684c:	d00a      	beq.n	8006864 <_scanf_float+0x358>
 800684e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006852:	463a      	mov	r2, r7
 8006854:	4640      	mov	r0, r8
 8006856:	4798      	blx	r3
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800685e:	3b01      	subs	r3, #1
 8006860:	1eb5      	subs	r5, r6, #2
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006868:	463a      	mov	r2, r7
 800686a:	4640      	mov	r0, r8
 800686c:	4798      	blx	r3
 800686e:	462e      	mov	r6, r5
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	f012 0210 	ands.w	r2, r2, #16
 8006876:	d001      	beq.n	800687c <_scanf_float+0x370>
 8006878:	2000      	movs	r0, #0
 800687a:	e68b      	b.n	8006594 <_scanf_float+0x88>
 800687c:	7032      	strb	r2, [r6, #0]
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006888:	d11c      	bne.n	80068c4 <_scanf_float+0x3b8>
 800688a:	9b02      	ldr	r3, [sp, #8]
 800688c:	454b      	cmp	r3, r9
 800688e:	eba3 0209 	sub.w	r2, r3, r9
 8006892:	d123      	bne.n	80068dc <_scanf_float+0x3d0>
 8006894:	9901      	ldr	r1, [sp, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	4640      	mov	r0, r8
 800689a:	f002 fc65 	bl	8009168 <_strtod_r>
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	6821      	ldr	r1, [r4, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f011 0f02 	tst.w	r1, #2
 80068a8:	ec57 6b10 	vmov	r6, r7, d0
 80068ac:	f103 0204 	add.w	r2, r3, #4
 80068b0:	d01f      	beq.n	80068f2 <_scanf_float+0x3e6>
 80068b2:	9903      	ldr	r1, [sp, #12]
 80068b4:	600a      	str	r2, [r1, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	e9c3 6700 	strd	r6, r7, [r3]
 80068bc:	68e3      	ldr	r3, [r4, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60e3      	str	r3, [r4, #12]
 80068c2:	e7d9      	b.n	8006878 <_scanf_float+0x36c>
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0e4      	beq.n	8006894 <_scanf_float+0x388>
 80068ca:	9905      	ldr	r1, [sp, #20]
 80068cc:	230a      	movs	r3, #10
 80068ce:	3101      	adds	r1, #1
 80068d0:	4640      	mov	r0, r8
 80068d2:	f002 fcc9 	bl	8009268 <_strtol_r>
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	9e05      	ldr	r6, [sp, #20]
 80068da:	1ac2      	subs	r2, r0, r3
 80068dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80068e0:	429e      	cmp	r6, r3
 80068e2:	bf28      	it	cs
 80068e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80068e8:	4910      	ldr	r1, [pc, #64]	@ (800692c <_scanf_float+0x420>)
 80068ea:	4630      	mov	r0, r6
 80068ec:	f000 f954 	bl	8006b98 <siprintf>
 80068f0:	e7d0      	b.n	8006894 <_scanf_float+0x388>
 80068f2:	f011 0f04 	tst.w	r1, #4
 80068f6:	9903      	ldr	r1, [sp, #12]
 80068f8:	600a      	str	r2, [r1, #0]
 80068fa:	d1dc      	bne.n	80068b6 <_scanf_float+0x3aa>
 80068fc:	681d      	ldr	r5, [r3, #0]
 80068fe:	4632      	mov	r2, r6
 8006900:	463b      	mov	r3, r7
 8006902:	4630      	mov	r0, r6
 8006904:	4639      	mov	r1, r7
 8006906:	f7fa f929 	bl	8000b5c <__aeabi_dcmpun>
 800690a:	b128      	cbz	r0, 8006918 <_scanf_float+0x40c>
 800690c:	4808      	ldr	r0, [pc, #32]	@ (8006930 <_scanf_float+0x424>)
 800690e:	f000 fad9 	bl	8006ec4 <nanf>
 8006912:	ed85 0a00 	vstr	s0, [r5]
 8006916:	e7d1      	b.n	80068bc <_scanf_float+0x3b0>
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7fa f97c 	bl	8000c18 <__aeabi_d2f>
 8006920:	6028      	str	r0, [r5, #0]
 8006922:	e7cb      	b.n	80068bc <_scanf_float+0x3b0>
 8006924:	f04f 0900 	mov.w	r9, #0
 8006928:	e629      	b.n	800657e <_scanf_float+0x72>
 800692a:	bf00      	nop
 800692c:	0800a3c0 	.word	0x0800a3c0
 8006930:	0800a755 	.word	0x0800a755

08006934 <std>:
 8006934:	2300      	movs	r3, #0
 8006936:	b510      	push	{r4, lr}
 8006938:	4604      	mov	r4, r0
 800693a:	e9c0 3300 	strd	r3, r3, [r0]
 800693e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006942:	6083      	str	r3, [r0, #8]
 8006944:	8181      	strh	r1, [r0, #12]
 8006946:	6643      	str	r3, [r0, #100]	@ 0x64
 8006948:	81c2      	strh	r2, [r0, #14]
 800694a:	6183      	str	r3, [r0, #24]
 800694c:	4619      	mov	r1, r3
 800694e:	2208      	movs	r2, #8
 8006950:	305c      	adds	r0, #92	@ 0x5c
 8006952:	f000 fa19 	bl	8006d88 <memset>
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <std+0x58>)
 8006958:	6263      	str	r3, [r4, #36]	@ 0x24
 800695a:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <std+0x5c>)
 800695c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <std+0x60>)
 8006960:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006962:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <std+0x64>)
 8006964:	6323      	str	r3, [r4, #48]	@ 0x30
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <std+0x68>)
 8006968:	6224      	str	r4, [r4, #32]
 800696a:	429c      	cmp	r4, r3
 800696c:	d006      	beq.n	800697c <std+0x48>
 800696e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006972:	4294      	cmp	r4, r2
 8006974:	d002      	beq.n	800697c <std+0x48>
 8006976:	33d0      	adds	r3, #208	@ 0xd0
 8006978:	429c      	cmp	r4, r3
 800697a:	d105      	bne.n	8006988 <std+0x54>
 800697c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f000 ba8c 	b.w	8006ea0 <__retarget_lock_init_recursive>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	08006bd9 	.word	0x08006bd9
 8006990:	08006bfb 	.word	0x08006bfb
 8006994:	08006c33 	.word	0x08006c33
 8006998:	08006c57 	.word	0x08006c57
 800699c:	20000458 	.word	0x20000458

080069a0 <stdio_exit_handler>:
 80069a0:	4a02      	ldr	r2, [pc, #8]	@ (80069ac <stdio_exit_handler+0xc>)
 80069a2:	4903      	ldr	r1, [pc, #12]	@ (80069b0 <stdio_exit_handler+0x10>)
 80069a4:	4803      	ldr	r0, [pc, #12]	@ (80069b4 <stdio_exit_handler+0x14>)
 80069a6:	f000 b869 	b.w	8006a7c <_fwalk_sglue>
 80069aa:	bf00      	nop
 80069ac:	20000010 	.word	0x20000010
 80069b0:	080098a9 	.word	0x080098a9
 80069b4:	20000020 	.word	0x20000020

080069b8 <cleanup_stdio>:
 80069b8:	6841      	ldr	r1, [r0, #4]
 80069ba:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <cleanup_stdio+0x34>)
 80069bc:	4299      	cmp	r1, r3
 80069be:	b510      	push	{r4, lr}
 80069c0:	4604      	mov	r4, r0
 80069c2:	d001      	beq.n	80069c8 <cleanup_stdio+0x10>
 80069c4:	f002 ff70 	bl	80098a8 <_fflush_r>
 80069c8:	68a1      	ldr	r1, [r4, #8]
 80069ca:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <cleanup_stdio+0x38>)
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d002      	beq.n	80069d6 <cleanup_stdio+0x1e>
 80069d0:	4620      	mov	r0, r4
 80069d2:	f002 ff69 	bl	80098a8 <_fflush_r>
 80069d6:	68e1      	ldr	r1, [r4, #12]
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <cleanup_stdio+0x3c>)
 80069da:	4299      	cmp	r1, r3
 80069dc:	d004      	beq.n	80069e8 <cleanup_stdio+0x30>
 80069de:	4620      	mov	r0, r4
 80069e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e4:	f002 bf60 	b.w	80098a8 <_fflush_r>
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	bf00      	nop
 80069ec:	20000458 	.word	0x20000458
 80069f0:	200004c0 	.word	0x200004c0
 80069f4:	20000528 	.word	0x20000528

080069f8 <global_stdio_init.part.0>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <global_stdio_init.part.0+0x30>)
 80069fc:	4c0b      	ldr	r4, [pc, #44]	@ (8006a2c <global_stdio_init.part.0+0x34>)
 80069fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006a30 <global_stdio_init.part.0+0x38>)
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	4620      	mov	r0, r4
 8006a04:	2200      	movs	r2, #0
 8006a06:	2104      	movs	r1, #4
 8006a08:	f7ff ff94 	bl	8006934 <std>
 8006a0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a10:	2201      	movs	r2, #1
 8006a12:	2109      	movs	r1, #9
 8006a14:	f7ff ff8e 	bl	8006934 <std>
 8006a18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a22:	2112      	movs	r1, #18
 8006a24:	f7ff bf86 	b.w	8006934 <std>
 8006a28:	20000590 	.word	0x20000590
 8006a2c:	20000458 	.word	0x20000458
 8006a30:	080069a1 	.word	0x080069a1

08006a34 <__sfp_lock_acquire>:
 8006a34:	4801      	ldr	r0, [pc, #4]	@ (8006a3c <__sfp_lock_acquire+0x8>)
 8006a36:	f000 ba34 	b.w	8006ea2 <__retarget_lock_acquire_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20000599 	.word	0x20000599

08006a40 <__sfp_lock_release>:
 8006a40:	4801      	ldr	r0, [pc, #4]	@ (8006a48 <__sfp_lock_release+0x8>)
 8006a42:	f000 ba2f 	b.w	8006ea4 <__retarget_lock_release_recursive>
 8006a46:	bf00      	nop
 8006a48:	20000599 	.word	0x20000599

08006a4c <__sinit>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4604      	mov	r4, r0
 8006a50:	f7ff fff0 	bl	8006a34 <__sfp_lock_acquire>
 8006a54:	6a23      	ldr	r3, [r4, #32]
 8006a56:	b11b      	cbz	r3, 8006a60 <__sinit+0x14>
 8006a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a5c:	f7ff bff0 	b.w	8006a40 <__sfp_lock_release>
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <__sinit+0x28>)
 8006a62:	6223      	str	r3, [r4, #32]
 8006a64:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <__sinit+0x2c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f5      	bne.n	8006a58 <__sinit+0xc>
 8006a6c:	f7ff ffc4 	bl	80069f8 <global_stdio_init.part.0>
 8006a70:	e7f2      	b.n	8006a58 <__sinit+0xc>
 8006a72:	bf00      	nop
 8006a74:	080069b9 	.word	0x080069b9
 8006a78:	20000590 	.word	0x20000590

08006a7c <_fwalk_sglue>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	4607      	mov	r7, r0
 8006a82:	4688      	mov	r8, r1
 8006a84:	4614      	mov	r4, r2
 8006a86:	2600      	movs	r6, #0
 8006a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a90:	d505      	bpl.n	8006a9e <_fwalk_sglue+0x22>
 8006a92:	6824      	ldr	r4, [r4, #0]
 8006a94:	2c00      	cmp	r4, #0
 8006a96:	d1f7      	bne.n	8006a88 <_fwalk_sglue+0xc>
 8006a98:	4630      	mov	r0, r6
 8006a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	89ab      	ldrh	r3, [r5, #12]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d907      	bls.n	8006ab4 <_fwalk_sglue+0x38>
 8006aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	d003      	beq.n	8006ab4 <_fwalk_sglue+0x38>
 8006aac:	4629      	mov	r1, r5
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	4306      	orrs	r6, r0
 8006ab4:	3568      	adds	r5, #104	@ 0x68
 8006ab6:	e7e9      	b.n	8006a8c <_fwalk_sglue+0x10>

08006ab8 <iprintf>:
 8006ab8:	b40f      	push	{r0, r1, r2, r3}
 8006aba:	b507      	push	{r0, r1, r2, lr}
 8006abc:	4906      	ldr	r1, [pc, #24]	@ (8006ad8 <iprintf+0x20>)
 8006abe:	ab04      	add	r3, sp, #16
 8006ac0:	6808      	ldr	r0, [r1, #0]
 8006ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac6:	6881      	ldr	r1, [r0, #8]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	f002 fd51 	bl	8009570 <_vfiprintf_r>
 8006ace:	b003      	add	sp, #12
 8006ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad4:	b004      	add	sp, #16
 8006ad6:	4770      	bx	lr
 8006ad8:	2000001c 	.word	0x2000001c

08006adc <_puts_r>:
 8006adc:	6a03      	ldr	r3, [r0, #32]
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	6884      	ldr	r4, [r0, #8]
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	b90b      	cbnz	r3, 8006aec <_puts_r+0x10>
 8006ae8:	f7ff ffb0 	bl	8006a4c <__sinit>
 8006aec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aee:	07db      	lsls	r3, r3, #31
 8006af0:	d405      	bmi.n	8006afe <_puts_r+0x22>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	0598      	lsls	r0, r3, #22
 8006af6:	d402      	bmi.n	8006afe <_puts_r+0x22>
 8006af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006afa:	f000 f9d2 	bl	8006ea2 <__retarget_lock_acquire_recursive>
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	0719      	lsls	r1, r3, #28
 8006b02:	d502      	bpl.n	8006b0a <_puts_r+0x2e>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d135      	bne.n	8006b76 <_puts_r+0x9a>
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 f8e5 	bl	8006cdc <__swsetup_r>
 8006b12:	b380      	cbz	r0, 8006b76 <_puts_r+0x9a>
 8006b14:	f04f 35ff 	mov.w	r5, #4294967295
 8006b18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b1a:	07da      	lsls	r2, r3, #31
 8006b1c:	d405      	bmi.n	8006b2a <_puts_r+0x4e>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	059b      	lsls	r3, r3, #22
 8006b22:	d402      	bmi.n	8006b2a <_puts_r+0x4e>
 8006b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b26:	f000 f9bd 	bl	8006ea4 <__retarget_lock_release_recursive>
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da04      	bge.n	8006b3c <_puts_r+0x60>
 8006b32:	69a2      	ldr	r2, [r4, #24]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	dc17      	bgt.n	8006b68 <_puts_r+0x8c>
 8006b38:	290a      	cmp	r1, #10
 8006b3a:	d015      	beq.n	8006b68 <_puts_r+0x8c>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	6022      	str	r2, [r4, #0]
 8006b42:	7019      	strb	r1, [r3, #0]
 8006b44:	68a3      	ldr	r3, [r4, #8]
 8006b46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d1ed      	bne.n	8006b2e <_puts_r+0x52>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da11      	bge.n	8006b7a <_puts_r+0x9e>
 8006b56:	4622      	mov	r2, r4
 8006b58:	210a      	movs	r1, #10
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f87f 	bl	8006c5e <__swbuf_r>
 8006b60:	3001      	adds	r0, #1
 8006b62:	d0d7      	beq.n	8006b14 <_puts_r+0x38>
 8006b64:	250a      	movs	r5, #10
 8006b66:	e7d7      	b.n	8006b18 <_puts_r+0x3c>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 f877 	bl	8006c5e <__swbuf_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1e7      	bne.n	8006b44 <_puts_r+0x68>
 8006b74:	e7ce      	b.n	8006b14 <_puts_r+0x38>
 8006b76:	3e01      	subs	r6, #1
 8006b78:	e7e4      	b.n	8006b44 <_puts_r+0x68>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	220a      	movs	r2, #10
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e7ee      	b.n	8006b64 <_puts_r+0x88>
	...

08006b88 <puts>:
 8006b88:	4b02      	ldr	r3, [pc, #8]	@ (8006b94 <puts+0xc>)
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	f7ff bfa5 	b.w	8006adc <_puts_r>
 8006b92:	bf00      	nop
 8006b94:	2000001c 	.word	0x2000001c

08006b98 <siprintf>:
 8006b98:	b40e      	push	{r1, r2, r3}
 8006b9a:	b500      	push	{lr}
 8006b9c:	b09c      	sub	sp, #112	@ 0x70
 8006b9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ba0:	9002      	str	r0, [sp, #8]
 8006ba2:	9006      	str	r0, [sp, #24]
 8006ba4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ba8:	4809      	ldr	r0, [pc, #36]	@ (8006bd0 <siprintf+0x38>)
 8006baa:	9107      	str	r1, [sp, #28]
 8006bac:	9104      	str	r1, [sp, #16]
 8006bae:	4909      	ldr	r1, [pc, #36]	@ (8006bd4 <siprintf+0x3c>)
 8006bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb4:	9105      	str	r1, [sp, #20]
 8006bb6:	6800      	ldr	r0, [r0, #0]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	a902      	add	r1, sp, #8
 8006bbc:	f002 fbb2 	bl	8009324 <_svfiprintf_r>
 8006bc0:	9b02      	ldr	r3, [sp, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	b01c      	add	sp, #112	@ 0x70
 8006bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bcc:	b003      	add	sp, #12
 8006bce:	4770      	bx	lr
 8006bd0:	2000001c 	.word	0x2000001c
 8006bd4:	ffff0208 	.word	0xffff0208

08006bd8 <__sread>:
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	460c      	mov	r4, r1
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	f000 f900 	bl	8006de4 <_read_r>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	bfab      	itete	ge
 8006be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bea:	89a3      	ldrhlt	r3, [r4, #12]
 8006bec:	181b      	addge	r3, r3, r0
 8006bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bf2:	bfac      	ite	ge
 8006bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bf6:	81a3      	strhlt	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__swrite>:
 8006bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	461f      	mov	r7, r3
 8006c00:	898b      	ldrh	r3, [r1, #12]
 8006c02:	05db      	lsls	r3, r3, #23
 8006c04:	4605      	mov	r5, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	4616      	mov	r6, r2
 8006c0a:	d505      	bpl.n	8006c18 <__swrite+0x1e>
 8006c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c10:	2302      	movs	r3, #2
 8006c12:	2200      	movs	r2, #0
 8006c14:	f000 f8d4 	bl	8006dc0 <_lseek_r>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	4632      	mov	r2, r6
 8006c26:	463b      	mov	r3, r7
 8006c28:	4628      	mov	r0, r5
 8006c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2e:	f000 b8fb 	b.w	8006e28 <_write_r>

08006c32 <__sseek>:
 8006c32:	b510      	push	{r4, lr}
 8006c34:	460c      	mov	r4, r1
 8006c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3a:	f000 f8c1 	bl	8006dc0 <_lseek_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	bf15      	itete	ne
 8006c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c4e:	81a3      	strheq	r3, [r4, #12]
 8006c50:	bf18      	it	ne
 8006c52:	81a3      	strhne	r3, [r4, #12]
 8006c54:	bd10      	pop	{r4, pc}

08006c56 <__sclose>:
 8006c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5a:	f000 b8a1 	b.w	8006da0 <_close_r>

08006c5e <__swbuf_r>:
 8006c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c60:	460e      	mov	r6, r1
 8006c62:	4614      	mov	r4, r2
 8006c64:	4605      	mov	r5, r0
 8006c66:	b118      	cbz	r0, 8006c70 <__swbuf_r+0x12>
 8006c68:	6a03      	ldr	r3, [r0, #32]
 8006c6a:	b90b      	cbnz	r3, 8006c70 <__swbuf_r+0x12>
 8006c6c:	f7ff feee 	bl	8006a4c <__sinit>
 8006c70:	69a3      	ldr	r3, [r4, #24]
 8006c72:	60a3      	str	r3, [r4, #8]
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	071a      	lsls	r2, r3, #28
 8006c78:	d501      	bpl.n	8006c7e <__swbuf_r+0x20>
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	b943      	cbnz	r3, 8006c90 <__swbuf_r+0x32>
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f82b 	bl	8006cdc <__swsetup_r>
 8006c86:	b118      	cbz	r0, 8006c90 <__swbuf_r+0x32>
 8006c88:	f04f 37ff 	mov.w	r7, #4294967295
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	6922      	ldr	r2, [r4, #16]
 8006c94:	1a98      	subs	r0, r3, r2
 8006c96:	6963      	ldr	r3, [r4, #20]
 8006c98:	b2f6      	uxtb	r6, r6
 8006c9a:	4283      	cmp	r3, r0
 8006c9c:	4637      	mov	r7, r6
 8006c9e:	dc05      	bgt.n	8006cac <__swbuf_r+0x4e>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f002 fe00 	bl	80098a8 <_fflush_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d1ed      	bne.n	8006c88 <__swbuf_r+0x2a>
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	60a3      	str	r3, [r4, #8]
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	6022      	str	r2, [r4, #0]
 8006cb8:	701e      	strb	r6, [r3, #0]
 8006cba:	6962      	ldr	r2, [r4, #20]
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d004      	beq.n	8006ccc <__swbuf_r+0x6e>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	07db      	lsls	r3, r3, #31
 8006cc6:	d5e1      	bpl.n	8006c8c <__swbuf_r+0x2e>
 8006cc8:	2e0a      	cmp	r6, #10
 8006cca:	d1df      	bne.n	8006c8c <__swbuf_r+0x2e>
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f002 fdea 	bl	80098a8 <_fflush_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0d9      	beq.n	8006c8c <__swbuf_r+0x2e>
 8006cd8:	e7d6      	b.n	8006c88 <__swbuf_r+0x2a>
	...

08006cdc <__swsetup_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4b29      	ldr	r3, [pc, #164]	@ (8006d84 <__swsetup_r+0xa8>)
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	b118      	cbz	r0, 8006cf0 <__swsetup_r+0x14>
 8006ce8:	6a03      	ldr	r3, [r0, #32]
 8006cea:	b90b      	cbnz	r3, 8006cf0 <__swsetup_r+0x14>
 8006cec:	f7ff feae 	bl	8006a4c <__sinit>
 8006cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf4:	0719      	lsls	r1, r3, #28
 8006cf6:	d422      	bmi.n	8006d3e <__swsetup_r+0x62>
 8006cf8:	06da      	lsls	r2, r3, #27
 8006cfa:	d407      	bmi.n	8006d0c <__swsetup_r+0x30>
 8006cfc:	2209      	movs	r2, #9
 8006cfe:	602a      	str	r2, [r5, #0]
 8006d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0a:	e033      	b.n	8006d74 <__swsetup_r+0x98>
 8006d0c:	0758      	lsls	r0, r3, #29
 8006d0e:	d512      	bpl.n	8006d36 <__swsetup_r+0x5a>
 8006d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d12:	b141      	cbz	r1, 8006d26 <__swsetup_r+0x4a>
 8006d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	d002      	beq.n	8006d22 <__swsetup_r+0x46>
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 ff23 	bl	8007b68 <_free_r>
 8006d22:	2300      	movs	r3, #0
 8006d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6063      	str	r3, [r4, #4]
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f043 0308 	orr.w	r3, r3, #8
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	b94b      	cbnz	r3, 8006d56 <__swsetup_r+0x7a>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d4c:	d003      	beq.n	8006d56 <__swsetup_r+0x7a>
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	f002 fdf7 	bl	8009944 <__smakebuf_r>
 8006d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5a:	f013 0201 	ands.w	r2, r3, #1
 8006d5e:	d00a      	beq.n	8006d76 <__swsetup_r+0x9a>
 8006d60:	2200      	movs	r2, #0
 8006d62:	60a2      	str	r2, [r4, #8]
 8006d64:	6962      	ldr	r2, [r4, #20]
 8006d66:	4252      	negs	r2, r2
 8006d68:	61a2      	str	r2, [r4, #24]
 8006d6a:	6922      	ldr	r2, [r4, #16]
 8006d6c:	b942      	cbnz	r2, 8006d80 <__swsetup_r+0xa4>
 8006d6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d72:	d1c5      	bne.n	8006d00 <__swsetup_r+0x24>
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
 8006d76:	0799      	lsls	r1, r3, #30
 8006d78:	bf58      	it	pl
 8006d7a:	6962      	ldrpl	r2, [r4, #20]
 8006d7c:	60a2      	str	r2, [r4, #8]
 8006d7e:	e7f4      	b.n	8006d6a <__swsetup_r+0x8e>
 8006d80:	2000      	movs	r0, #0
 8006d82:	e7f7      	b.n	8006d74 <__swsetup_r+0x98>
 8006d84:	2000001c 	.word	0x2000001c

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <_localeconv_r>:
 8006d98:	4800      	ldr	r0, [pc, #0]	@ (8006d9c <_localeconv_r+0x4>)
 8006d9a:	4770      	bx	lr
 8006d9c:	2000015c 	.word	0x2000015c

08006da0 <_close_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_close_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fb f8fc 	bl	8001fa8 <_close>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_close_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_close_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20000594 	.word	0x20000594

08006dc0 <_lseek_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	@ (8006de0 <_lseek_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fb f911 	bl	8001ff6 <_lseek>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_lseek_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_lseek_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000594 	.word	0x20000594

08006de4 <_read_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d07      	ldr	r5, [pc, #28]	@ (8006e04 <_read_r+0x20>)
 8006de8:	4604      	mov	r4, r0
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	2200      	movs	r2, #0
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7fb f8bb 	bl	8001f6e <_read>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_read_r+0x1e>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_read_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	20000594 	.word	0x20000594

08006e08 <_sbrk_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4d06      	ldr	r5, [pc, #24]	@ (8006e24 <_sbrk_r+0x1c>)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	f7fb f8fc 	bl	8002010 <_sbrk>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_sbrk_r+0x1a>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_sbrk_r+0x1a>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20000594 	.word	0x20000594

08006e28 <_write_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d07      	ldr	r5, [pc, #28]	@ (8006e48 <_write_r+0x20>)
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	602a      	str	r2, [r5, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fa f8ec 	bl	8001014 <_write>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_write_r+0x1e>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_write_r+0x1e>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000594 	.word	0x20000594

08006e4c <__errno>:
 8006e4c:	4b01      	ldr	r3, [pc, #4]	@ (8006e54 <__errno+0x8>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	2000001c 	.word	0x2000001c

08006e58 <__libc_init_array>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e90 <__libc_init_array+0x38>)
 8006e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8006e94 <__libc_init_array+0x3c>)
 8006e5e:	1b64      	subs	r4, r4, r5
 8006e60:	10a4      	asrs	r4, r4, #2
 8006e62:	2600      	movs	r6, #0
 8006e64:	42a6      	cmp	r6, r4
 8006e66:	d109      	bne.n	8006e7c <__libc_init_array+0x24>
 8006e68:	4d0b      	ldr	r5, [pc, #44]	@ (8006e98 <__libc_init_array+0x40>)
 8006e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e9c <__libc_init_array+0x44>)
 8006e6c:	f003 fa1a 	bl	800a2a4 <_init>
 8006e70:	1b64      	subs	r4, r4, r5
 8006e72:	10a4      	asrs	r4, r4, #2
 8006e74:	2600      	movs	r6, #0
 8006e76:	42a6      	cmp	r6, r4
 8006e78:	d105      	bne.n	8006e86 <__libc_init_array+0x2e>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e80:	4798      	blx	r3
 8006e82:	3601      	adds	r6, #1
 8006e84:	e7ee      	b.n	8006e64 <__libc_init_array+0xc>
 8006e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8a:	4798      	blx	r3
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	e7f2      	b.n	8006e76 <__libc_init_array+0x1e>
 8006e90:	0800a7c0 	.word	0x0800a7c0
 8006e94:	0800a7c0 	.word	0x0800a7c0
 8006e98:	0800a7c0 	.word	0x0800a7c0
 8006e9c:	0800a7c4 	.word	0x0800a7c4

08006ea0 <__retarget_lock_init_recursive>:
 8006ea0:	4770      	bx	lr

08006ea2 <__retarget_lock_acquire_recursive>:
 8006ea2:	4770      	bx	lr

08006ea4 <__retarget_lock_release_recursive>:
 8006ea4:	4770      	bx	lr

08006ea6 <memcpy>:
 8006ea6:	440a      	add	r2, r1
 8006ea8:	4291      	cmp	r1, r2
 8006eaa:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eae:	d100      	bne.n	8006eb2 <memcpy+0xc>
 8006eb0:	4770      	bx	lr
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ebc:	4291      	cmp	r1, r2
 8006ebe:	d1f9      	bne.n	8006eb4 <memcpy+0xe>
 8006ec0:	bd10      	pop	{r4, pc}
	...

08006ec4 <nanf>:
 8006ec4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006ecc <nanf+0x8>
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	7fc00000 	.word	0x7fc00000

08006ed0 <quorem>:
 8006ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	6903      	ldr	r3, [r0, #16]
 8006ed6:	690c      	ldr	r4, [r1, #16]
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	4607      	mov	r7, r0
 8006edc:	db7e      	blt.n	8006fdc <quorem+0x10c>
 8006ede:	3c01      	subs	r4, #1
 8006ee0:	f101 0814 	add.w	r8, r1, #20
 8006ee4:	00a3      	lsls	r3, r4, #2
 8006ee6:	f100 0514 	add.w	r5, r0, #20
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006efa:	3301      	adds	r3, #1
 8006efc:	429a      	cmp	r2, r3
 8006efe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f02:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f06:	d32e      	bcc.n	8006f66 <quorem+0x96>
 8006f08:	f04f 0a00 	mov.w	sl, #0
 8006f0c:	46c4      	mov	ip, r8
 8006f0e:	46ae      	mov	lr, r5
 8006f10:	46d3      	mov	fp, sl
 8006f12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f16:	b298      	uxth	r0, r3
 8006f18:	fb06 a000 	mla	r0, r6, r0, sl
 8006f1c:	0c02      	lsrs	r2, r0, #16
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	fb06 2303 	mla	r3, r6, r3, r2
 8006f24:	f8de 2000 	ldr.w	r2, [lr]
 8006f28:	b280      	uxth	r0, r0
 8006f2a:	b292      	uxth	r2, r2
 8006f2c:	1a12      	subs	r2, r2, r0
 8006f2e:	445a      	add	r2, fp
 8006f30:	f8de 0000 	ldr.w	r0, [lr]
 8006f34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f42:	b292      	uxth	r2, r2
 8006f44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f48:	45e1      	cmp	r9, ip
 8006f4a:	f84e 2b04 	str.w	r2, [lr], #4
 8006f4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f52:	d2de      	bcs.n	8006f12 <quorem+0x42>
 8006f54:	9b00      	ldr	r3, [sp, #0]
 8006f56:	58eb      	ldr	r3, [r5, r3]
 8006f58:	b92b      	cbnz	r3, 8006f66 <quorem+0x96>
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	d32f      	bcc.n	8006fc4 <quorem+0xf4>
 8006f64:	613c      	str	r4, [r7, #16]
 8006f66:	4638      	mov	r0, r7
 8006f68:	f001 f90c 	bl	8008184 <__mcmp>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	db25      	blt.n	8006fbc <quorem+0xec>
 8006f70:	4629      	mov	r1, r5
 8006f72:	2000      	movs	r0, #0
 8006f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f78:	f8d1 c000 	ldr.w	ip, [r1]
 8006f7c:	fa1f fe82 	uxth.w	lr, r2
 8006f80:	fa1f f38c 	uxth.w	r3, ip
 8006f84:	eba3 030e 	sub.w	r3, r3, lr
 8006f88:	4403      	add	r3, r0
 8006f8a:	0c12      	lsrs	r2, r2, #16
 8006f8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f9a:	45c1      	cmp	r9, r8
 8006f9c:	f841 3b04 	str.w	r3, [r1], #4
 8006fa0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fa4:	d2e6      	bcs.n	8006f74 <quorem+0xa4>
 8006fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fae:	b922      	cbnz	r2, 8006fba <quorem+0xea>
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	429d      	cmp	r5, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	d30b      	bcc.n	8006fd0 <quorem+0x100>
 8006fb8:	613c      	str	r4, [r7, #16]
 8006fba:	3601      	adds	r6, #1
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	b003      	add	sp, #12
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	3b04      	subs	r3, #4
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	d1cb      	bne.n	8006f64 <quorem+0x94>
 8006fcc:	3c01      	subs	r4, #1
 8006fce:	e7c6      	b.n	8006f5e <quorem+0x8e>
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	3b04      	subs	r3, #4
 8006fd4:	2a00      	cmp	r2, #0
 8006fd6:	d1ef      	bne.n	8006fb8 <quorem+0xe8>
 8006fd8:	3c01      	subs	r4, #1
 8006fda:	e7ea      	b.n	8006fb2 <quorem+0xe2>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7ee      	b.n	8006fbe <quorem+0xee>

08006fe0 <_dtoa_r>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	69c7      	ldr	r7, [r0, #28]
 8006fe6:	b099      	sub	sp, #100	@ 0x64
 8006fe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fec:	ec55 4b10 	vmov	r4, r5, d0
 8006ff0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ff2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ff4:	4683      	mov	fp, r0
 8006ff6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ff8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ffa:	b97f      	cbnz	r7, 800701c <_dtoa_r+0x3c>
 8006ffc:	2010      	movs	r0, #16
 8006ffe:	f7fe fd6f 	bl	8005ae0 <malloc>
 8007002:	4602      	mov	r2, r0
 8007004:	f8cb 001c 	str.w	r0, [fp, #28]
 8007008:	b920      	cbnz	r0, 8007014 <_dtoa_r+0x34>
 800700a:	4ba7      	ldr	r3, [pc, #668]	@ (80072a8 <_dtoa_r+0x2c8>)
 800700c:	21ef      	movs	r1, #239	@ 0xef
 800700e:	48a7      	ldr	r0, [pc, #668]	@ (80072ac <_dtoa_r+0x2cc>)
 8007010:	f002 fd2a 	bl	8009a68 <__assert_func>
 8007014:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007018:	6007      	str	r7, [r0, #0]
 800701a:	60c7      	str	r7, [r0, #12]
 800701c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	b159      	cbz	r1, 800703c <_dtoa_r+0x5c>
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	604a      	str	r2, [r1, #4]
 8007028:	2301      	movs	r3, #1
 800702a:	4093      	lsls	r3, r2
 800702c:	608b      	str	r3, [r1, #8]
 800702e:	4658      	mov	r0, fp
 8007030:	f000 fe24 	bl	8007c7c <_Bfree>
 8007034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	1e2b      	subs	r3, r5, #0
 800703e:	bfb9      	ittee	lt
 8007040:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007044:	9303      	strlt	r3, [sp, #12]
 8007046:	2300      	movge	r3, #0
 8007048:	6033      	strge	r3, [r6, #0]
 800704a:	9f03      	ldr	r7, [sp, #12]
 800704c:	4b98      	ldr	r3, [pc, #608]	@ (80072b0 <_dtoa_r+0x2d0>)
 800704e:	bfbc      	itt	lt
 8007050:	2201      	movlt	r2, #1
 8007052:	6032      	strlt	r2, [r6, #0]
 8007054:	43bb      	bics	r3, r7
 8007056:	d112      	bne.n	800707e <_dtoa_r+0x9e>
 8007058:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800705a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007064:	4323      	orrs	r3, r4
 8007066:	f000 854d 	beq.w	8007b04 <_dtoa_r+0xb24>
 800706a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800706c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80072c4 <_dtoa_r+0x2e4>
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 854f 	beq.w	8007b14 <_dtoa_r+0xb34>
 8007076:	f10a 0303 	add.w	r3, sl, #3
 800707a:	f000 bd49 	b.w	8007b10 <_dtoa_r+0xb30>
 800707e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	ec51 0b17 	vmov	r0, r1, d7
 8007088:	2300      	movs	r3, #0
 800708a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800708e:	f7f9 fd33 	bl	8000af8 <__aeabi_dcmpeq>
 8007092:	4680      	mov	r8, r0
 8007094:	b158      	cbz	r0, 80070ae <_dtoa_r+0xce>
 8007096:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007098:	2301      	movs	r3, #1
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800709e:	b113      	cbz	r3, 80070a6 <_dtoa_r+0xc6>
 80070a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070a2:	4b84      	ldr	r3, [pc, #528]	@ (80072b4 <_dtoa_r+0x2d4>)
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80072c8 <_dtoa_r+0x2e8>
 80070aa:	f000 bd33 	b.w	8007b14 <_dtoa_r+0xb34>
 80070ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070b2:	aa16      	add	r2, sp, #88	@ 0x58
 80070b4:	a917      	add	r1, sp, #92	@ 0x5c
 80070b6:	4658      	mov	r0, fp
 80070b8:	f001 f984 	bl	80083c4 <__d2b>
 80070bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070c0:	4681      	mov	r9, r0
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	d077      	beq.n	80071b6 <_dtoa_r+0x1d6>
 80070c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80070cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070e0:	4619      	mov	r1, r3
 80070e2:	2200      	movs	r2, #0
 80070e4:	4b74      	ldr	r3, [pc, #464]	@ (80072b8 <_dtoa_r+0x2d8>)
 80070e6:	f7f9 f8e7 	bl	80002b8 <__aeabi_dsub>
 80070ea:	a369      	add	r3, pc, #420	@ (adr r3, 8007290 <_dtoa_r+0x2b0>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 fa9a 	bl	8000628 <__aeabi_dmul>
 80070f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007298 <_dtoa_r+0x2b8>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f7f9 f8df 	bl	80002bc <__adddf3>
 80070fe:	4604      	mov	r4, r0
 8007100:	4630      	mov	r0, r6
 8007102:	460d      	mov	r5, r1
 8007104:	f7f9 fa26 	bl	8000554 <__aeabi_i2d>
 8007108:	a365      	add	r3, pc, #404	@ (adr r3, 80072a0 <_dtoa_r+0x2c0>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 fa8b 	bl	8000628 <__aeabi_dmul>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 f8cf 	bl	80002bc <__adddf3>
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	f7f9 fd31 	bl	8000b88 <__aeabi_d2iz>
 8007126:	2200      	movs	r2, #0
 8007128:	4607      	mov	r7, r0
 800712a:	2300      	movs	r3, #0
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	f7f9 fcec 	bl	8000b0c <__aeabi_dcmplt>
 8007134:	b140      	cbz	r0, 8007148 <_dtoa_r+0x168>
 8007136:	4638      	mov	r0, r7
 8007138:	f7f9 fa0c 	bl	8000554 <__aeabi_i2d>
 800713c:	4622      	mov	r2, r4
 800713e:	462b      	mov	r3, r5
 8007140:	f7f9 fcda 	bl	8000af8 <__aeabi_dcmpeq>
 8007144:	b900      	cbnz	r0, 8007148 <_dtoa_r+0x168>
 8007146:	3f01      	subs	r7, #1
 8007148:	2f16      	cmp	r7, #22
 800714a:	d851      	bhi.n	80071f0 <_dtoa_r+0x210>
 800714c:	4b5b      	ldr	r3, [pc, #364]	@ (80072bc <_dtoa_r+0x2dc>)
 800714e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800715a:	f7f9 fcd7 	bl	8000b0c <__aeabi_dcmplt>
 800715e:	2800      	cmp	r0, #0
 8007160:	d048      	beq.n	80071f4 <_dtoa_r+0x214>
 8007162:	3f01      	subs	r7, #1
 8007164:	2300      	movs	r3, #0
 8007166:	9312      	str	r3, [sp, #72]	@ 0x48
 8007168:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800716a:	1b9b      	subs	r3, r3, r6
 800716c:	1e5a      	subs	r2, r3, #1
 800716e:	bf44      	itt	mi
 8007170:	f1c3 0801 	rsbmi	r8, r3, #1
 8007174:	2300      	movmi	r3, #0
 8007176:	9208      	str	r2, [sp, #32]
 8007178:	bf54      	ite	pl
 800717a:	f04f 0800 	movpl.w	r8, #0
 800717e:	9308      	strmi	r3, [sp, #32]
 8007180:	2f00      	cmp	r7, #0
 8007182:	db39      	blt.n	80071f8 <_dtoa_r+0x218>
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007188:	443b      	add	r3, r7
 800718a:	9308      	str	r3, [sp, #32]
 800718c:	2300      	movs	r3, #0
 800718e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007192:	2b09      	cmp	r3, #9
 8007194:	d864      	bhi.n	8007260 <_dtoa_r+0x280>
 8007196:	2b05      	cmp	r3, #5
 8007198:	bfc4      	itt	gt
 800719a:	3b04      	subgt	r3, #4
 800719c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a0:	f1a3 0302 	sub.w	r3, r3, #2
 80071a4:	bfcc      	ite	gt
 80071a6:	2400      	movgt	r4, #0
 80071a8:	2401      	movle	r4, #1
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d863      	bhi.n	8007276 <_dtoa_r+0x296>
 80071ae:	e8df f003 	tbb	[pc, r3]
 80071b2:	372a      	.short	0x372a
 80071b4:	5535      	.short	0x5535
 80071b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80071ba:	441e      	add	r6, r3
 80071bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	bfc1      	itttt	gt
 80071c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071c8:	409f      	lslgt	r7, r3
 80071ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071d2:	bfd6      	itet	le
 80071d4:	f1c3 0320 	rsble	r3, r3, #32
 80071d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80071dc:	fa04 f003 	lslle.w	r0, r4, r3
 80071e0:	f7f9 f9a8 	bl	8000534 <__aeabi_ui2d>
 80071e4:	2201      	movs	r2, #1
 80071e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071ea:	3e01      	subs	r6, #1
 80071ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80071ee:	e777      	b.n	80070e0 <_dtoa_r+0x100>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7b8      	b.n	8007166 <_dtoa_r+0x186>
 80071f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80071f6:	e7b7      	b.n	8007168 <_dtoa_r+0x188>
 80071f8:	427b      	negs	r3, r7
 80071fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80071fc:	2300      	movs	r3, #0
 80071fe:	eba8 0807 	sub.w	r8, r8, r7
 8007202:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007204:	e7c4      	b.n	8007190 <_dtoa_r+0x1b0>
 8007206:	2300      	movs	r3, #0
 8007208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800720a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc35      	bgt.n	800727c <_dtoa_r+0x29c>
 8007210:	2301      	movs	r3, #1
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	9307      	str	r3, [sp, #28]
 8007216:	461a      	mov	r2, r3
 8007218:	920e      	str	r2, [sp, #56]	@ 0x38
 800721a:	e00b      	b.n	8007234 <_dtoa_r+0x254>
 800721c:	2301      	movs	r3, #1
 800721e:	e7f3      	b.n	8007208 <_dtoa_r+0x228>
 8007220:	2300      	movs	r3, #0
 8007222:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	2b01      	cmp	r3, #1
 800722e:	9307      	str	r3, [sp, #28]
 8007230:	bfb8      	it	lt
 8007232:	2301      	movlt	r3, #1
 8007234:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007238:	2100      	movs	r1, #0
 800723a:	2204      	movs	r2, #4
 800723c:	f102 0514 	add.w	r5, r2, #20
 8007240:	429d      	cmp	r5, r3
 8007242:	d91f      	bls.n	8007284 <_dtoa_r+0x2a4>
 8007244:	6041      	str	r1, [r0, #4]
 8007246:	4658      	mov	r0, fp
 8007248:	f000 fcd8 	bl	8007bfc <_Balloc>
 800724c:	4682      	mov	sl, r0
 800724e:	2800      	cmp	r0, #0
 8007250:	d13c      	bne.n	80072cc <_dtoa_r+0x2ec>
 8007252:	4b1b      	ldr	r3, [pc, #108]	@ (80072c0 <_dtoa_r+0x2e0>)
 8007254:	4602      	mov	r2, r0
 8007256:	f240 11af 	movw	r1, #431	@ 0x1af
 800725a:	e6d8      	b.n	800700e <_dtoa_r+0x2e>
 800725c:	2301      	movs	r3, #1
 800725e:	e7e0      	b.n	8007222 <_dtoa_r+0x242>
 8007260:	2401      	movs	r4, #1
 8007262:	2300      	movs	r3, #0
 8007264:	9309      	str	r3, [sp, #36]	@ 0x24
 8007266:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007268:	f04f 33ff 	mov.w	r3, #4294967295
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	9307      	str	r3, [sp, #28]
 8007270:	2200      	movs	r2, #0
 8007272:	2312      	movs	r3, #18
 8007274:	e7d0      	b.n	8007218 <_dtoa_r+0x238>
 8007276:	2301      	movs	r3, #1
 8007278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800727a:	e7f5      	b.n	8007268 <_dtoa_r+0x288>
 800727c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	9307      	str	r3, [sp, #28]
 8007282:	e7d7      	b.n	8007234 <_dtoa_r+0x254>
 8007284:	3101      	adds	r1, #1
 8007286:	0052      	lsls	r2, r2, #1
 8007288:	e7d8      	b.n	800723c <_dtoa_r+0x25c>
 800728a:	bf00      	nop
 800728c:	f3af 8000 	nop.w
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	0800a3d2 	.word	0x0800a3d2
 80072ac:	0800a3e9 	.word	0x0800a3e9
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	0800a39d 	.word	0x0800a39d
 80072b8:	3ff80000 	.word	0x3ff80000
 80072bc:	0800a4e0 	.word	0x0800a4e0
 80072c0:	0800a441 	.word	0x0800a441
 80072c4:	0800a3ce 	.word	0x0800a3ce
 80072c8:	0800a39c 	.word	0x0800a39c
 80072cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072d0:	6018      	str	r0, [r3, #0]
 80072d2:	9b07      	ldr	r3, [sp, #28]
 80072d4:	2b0e      	cmp	r3, #14
 80072d6:	f200 80a4 	bhi.w	8007422 <_dtoa_r+0x442>
 80072da:	2c00      	cmp	r4, #0
 80072dc:	f000 80a1 	beq.w	8007422 <_dtoa_r+0x442>
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	dd33      	ble.n	800734c <_dtoa_r+0x36c>
 80072e4:	4bad      	ldr	r3, [pc, #692]	@ (800759c <_dtoa_r+0x5bc>)
 80072e6:	f007 020f 	and.w	r2, r7, #15
 80072ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ee:	ed93 7b00 	vldr	d7, [r3]
 80072f2:	05f8      	lsls	r0, r7, #23
 80072f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072fc:	d516      	bpl.n	800732c <_dtoa_r+0x34c>
 80072fe:	4ba8      	ldr	r3, [pc, #672]	@ (80075a0 <_dtoa_r+0x5c0>)
 8007300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007308:	f7f9 fab8 	bl	800087c <__aeabi_ddiv>
 800730c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007310:	f004 040f 	and.w	r4, r4, #15
 8007314:	2603      	movs	r6, #3
 8007316:	4da2      	ldr	r5, [pc, #648]	@ (80075a0 <_dtoa_r+0x5c0>)
 8007318:	b954      	cbnz	r4, 8007330 <_dtoa_r+0x350>
 800731a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800731e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007322:	f7f9 faab 	bl	800087c <__aeabi_ddiv>
 8007326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800732a:	e028      	b.n	800737e <_dtoa_r+0x39e>
 800732c:	2602      	movs	r6, #2
 800732e:	e7f2      	b.n	8007316 <_dtoa_r+0x336>
 8007330:	07e1      	lsls	r1, r4, #31
 8007332:	d508      	bpl.n	8007346 <_dtoa_r+0x366>
 8007334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800733c:	f7f9 f974 	bl	8000628 <__aeabi_dmul>
 8007340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007344:	3601      	adds	r6, #1
 8007346:	1064      	asrs	r4, r4, #1
 8007348:	3508      	adds	r5, #8
 800734a:	e7e5      	b.n	8007318 <_dtoa_r+0x338>
 800734c:	f000 80d2 	beq.w	80074f4 <_dtoa_r+0x514>
 8007350:	427c      	negs	r4, r7
 8007352:	4b92      	ldr	r3, [pc, #584]	@ (800759c <_dtoa_r+0x5bc>)
 8007354:	4d92      	ldr	r5, [pc, #584]	@ (80075a0 <_dtoa_r+0x5c0>)
 8007356:	f004 020f 	and.w	r2, r4, #15
 800735a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007366:	f7f9 f95f 	bl	8000628 <__aeabi_dmul>
 800736a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736e:	1124      	asrs	r4, r4, #4
 8007370:	2300      	movs	r3, #0
 8007372:	2602      	movs	r6, #2
 8007374:	2c00      	cmp	r4, #0
 8007376:	f040 80b2 	bne.w	80074de <_dtoa_r+0x4fe>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1d3      	bne.n	8007326 <_dtoa_r+0x346>
 800737e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007380:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80b7 	beq.w	80074f8 <_dtoa_r+0x518>
 800738a:	4b86      	ldr	r3, [pc, #536]	@ (80075a4 <_dtoa_r+0x5c4>)
 800738c:	2200      	movs	r2, #0
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 fbbb 	bl	8000b0c <__aeabi_dcmplt>
 8007396:	2800      	cmp	r0, #0
 8007398:	f000 80ae 	beq.w	80074f8 <_dtoa_r+0x518>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80aa 	beq.w	80074f8 <_dtoa_r+0x518>
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dd37      	ble.n	800741a <_dtoa_r+0x43a>
 80073aa:	1e7b      	subs	r3, r7, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	4620      	mov	r0, r4
 80073b0:	4b7d      	ldr	r3, [pc, #500]	@ (80075a8 <_dtoa_r+0x5c8>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 f937 	bl	8000628 <__aeabi_dmul>
 80073ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073be:	9c00      	ldr	r4, [sp, #0]
 80073c0:	3601      	adds	r6, #1
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7f9 f8c6 	bl	8000554 <__aeabi_i2d>
 80073c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073cc:	f7f9 f92c 	bl	8000628 <__aeabi_dmul>
 80073d0:	4b76      	ldr	r3, [pc, #472]	@ (80075ac <_dtoa_r+0x5cc>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	f7f8 ff72 	bl	80002bc <__adddf3>
 80073d8:	4605      	mov	r5, r0
 80073da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073de:	2c00      	cmp	r4, #0
 80073e0:	f040 808d 	bne.w	80074fe <_dtoa_r+0x51e>
 80073e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e8:	4b71      	ldr	r3, [pc, #452]	@ (80075b0 <_dtoa_r+0x5d0>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	f7f8 ff64 	bl	80002b8 <__aeabi_dsub>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f8:	462a      	mov	r2, r5
 80073fa:	4633      	mov	r3, r6
 80073fc:	f7f9 fba4 	bl	8000b48 <__aeabi_dcmpgt>
 8007400:	2800      	cmp	r0, #0
 8007402:	f040 828b 	bne.w	800791c <_dtoa_r+0x93c>
 8007406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740a:	462a      	mov	r2, r5
 800740c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007410:	f7f9 fb7c 	bl	8000b0c <__aeabi_dcmplt>
 8007414:	2800      	cmp	r0, #0
 8007416:	f040 8128 	bne.w	800766a <_dtoa_r+0x68a>
 800741a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800741e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007424:	2b00      	cmp	r3, #0
 8007426:	f2c0 815a 	blt.w	80076de <_dtoa_r+0x6fe>
 800742a:	2f0e      	cmp	r7, #14
 800742c:	f300 8157 	bgt.w	80076de <_dtoa_r+0x6fe>
 8007430:	4b5a      	ldr	r3, [pc, #360]	@ (800759c <_dtoa_r+0x5bc>)
 8007432:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007436:	ed93 7b00 	vldr	d7, [r3]
 800743a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800743c:	2b00      	cmp	r3, #0
 800743e:	ed8d 7b00 	vstr	d7, [sp]
 8007442:	da03      	bge.n	800744c <_dtoa_r+0x46c>
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f340 8101 	ble.w	800764e <_dtoa_r+0x66e>
 800744c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007450:	4656      	mov	r6, sl
 8007452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 fa0f 	bl	800087c <__aeabi_ddiv>
 800745e:	f7f9 fb93 	bl	8000b88 <__aeabi_d2iz>
 8007462:	4680      	mov	r8, r0
 8007464:	f7f9 f876 	bl	8000554 <__aeabi_i2d>
 8007468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800746c:	f7f9 f8dc 	bl	8000628 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4620      	mov	r0, r4
 8007476:	4629      	mov	r1, r5
 8007478:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800747c:	f7f8 ff1c 	bl	80002b8 <__aeabi_dsub>
 8007480:	f806 4b01 	strb.w	r4, [r6], #1
 8007484:	9d07      	ldr	r5, [sp, #28]
 8007486:	eba6 040a 	sub.w	r4, r6, sl
 800748a:	42a5      	cmp	r5, r4
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	f040 8117 	bne.w	80076c2 <_dtoa_r+0x6e2>
 8007494:	f7f8 ff12 	bl	80002bc <__adddf3>
 8007498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800749c:	4604      	mov	r4, r0
 800749e:	460d      	mov	r5, r1
 80074a0:	f7f9 fb52 	bl	8000b48 <__aeabi_dcmpgt>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f040 80f9 	bne.w	800769c <_dtoa_r+0x6bc>
 80074aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7f9 fb21 	bl	8000af8 <__aeabi_dcmpeq>
 80074b6:	b118      	cbz	r0, 80074c0 <_dtoa_r+0x4e0>
 80074b8:	f018 0f01 	tst.w	r8, #1
 80074bc:	f040 80ee 	bne.w	800769c <_dtoa_r+0x6bc>
 80074c0:	4649      	mov	r1, r9
 80074c2:	4658      	mov	r0, fp
 80074c4:	f000 fbda 	bl	8007c7c <_Bfree>
 80074c8:	2300      	movs	r3, #0
 80074ca:	7033      	strb	r3, [r6, #0]
 80074cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074ce:	3701      	adds	r7, #1
 80074d0:	601f      	str	r7, [r3, #0]
 80074d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 831d 	beq.w	8007b14 <_dtoa_r+0xb34>
 80074da:	601e      	str	r6, [r3, #0]
 80074dc:	e31a      	b.n	8007b14 <_dtoa_r+0xb34>
 80074de:	07e2      	lsls	r2, r4, #31
 80074e0:	d505      	bpl.n	80074ee <_dtoa_r+0x50e>
 80074e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074e6:	f7f9 f89f 	bl	8000628 <__aeabi_dmul>
 80074ea:	3601      	adds	r6, #1
 80074ec:	2301      	movs	r3, #1
 80074ee:	1064      	asrs	r4, r4, #1
 80074f0:	3508      	adds	r5, #8
 80074f2:	e73f      	b.n	8007374 <_dtoa_r+0x394>
 80074f4:	2602      	movs	r6, #2
 80074f6:	e742      	b.n	800737e <_dtoa_r+0x39e>
 80074f8:	9c07      	ldr	r4, [sp, #28]
 80074fa:	9704      	str	r7, [sp, #16]
 80074fc:	e761      	b.n	80073c2 <_dtoa_r+0x3e2>
 80074fe:	4b27      	ldr	r3, [pc, #156]	@ (800759c <_dtoa_r+0x5bc>)
 8007500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007506:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800750a:	4454      	add	r4, sl
 800750c:	2900      	cmp	r1, #0
 800750e:	d053      	beq.n	80075b8 <_dtoa_r+0x5d8>
 8007510:	4928      	ldr	r1, [pc, #160]	@ (80075b4 <_dtoa_r+0x5d4>)
 8007512:	2000      	movs	r0, #0
 8007514:	f7f9 f9b2 	bl	800087c <__aeabi_ddiv>
 8007518:	4633      	mov	r3, r6
 800751a:	462a      	mov	r2, r5
 800751c:	f7f8 fecc 	bl	80002b8 <__aeabi_dsub>
 8007520:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007524:	4656      	mov	r6, sl
 8007526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752a:	f7f9 fb2d 	bl	8000b88 <__aeabi_d2iz>
 800752e:	4605      	mov	r5, r0
 8007530:	f7f9 f810 	bl	8000554 <__aeabi_i2d>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800753c:	f7f8 febc 	bl	80002b8 <__aeabi_dsub>
 8007540:	3530      	adds	r5, #48	@ 0x30
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800754a:	f806 5b01 	strb.w	r5, [r6], #1
 800754e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007552:	f7f9 fadb 	bl	8000b0c <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	d171      	bne.n	800763e <_dtoa_r+0x65e>
 800755a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800755e:	4911      	ldr	r1, [pc, #68]	@ (80075a4 <_dtoa_r+0x5c4>)
 8007560:	2000      	movs	r0, #0
 8007562:	f7f8 fea9 	bl	80002b8 <__aeabi_dsub>
 8007566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800756a:	f7f9 facf 	bl	8000b0c <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	f040 8095 	bne.w	800769e <_dtoa_r+0x6be>
 8007574:	42a6      	cmp	r6, r4
 8007576:	f43f af50 	beq.w	800741a <_dtoa_r+0x43a>
 800757a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800757e:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <_dtoa_r+0x5c8>)
 8007580:	2200      	movs	r2, #0
 8007582:	f7f9 f851 	bl	8000628 <__aeabi_dmul>
 8007586:	4b08      	ldr	r3, [pc, #32]	@ (80075a8 <_dtoa_r+0x5c8>)
 8007588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800758c:	2200      	movs	r2, #0
 800758e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007592:	f7f9 f849 	bl	8000628 <__aeabi_dmul>
 8007596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800759a:	e7c4      	b.n	8007526 <_dtoa_r+0x546>
 800759c:	0800a4e0 	.word	0x0800a4e0
 80075a0:	0800a4b8 	.word	0x0800a4b8
 80075a4:	3ff00000 	.word	0x3ff00000
 80075a8:	40240000 	.word	0x40240000
 80075ac:	401c0000 	.word	0x401c0000
 80075b0:	40140000 	.word	0x40140000
 80075b4:	3fe00000 	.word	0x3fe00000
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	f7f9 f834 	bl	8000628 <__aeabi_dmul>
 80075c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80075c6:	4656      	mov	r6, sl
 80075c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075cc:	f7f9 fadc 	bl	8000b88 <__aeabi_d2iz>
 80075d0:	4605      	mov	r5, r0
 80075d2:	f7f8 ffbf 	bl	8000554 <__aeabi_i2d>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075de:	f7f8 fe6b 	bl	80002b8 <__aeabi_dsub>
 80075e2:	3530      	adds	r5, #48	@ 0x30
 80075e4:	f806 5b01 	strb.w	r5, [r6], #1
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	42a6      	cmp	r6, r4
 80075ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	d124      	bne.n	8007642 <_dtoa_r+0x662>
 80075f8:	4bac      	ldr	r3, [pc, #688]	@ (80078ac <_dtoa_r+0x8cc>)
 80075fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075fe:	f7f8 fe5d 	bl	80002bc <__adddf3>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760a:	f7f9 fa9d 	bl	8000b48 <__aeabi_dcmpgt>
 800760e:	2800      	cmp	r0, #0
 8007610:	d145      	bne.n	800769e <_dtoa_r+0x6be>
 8007612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007616:	49a5      	ldr	r1, [pc, #660]	@ (80078ac <_dtoa_r+0x8cc>)
 8007618:	2000      	movs	r0, #0
 800761a:	f7f8 fe4d 	bl	80002b8 <__aeabi_dsub>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007626:	f7f9 fa71 	bl	8000b0c <__aeabi_dcmplt>
 800762a:	2800      	cmp	r0, #0
 800762c:	f43f aef5 	beq.w	800741a <_dtoa_r+0x43a>
 8007630:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007632:	1e73      	subs	r3, r6, #1
 8007634:	9315      	str	r3, [sp, #84]	@ 0x54
 8007636:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800763a:	2b30      	cmp	r3, #48	@ 0x30
 800763c:	d0f8      	beq.n	8007630 <_dtoa_r+0x650>
 800763e:	9f04      	ldr	r7, [sp, #16]
 8007640:	e73e      	b.n	80074c0 <_dtoa_r+0x4e0>
 8007642:	4b9b      	ldr	r3, [pc, #620]	@ (80078b0 <_dtoa_r+0x8d0>)
 8007644:	f7f8 fff0 	bl	8000628 <__aeabi_dmul>
 8007648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800764c:	e7bc      	b.n	80075c8 <_dtoa_r+0x5e8>
 800764e:	d10c      	bne.n	800766a <_dtoa_r+0x68a>
 8007650:	4b98      	ldr	r3, [pc, #608]	@ (80078b4 <_dtoa_r+0x8d4>)
 8007652:	2200      	movs	r2, #0
 8007654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007658:	f7f8 ffe6 	bl	8000628 <__aeabi_dmul>
 800765c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007660:	f7f9 fa68 	bl	8000b34 <__aeabi_dcmpge>
 8007664:	2800      	cmp	r0, #0
 8007666:	f000 8157 	beq.w	8007918 <_dtoa_r+0x938>
 800766a:	2400      	movs	r4, #0
 800766c:	4625      	mov	r5, r4
 800766e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007670:	43db      	mvns	r3, r3
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	4656      	mov	r6, sl
 8007676:	2700      	movs	r7, #0
 8007678:	4621      	mov	r1, r4
 800767a:	4658      	mov	r0, fp
 800767c:	f000 fafe 	bl	8007c7c <_Bfree>
 8007680:	2d00      	cmp	r5, #0
 8007682:	d0dc      	beq.n	800763e <_dtoa_r+0x65e>
 8007684:	b12f      	cbz	r7, 8007692 <_dtoa_r+0x6b2>
 8007686:	42af      	cmp	r7, r5
 8007688:	d003      	beq.n	8007692 <_dtoa_r+0x6b2>
 800768a:	4639      	mov	r1, r7
 800768c:	4658      	mov	r0, fp
 800768e:	f000 faf5 	bl	8007c7c <_Bfree>
 8007692:	4629      	mov	r1, r5
 8007694:	4658      	mov	r0, fp
 8007696:	f000 faf1 	bl	8007c7c <_Bfree>
 800769a:	e7d0      	b.n	800763e <_dtoa_r+0x65e>
 800769c:	9704      	str	r7, [sp, #16]
 800769e:	4633      	mov	r3, r6
 80076a0:	461e      	mov	r6, r3
 80076a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076a6:	2a39      	cmp	r2, #57	@ 0x39
 80076a8:	d107      	bne.n	80076ba <_dtoa_r+0x6da>
 80076aa:	459a      	cmp	sl, r3
 80076ac:	d1f8      	bne.n	80076a0 <_dtoa_r+0x6c0>
 80076ae:	9a04      	ldr	r2, [sp, #16]
 80076b0:	3201      	adds	r2, #1
 80076b2:	9204      	str	r2, [sp, #16]
 80076b4:	2230      	movs	r2, #48	@ 0x30
 80076b6:	f88a 2000 	strb.w	r2, [sl]
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	3201      	adds	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	e7bd      	b.n	800763e <_dtoa_r+0x65e>
 80076c2:	4b7b      	ldr	r3, [pc, #492]	@ (80078b0 <_dtoa_r+0x8d0>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f7f8 ffaf 	bl	8000628 <__aeabi_dmul>
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	460d      	mov	r5, r1
 80076d2:	f7f9 fa11 	bl	8000af8 <__aeabi_dcmpeq>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f43f aebb 	beq.w	8007452 <_dtoa_r+0x472>
 80076dc:	e6f0      	b.n	80074c0 <_dtoa_r+0x4e0>
 80076de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	f000 80db 	beq.w	800789c <_dtoa_r+0x8bc>
 80076e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e8:	2a01      	cmp	r2, #1
 80076ea:	f300 80bf 	bgt.w	800786c <_dtoa_r+0x88c>
 80076ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	f000 80b7 	beq.w	8007864 <_dtoa_r+0x884>
 80076f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076fc:	4646      	mov	r6, r8
 80076fe:	9a08      	ldr	r2, [sp, #32]
 8007700:	2101      	movs	r1, #1
 8007702:	441a      	add	r2, r3
 8007704:	4658      	mov	r0, fp
 8007706:	4498      	add	r8, r3
 8007708:	9208      	str	r2, [sp, #32]
 800770a:	f000 fbb5 	bl	8007e78 <__i2b>
 800770e:	4605      	mov	r5, r0
 8007710:	b15e      	cbz	r6, 800772a <_dtoa_r+0x74a>
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dd08      	ble.n	800772a <_dtoa_r+0x74a>
 8007718:	42b3      	cmp	r3, r6
 800771a:	9a08      	ldr	r2, [sp, #32]
 800771c:	bfa8      	it	ge
 800771e:	4633      	movge	r3, r6
 8007720:	eba8 0803 	sub.w	r8, r8, r3
 8007724:	1af6      	subs	r6, r6, r3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	9308      	str	r3, [sp, #32]
 800772a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800772c:	b1f3      	cbz	r3, 800776c <_dtoa_r+0x78c>
 800772e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80b7 	beq.w	80078a4 <_dtoa_r+0x8c4>
 8007736:	b18c      	cbz	r4, 800775c <_dtoa_r+0x77c>
 8007738:	4629      	mov	r1, r5
 800773a:	4622      	mov	r2, r4
 800773c:	4658      	mov	r0, fp
 800773e:	f000 fc5b 	bl	8007ff8 <__pow5mult>
 8007742:	464a      	mov	r2, r9
 8007744:	4601      	mov	r1, r0
 8007746:	4605      	mov	r5, r0
 8007748:	4658      	mov	r0, fp
 800774a:	f000 fbab 	bl	8007ea4 <__multiply>
 800774e:	4649      	mov	r1, r9
 8007750:	9004      	str	r0, [sp, #16]
 8007752:	4658      	mov	r0, fp
 8007754:	f000 fa92 	bl	8007c7c <_Bfree>
 8007758:	9b04      	ldr	r3, [sp, #16]
 800775a:	4699      	mov	r9, r3
 800775c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800775e:	1b1a      	subs	r2, r3, r4
 8007760:	d004      	beq.n	800776c <_dtoa_r+0x78c>
 8007762:	4649      	mov	r1, r9
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fc47 	bl	8007ff8 <__pow5mult>
 800776a:	4681      	mov	r9, r0
 800776c:	2101      	movs	r1, #1
 800776e:	4658      	mov	r0, fp
 8007770:	f000 fb82 	bl	8007e78 <__i2b>
 8007774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007776:	4604      	mov	r4, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 81cf 	beq.w	8007b1c <_dtoa_r+0xb3c>
 800777e:	461a      	mov	r2, r3
 8007780:	4601      	mov	r1, r0
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fc38 	bl	8007ff8 <__pow5mult>
 8007788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778a:	2b01      	cmp	r3, #1
 800778c:	4604      	mov	r4, r0
 800778e:	f300 8095 	bgt.w	80078bc <_dtoa_r+0x8dc>
 8007792:	9b02      	ldr	r3, [sp, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f040 8087 	bne.w	80078a8 <_dtoa_r+0x8c8>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 8089 	bne.w	80078b8 <_dtoa_r+0x8d8>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077ac:	0d1b      	lsrs	r3, r3, #20
 80077ae:	051b      	lsls	r3, r3, #20
 80077b0:	b12b      	cbz	r3, 80077be <_dtoa_r+0x7de>
 80077b2:	9b08      	ldr	r3, [sp, #32]
 80077b4:	3301      	adds	r3, #1
 80077b6:	9308      	str	r3, [sp, #32]
 80077b8:	f108 0801 	add.w	r8, r8, #1
 80077bc:	2301      	movs	r3, #1
 80077be:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 81b0 	beq.w	8007b28 <_dtoa_r+0xb48>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077ce:	6918      	ldr	r0, [r3, #16]
 80077d0:	f000 fb06 	bl	8007de0 <__hi0bits>
 80077d4:	f1c0 0020 	rsb	r0, r0, #32
 80077d8:	9b08      	ldr	r3, [sp, #32]
 80077da:	4418      	add	r0, r3
 80077dc:	f010 001f 	ands.w	r0, r0, #31
 80077e0:	d077      	beq.n	80078d2 <_dtoa_r+0x8f2>
 80077e2:	f1c0 0320 	rsb	r3, r0, #32
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	dd6b      	ble.n	80078c2 <_dtoa_r+0x8e2>
 80077ea:	9b08      	ldr	r3, [sp, #32]
 80077ec:	f1c0 001c 	rsb	r0, r0, #28
 80077f0:	4403      	add	r3, r0
 80077f2:	4480      	add	r8, r0
 80077f4:	4406      	add	r6, r0
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	f1b8 0f00 	cmp.w	r8, #0
 80077fc:	dd05      	ble.n	800780a <_dtoa_r+0x82a>
 80077fe:	4649      	mov	r1, r9
 8007800:	4642      	mov	r2, r8
 8007802:	4658      	mov	r0, fp
 8007804:	f000 fc52 	bl	80080ac <__lshift>
 8007808:	4681      	mov	r9, r0
 800780a:	9b08      	ldr	r3, [sp, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd05      	ble.n	800781c <_dtoa_r+0x83c>
 8007810:	4621      	mov	r1, r4
 8007812:	461a      	mov	r2, r3
 8007814:	4658      	mov	r0, fp
 8007816:	f000 fc49 	bl	80080ac <__lshift>
 800781a:	4604      	mov	r4, r0
 800781c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800781e:	2b00      	cmp	r3, #0
 8007820:	d059      	beq.n	80078d6 <_dtoa_r+0x8f6>
 8007822:	4621      	mov	r1, r4
 8007824:	4648      	mov	r0, r9
 8007826:	f000 fcad 	bl	8008184 <__mcmp>
 800782a:	2800      	cmp	r0, #0
 800782c:	da53      	bge.n	80078d6 <_dtoa_r+0x8f6>
 800782e:	1e7b      	subs	r3, r7, #1
 8007830:	9304      	str	r3, [sp, #16]
 8007832:	4649      	mov	r1, r9
 8007834:	2300      	movs	r3, #0
 8007836:	220a      	movs	r2, #10
 8007838:	4658      	mov	r0, fp
 800783a:	f000 fa41 	bl	8007cc0 <__multadd>
 800783e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007840:	4681      	mov	r9, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 8172 	beq.w	8007b2c <_dtoa_r+0xb4c>
 8007848:	2300      	movs	r3, #0
 800784a:	4629      	mov	r1, r5
 800784c:	220a      	movs	r2, #10
 800784e:	4658      	mov	r0, fp
 8007850:	f000 fa36 	bl	8007cc0 <__multadd>
 8007854:	9b00      	ldr	r3, [sp, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	4605      	mov	r5, r0
 800785a:	dc67      	bgt.n	800792c <_dtoa_r+0x94c>
 800785c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785e:	2b02      	cmp	r3, #2
 8007860:	dc41      	bgt.n	80078e6 <_dtoa_r+0x906>
 8007862:	e063      	b.n	800792c <_dtoa_r+0x94c>
 8007864:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007866:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800786a:	e746      	b.n	80076fa <_dtoa_r+0x71a>
 800786c:	9b07      	ldr	r3, [sp, #28]
 800786e:	1e5c      	subs	r4, r3, #1
 8007870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007872:	42a3      	cmp	r3, r4
 8007874:	bfbf      	itttt	lt
 8007876:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007878:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800787a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800787c:	1ae3      	sublt	r3, r4, r3
 800787e:	bfb4      	ite	lt
 8007880:	18d2      	addlt	r2, r2, r3
 8007882:	1b1c      	subge	r4, r3, r4
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	bfbc      	itt	lt
 8007888:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800788a:	2400      	movlt	r4, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfb5      	itete	lt
 8007890:	eba8 0603 	sublt.w	r6, r8, r3
 8007894:	9b07      	ldrge	r3, [sp, #28]
 8007896:	2300      	movlt	r3, #0
 8007898:	4646      	movge	r6, r8
 800789a:	e730      	b.n	80076fe <_dtoa_r+0x71e>
 800789c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800789e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078a0:	4646      	mov	r6, r8
 80078a2:	e735      	b.n	8007710 <_dtoa_r+0x730>
 80078a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078a6:	e75c      	b.n	8007762 <_dtoa_r+0x782>
 80078a8:	2300      	movs	r3, #0
 80078aa:	e788      	b.n	80077be <_dtoa_r+0x7de>
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	40240000 	.word	0x40240000
 80078b4:	40140000 	.word	0x40140000
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	e780      	b.n	80077be <_dtoa_r+0x7de>
 80078bc:	2300      	movs	r3, #0
 80078be:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c0:	e782      	b.n	80077c8 <_dtoa_r+0x7e8>
 80078c2:	d099      	beq.n	80077f8 <_dtoa_r+0x818>
 80078c4:	9a08      	ldr	r2, [sp, #32]
 80078c6:	331c      	adds	r3, #28
 80078c8:	441a      	add	r2, r3
 80078ca:	4498      	add	r8, r3
 80078cc:	441e      	add	r6, r3
 80078ce:	9208      	str	r2, [sp, #32]
 80078d0:	e792      	b.n	80077f8 <_dtoa_r+0x818>
 80078d2:	4603      	mov	r3, r0
 80078d4:	e7f6      	b.n	80078c4 <_dtoa_r+0x8e4>
 80078d6:	9b07      	ldr	r3, [sp, #28]
 80078d8:	9704      	str	r7, [sp, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dc20      	bgt.n	8007920 <_dtoa_r+0x940>
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	dd1e      	ble.n	8007924 <_dtoa_r+0x944>
 80078e6:	9b00      	ldr	r3, [sp, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f47f aec0 	bne.w	800766e <_dtoa_r+0x68e>
 80078ee:	4621      	mov	r1, r4
 80078f0:	2205      	movs	r2, #5
 80078f2:	4658      	mov	r0, fp
 80078f4:	f000 f9e4 	bl	8007cc0 <__multadd>
 80078f8:	4601      	mov	r1, r0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4648      	mov	r0, r9
 80078fe:	f000 fc41 	bl	8008184 <__mcmp>
 8007902:	2800      	cmp	r0, #0
 8007904:	f77f aeb3 	ble.w	800766e <_dtoa_r+0x68e>
 8007908:	4656      	mov	r6, sl
 800790a:	2331      	movs	r3, #49	@ 0x31
 800790c:	f806 3b01 	strb.w	r3, [r6], #1
 8007910:	9b04      	ldr	r3, [sp, #16]
 8007912:	3301      	adds	r3, #1
 8007914:	9304      	str	r3, [sp, #16]
 8007916:	e6ae      	b.n	8007676 <_dtoa_r+0x696>
 8007918:	9c07      	ldr	r4, [sp, #28]
 800791a:	9704      	str	r7, [sp, #16]
 800791c:	4625      	mov	r5, r4
 800791e:	e7f3      	b.n	8007908 <_dtoa_r+0x928>
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 8104 	beq.w	8007b34 <_dtoa_r+0xb54>
 800792c:	2e00      	cmp	r6, #0
 800792e:	dd05      	ble.n	800793c <_dtoa_r+0x95c>
 8007930:	4629      	mov	r1, r5
 8007932:	4632      	mov	r2, r6
 8007934:	4658      	mov	r0, fp
 8007936:	f000 fbb9 	bl	80080ac <__lshift>
 800793a:	4605      	mov	r5, r0
 800793c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d05a      	beq.n	80079f8 <_dtoa_r+0xa18>
 8007942:	6869      	ldr	r1, [r5, #4]
 8007944:	4658      	mov	r0, fp
 8007946:	f000 f959 	bl	8007bfc <_Balloc>
 800794a:	4606      	mov	r6, r0
 800794c:	b928      	cbnz	r0, 800795a <_dtoa_r+0x97a>
 800794e:	4b84      	ldr	r3, [pc, #528]	@ (8007b60 <_dtoa_r+0xb80>)
 8007950:	4602      	mov	r2, r0
 8007952:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007956:	f7ff bb5a 	b.w	800700e <_dtoa_r+0x2e>
 800795a:	692a      	ldr	r2, [r5, #16]
 800795c:	3202      	adds	r2, #2
 800795e:	0092      	lsls	r2, r2, #2
 8007960:	f105 010c 	add.w	r1, r5, #12
 8007964:	300c      	adds	r0, #12
 8007966:	f7ff fa9e 	bl	8006ea6 <memcpy>
 800796a:	2201      	movs	r2, #1
 800796c:	4631      	mov	r1, r6
 800796e:	4658      	mov	r0, fp
 8007970:	f000 fb9c 	bl	80080ac <__lshift>
 8007974:	f10a 0301 	add.w	r3, sl, #1
 8007978:	9307      	str	r3, [sp, #28]
 800797a:	9b00      	ldr	r3, [sp, #0]
 800797c:	4453      	add	r3, sl
 800797e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007980:	9b02      	ldr	r3, [sp, #8]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	462f      	mov	r7, r5
 8007988:	930a      	str	r3, [sp, #40]	@ 0x28
 800798a:	4605      	mov	r5, r0
 800798c:	9b07      	ldr	r3, [sp, #28]
 800798e:	4621      	mov	r1, r4
 8007990:	3b01      	subs	r3, #1
 8007992:	4648      	mov	r0, r9
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	f7ff fa9b 	bl	8006ed0 <quorem>
 800799a:	4639      	mov	r1, r7
 800799c:	9002      	str	r0, [sp, #8]
 800799e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079a2:	4648      	mov	r0, r9
 80079a4:	f000 fbee 	bl	8008184 <__mcmp>
 80079a8:	462a      	mov	r2, r5
 80079aa:	9008      	str	r0, [sp, #32]
 80079ac:	4621      	mov	r1, r4
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fc04 	bl	80081bc <__mdiff>
 80079b4:	68c2      	ldr	r2, [r0, #12]
 80079b6:	4606      	mov	r6, r0
 80079b8:	bb02      	cbnz	r2, 80079fc <_dtoa_r+0xa1c>
 80079ba:	4601      	mov	r1, r0
 80079bc:	4648      	mov	r0, r9
 80079be:	f000 fbe1 	bl	8008184 <__mcmp>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4631      	mov	r1, r6
 80079c6:	4658      	mov	r0, fp
 80079c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80079ca:	f000 f957 	bl	8007c7c <_Bfree>
 80079ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079d2:	9e07      	ldr	r6, [sp, #28]
 80079d4:	ea43 0102 	orr.w	r1, r3, r2
 80079d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079da:	4319      	orrs	r1, r3
 80079dc:	d110      	bne.n	8007a00 <_dtoa_r+0xa20>
 80079de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079e2:	d029      	beq.n	8007a38 <_dtoa_r+0xa58>
 80079e4:	9b08      	ldr	r3, [sp, #32]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dd02      	ble.n	80079f0 <_dtoa_r+0xa10>
 80079ea:	9b02      	ldr	r3, [sp, #8]
 80079ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	f883 8000 	strb.w	r8, [r3]
 80079f6:	e63f      	b.n	8007678 <_dtoa_r+0x698>
 80079f8:	4628      	mov	r0, r5
 80079fa:	e7bb      	b.n	8007974 <_dtoa_r+0x994>
 80079fc:	2201      	movs	r2, #1
 80079fe:	e7e1      	b.n	80079c4 <_dtoa_r+0x9e4>
 8007a00:	9b08      	ldr	r3, [sp, #32]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	db04      	blt.n	8007a10 <_dtoa_r+0xa30>
 8007a06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	d120      	bne.n	8007a52 <_dtoa_r+0xa72>
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	dded      	ble.n	80079f0 <_dtoa_r+0xa10>
 8007a14:	4649      	mov	r1, r9
 8007a16:	2201      	movs	r2, #1
 8007a18:	4658      	mov	r0, fp
 8007a1a:	f000 fb47 	bl	80080ac <__lshift>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4681      	mov	r9, r0
 8007a22:	f000 fbaf 	bl	8008184 <__mcmp>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	dc03      	bgt.n	8007a32 <_dtoa_r+0xa52>
 8007a2a:	d1e1      	bne.n	80079f0 <_dtoa_r+0xa10>
 8007a2c:	f018 0f01 	tst.w	r8, #1
 8007a30:	d0de      	beq.n	80079f0 <_dtoa_r+0xa10>
 8007a32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a36:	d1d8      	bne.n	80079ea <_dtoa_r+0xa0a>
 8007a38:	9a00      	ldr	r2, [sp, #0]
 8007a3a:	2339      	movs	r3, #57	@ 0x39
 8007a3c:	7013      	strb	r3, [r2, #0]
 8007a3e:	4633      	mov	r3, r6
 8007a40:	461e      	mov	r6, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a48:	2a39      	cmp	r2, #57	@ 0x39
 8007a4a:	d052      	beq.n	8007af2 <_dtoa_r+0xb12>
 8007a4c:	3201      	adds	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
 8007a50:	e612      	b.n	8007678 <_dtoa_r+0x698>
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	dd07      	ble.n	8007a66 <_dtoa_r+0xa86>
 8007a56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a5a:	d0ed      	beq.n	8007a38 <_dtoa_r+0xa58>
 8007a5c:	9a00      	ldr	r2, [sp, #0]
 8007a5e:	f108 0301 	add.w	r3, r8, #1
 8007a62:	7013      	strb	r3, [r2, #0]
 8007a64:	e608      	b.n	8007678 <_dtoa_r+0x698>
 8007a66:	9b07      	ldr	r3, [sp, #28]
 8007a68:	9a07      	ldr	r2, [sp, #28]
 8007a6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d028      	beq.n	8007ac6 <_dtoa_r+0xae6>
 8007a74:	4649      	mov	r1, r9
 8007a76:	2300      	movs	r3, #0
 8007a78:	220a      	movs	r2, #10
 8007a7a:	4658      	mov	r0, fp
 8007a7c:	f000 f920 	bl	8007cc0 <__multadd>
 8007a80:	42af      	cmp	r7, r5
 8007a82:	4681      	mov	r9, r0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	f04f 020a 	mov.w	r2, #10
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	4658      	mov	r0, fp
 8007a90:	d107      	bne.n	8007aa2 <_dtoa_r+0xac2>
 8007a92:	f000 f915 	bl	8007cc0 <__multadd>
 8007a96:	4607      	mov	r7, r0
 8007a98:	4605      	mov	r5, r0
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	e774      	b.n	800798c <_dtoa_r+0x9ac>
 8007aa2:	f000 f90d 	bl	8007cc0 <__multadd>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	220a      	movs	r2, #10
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f000 f906 	bl	8007cc0 <__multadd>
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	e7f0      	b.n	8007a9a <_dtoa_r+0xaba>
 8007ab8:	9b00      	ldr	r3, [sp, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfcc      	ite	gt
 8007abe:	461e      	movgt	r6, r3
 8007ac0:	2601      	movle	r6, #1
 8007ac2:	4456      	add	r6, sl
 8007ac4:	2700      	movs	r7, #0
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	2201      	movs	r2, #1
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 faee 	bl	80080ac <__lshift>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4681      	mov	r9, r0
 8007ad4:	f000 fb56 	bl	8008184 <__mcmp>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	dcb0      	bgt.n	8007a3e <_dtoa_r+0xa5e>
 8007adc:	d102      	bne.n	8007ae4 <_dtoa_r+0xb04>
 8007ade:	f018 0f01 	tst.w	r8, #1
 8007ae2:	d1ac      	bne.n	8007a3e <_dtoa_r+0xa5e>
 8007ae4:	4633      	mov	r3, r6
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aec:	2a30      	cmp	r2, #48	@ 0x30
 8007aee:	d0fa      	beq.n	8007ae6 <_dtoa_r+0xb06>
 8007af0:	e5c2      	b.n	8007678 <_dtoa_r+0x698>
 8007af2:	459a      	cmp	sl, r3
 8007af4:	d1a4      	bne.n	8007a40 <_dtoa_r+0xa60>
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	2331      	movs	r3, #49	@ 0x31
 8007afe:	f88a 3000 	strb.w	r3, [sl]
 8007b02:	e5b9      	b.n	8007678 <_dtoa_r+0x698>
 8007b04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b64 <_dtoa_r+0xb84>
 8007b0a:	b11b      	cbz	r3, 8007b14 <_dtoa_r+0xb34>
 8007b0c:	f10a 0308 	add.w	r3, sl, #8
 8007b10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	4650      	mov	r0, sl
 8007b16:	b019      	add	sp, #100	@ 0x64
 8007b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	f77f ae37 	ble.w	8007792 <_dtoa_r+0x7b2>
 8007b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b28:	2001      	movs	r0, #1
 8007b2a:	e655      	b.n	80077d8 <_dtoa_r+0x7f8>
 8007b2c:	9b00      	ldr	r3, [sp, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f77f aed6 	ble.w	80078e0 <_dtoa_r+0x900>
 8007b34:	4656      	mov	r6, sl
 8007b36:	4621      	mov	r1, r4
 8007b38:	4648      	mov	r0, r9
 8007b3a:	f7ff f9c9 	bl	8006ed0 <quorem>
 8007b3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b42:	f806 8b01 	strb.w	r8, [r6], #1
 8007b46:	9b00      	ldr	r3, [sp, #0]
 8007b48:	eba6 020a 	sub.w	r2, r6, sl
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	ddb3      	ble.n	8007ab8 <_dtoa_r+0xad8>
 8007b50:	4649      	mov	r1, r9
 8007b52:	2300      	movs	r3, #0
 8007b54:	220a      	movs	r2, #10
 8007b56:	4658      	mov	r0, fp
 8007b58:	f000 f8b2 	bl	8007cc0 <__multadd>
 8007b5c:	4681      	mov	r9, r0
 8007b5e:	e7ea      	b.n	8007b36 <_dtoa_r+0xb56>
 8007b60:	0800a441 	.word	0x0800a441
 8007b64:	0800a3c5 	.word	0x0800a3c5

08007b68 <_free_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d041      	beq.n	8007bf4 <_free_r+0x8c>
 8007b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b74:	1f0c      	subs	r4, r1, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfb8      	it	lt
 8007b7a:	18e4      	addlt	r4, r4, r3
 8007b7c:	f7fe f862 	bl	8005c44 <__malloc_lock>
 8007b80:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <_free_r+0x90>)
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	b933      	cbnz	r3, 8007b94 <_free_r+0x2c>
 8007b86:	6063      	str	r3, [r4, #4]
 8007b88:	6014      	str	r4, [r2, #0]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b90:	f7fe b85e 	b.w	8005c50 <__malloc_unlock>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d908      	bls.n	8007baa <_free_r+0x42>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	1821      	adds	r1, r4, r0
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	bf01      	itttt	eq
 8007ba0:	6819      	ldreq	r1, [r3, #0]
 8007ba2:	685b      	ldreq	r3, [r3, #4]
 8007ba4:	1809      	addeq	r1, r1, r0
 8007ba6:	6021      	streq	r1, [r4, #0]
 8007ba8:	e7ed      	b.n	8007b86 <_free_r+0x1e>
 8007baa:	461a      	mov	r2, r3
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b10b      	cbz	r3, 8007bb4 <_free_r+0x4c>
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d9fa      	bls.n	8007baa <_free_r+0x42>
 8007bb4:	6811      	ldr	r1, [r2, #0]
 8007bb6:	1850      	adds	r0, r2, r1
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	d10b      	bne.n	8007bd4 <_free_r+0x6c>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	4401      	add	r1, r0
 8007bc0:	1850      	adds	r0, r2, r1
 8007bc2:	4283      	cmp	r3, r0
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	d1e0      	bne.n	8007b8a <_free_r+0x22>
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	6053      	str	r3, [r2, #4]
 8007bce:	4408      	add	r0, r1
 8007bd0:	6010      	str	r0, [r2, #0]
 8007bd2:	e7da      	b.n	8007b8a <_free_r+0x22>
 8007bd4:	d902      	bls.n	8007bdc <_free_r+0x74>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	e7d6      	b.n	8007b8a <_free_r+0x22>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	1821      	adds	r1, r4, r0
 8007be0:	428b      	cmp	r3, r1
 8007be2:	bf04      	itt	eq
 8007be4:	6819      	ldreq	r1, [r3, #0]
 8007be6:	685b      	ldreq	r3, [r3, #4]
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	bf04      	itt	eq
 8007bec:	1809      	addeq	r1, r1, r0
 8007bee:	6021      	streq	r1, [r4, #0]
 8007bf0:	6054      	str	r4, [r2, #4]
 8007bf2:	e7ca      	b.n	8007b8a <_free_r+0x22>
 8007bf4:	bd38      	pop	{r3, r4, r5, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000454 	.word	0x20000454

08007bfc <_Balloc>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	69c6      	ldr	r6, [r0, #28]
 8007c00:	4604      	mov	r4, r0
 8007c02:	460d      	mov	r5, r1
 8007c04:	b976      	cbnz	r6, 8007c24 <_Balloc+0x28>
 8007c06:	2010      	movs	r0, #16
 8007c08:	f7fd ff6a 	bl	8005ae0 <malloc>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	61e0      	str	r0, [r4, #28]
 8007c10:	b920      	cbnz	r0, 8007c1c <_Balloc+0x20>
 8007c12:	4b18      	ldr	r3, [pc, #96]	@ (8007c74 <_Balloc+0x78>)
 8007c14:	4818      	ldr	r0, [pc, #96]	@ (8007c78 <_Balloc+0x7c>)
 8007c16:	216b      	movs	r1, #107	@ 0x6b
 8007c18:	f001 ff26 	bl	8009a68 <__assert_func>
 8007c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c20:	6006      	str	r6, [r0, #0]
 8007c22:	60c6      	str	r6, [r0, #12]
 8007c24:	69e6      	ldr	r6, [r4, #28]
 8007c26:	68f3      	ldr	r3, [r6, #12]
 8007c28:	b183      	cbz	r3, 8007c4c <_Balloc+0x50>
 8007c2a:	69e3      	ldr	r3, [r4, #28]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c32:	b9b8      	cbnz	r0, 8007c64 <_Balloc+0x68>
 8007c34:	2101      	movs	r1, #1
 8007c36:	fa01 f605 	lsl.w	r6, r1, r5
 8007c3a:	1d72      	adds	r2, r6, #5
 8007c3c:	0092      	lsls	r2, r2, #2
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f001 ff30 	bl	8009aa4 <_calloc_r>
 8007c44:	b160      	cbz	r0, 8007c60 <_Balloc+0x64>
 8007c46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c4a:	e00e      	b.n	8007c6a <_Balloc+0x6e>
 8007c4c:	2221      	movs	r2, #33	@ 0x21
 8007c4e:	2104      	movs	r1, #4
 8007c50:	4620      	mov	r0, r4
 8007c52:	f001 ff27 	bl	8009aa4 <_calloc_r>
 8007c56:	69e3      	ldr	r3, [r4, #28]
 8007c58:	60f0      	str	r0, [r6, #12]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e4      	bne.n	8007c2a <_Balloc+0x2e>
 8007c60:	2000      	movs	r0, #0
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	6802      	ldr	r2, [r0, #0]
 8007c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c70:	e7f7      	b.n	8007c62 <_Balloc+0x66>
 8007c72:	bf00      	nop
 8007c74:	0800a3d2 	.word	0x0800a3d2
 8007c78:	0800a452 	.word	0x0800a452

08007c7c <_Bfree>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	69c6      	ldr	r6, [r0, #28]
 8007c80:	4605      	mov	r5, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b976      	cbnz	r6, 8007ca4 <_Bfree+0x28>
 8007c86:	2010      	movs	r0, #16
 8007c88:	f7fd ff2a 	bl	8005ae0 <malloc>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	61e8      	str	r0, [r5, #28]
 8007c90:	b920      	cbnz	r0, 8007c9c <_Bfree+0x20>
 8007c92:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <_Bfree+0x3c>)
 8007c94:	4809      	ldr	r0, [pc, #36]	@ (8007cbc <_Bfree+0x40>)
 8007c96:	218f      	movs	r1, #143	@ 0x8f
 8007c98:	f001 fee6 	bl	8009a68 <__assert_func>
 8007c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ca0:	6006      	str	r6, [r0, #0]
 8007ca2:	60c6      	str	r6, [r0, #12]
 8007ca4:	b13c      	cbz	r4, 8007cb6 <_Bfree+0x3a>
 8007ca6:	69eb      	ldr	r3, [r5, #28]
 8007ca8:	6862      	ldr	r2, [r4, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cb0:	6021      	str	r1, [r4, #0]
 8007cb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	0800a3d2 	.word	0x0800a3d2
 8007cbc:	0800a452 	.word	0x0800a452

08007cc0 <__multadd>:
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	690d      	ldr	r5, [r1, #16]
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	460c      	mov	r4, r1
 8007cca:	461e      	mov	r6, r3
 8007ccc:	f101 0c14 	add.w	ip, r1, #20
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f8dc 3000 	ldr.w	r3, [ip]
 8007cd6:	b299      	uxth	r1, r3
 8007cd8:	fb02 6101 	mla	r1, r2, r1, r6
 8007cdc:	0c1e      	lsrs	r6, r3, #16
 8007cde:	0c0b      	lsrs	r3, r1, #16
 8007ce0:	fb02 3306 	mla	r3, r2, r6, r3
 8007ce4:	b289      	uxth	r1, r1
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cec:	4285      	cmp	r5, r0
 8007cee:	f84c 1b04 	str.w	r1, [ip], #4
 8007cf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cf6:	dcec      	bgt.n	8007cd2 <__multadd+0x12>
 8007cf8:	b30e      	cbz	r6, 8007d3e <__multadd+0x7e>
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	42ab      	cmp	r3, r5
 8007cfe:	dc19      	bgt.n	8007d34 <__multadd+0x74>
 8007d00:	6861      	ldr	r1, [r4, #4]
 8007d02:	4638      	mov	r0, r7
 8007d04:	3101      	adds	r1, #1
 8007d06:	f7ff ff79 	bl	8007bfc <_Balloc>
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	b928      	cbnz	r0, 8007d1a <__multadd+0x5a>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	4b0c      	ldr	r3, [pc, #48]	@ (8007d44 <__multadd+0x84>)
 8007d12:	480d      	ldr	r0, [pc, #52]	@ (8007d48 <__multadd+0x88>)
 8007d14:	21ba      	movs	r1, #186	@ 0xba
 8007d16:	f001 fea7 	bl	8009a68 <__assert_func>
 8007d1a:	6922      	ldr	r2, [r4, #16]
 8007d1c:	3202      	adds	r2, #2
 8007d1e:	f104 010c 	add.w	r1, r4, #12
 8007d22:	0092      	lsls	r2, r2, #2
 8007d24:	300c      	adds	r0, #12
 8007d26:	f7ff f8be 	bl	8006ea6 <memcpy>
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f7ff ffa5 	bl	8007c7c <_Bfree>
 8007d32:	4644      	mov	r4, r8
 8007d34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d38:	3501      	adds	r5, #1
 8007d3a:	615e      	str	r6, [r3, #20]
 8007d3c:	6125      	str	r5, [r4, #16]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d44:	0800a441 	.word	0x0800a441
 8007d48:	0800a452 	.word	0x0800a452

08007d4c <__s2b>:
 8007d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d50:	460c      	mov	r4, r1
 8007d52:	4615      	mov	r5, r2
 8007d54:	461f      	mov	r7, r3
 8007d56:	2209      	movs	r2, #9
 8007d58:	3308      	adds	r3, #8
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d60:	2100      	movs	r1, #0
 8007d62:	2201      	movs	r2, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	db09      	blt.n	8007d7c <__s2b+0x30>
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7ff ff47 	bl	8007bfc <_Balloc>
 8007d6e:	b940      	cbnz	r0, 8007d82 <__s2b+0x36>
 8007d70:	4602      	mov	r2, r0
 8007d72:	4b19      	ldr	r3, [pc, #100]	@ (8007dd8 <__s2b+0x8c>)
 8007d74:	4819      	ldr	r0, [pc, #100]	@ (8007ddc <__s2b+0x90>)
 8007d76:	21d3      	movs	r1, #211	@ 0xd3
 8007d78:	f001 fe76 	bl	8009a68 <__assert_func>
 8007d7c:	0052      	lsls	r2, r2, #1
 8007d7e:	3101      	adds	r1, #1
 8007d80:	e7f0      	b.n	8007d64 <__s2b+0x18>
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	6143      	str	r3, [r0, #20]
 8007d86:	2d09      	cmp	r5, #9
 8007d88:	f04f 0301 	mov.w	r3, #1
 8007d8c:	6103      	str	r3, [r0, #16]
 8007d8e:	dd16      	ble.n	8007dbe <__s2b+0x72>
 8007d90:	f104 0909 	add.w	r9, r4, #9
 8007d94:	46c8      	mov	r8, r9
 8007d96:	442c      	add	r4, r5
 8007d98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d9c:	4601      	mov	r1, r0
 8007d9e:	3b30      	subs	r3, #48	@ 0x30
 8007da0:	220a      	movs	r2, #10
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ff8c 	bl	8007cc0 <__multadd>
 8007da8:	45a0      	cmp	r8, r4
 8007daa:	d1f5      	bne.n	8007d98 <__s2b+0x4c>
 8007dac:	f1a5 0408 	sub.w	r4, r5, #8
 8007db0:	444c      	add	r4, r9
 8007db2:	1b2d      	subs	r5, r5, r4
 8007db4:	1963      	adds	r3, r4, r5
 8007db6:	42bb      	cmp	r3, r7
 8007db8:	db04      	blt.n	8007dc4 <__s2b+0x78>
 8007dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	340a      	adds	r4, #10
 8007dc0:	2509      	movs	r5, #9
 8007dc2:	e7f6      	b.n	8007db2 <__s2b+0x66>
 8007dc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007dc8:	4601      	mov	r1, r0
 8007dca:	3b30      	subs	r3, #48	@ 0x30
 8007dcc:	220a      	movs	r2, #10
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff ff76 	bl	8007cc0 <__multadd>
 8007dd4:	e7ee      	b.n	8007db4 <__s2b+0x68>
 8007dd6:	bf00      	nop
 8007dd8:	0800a441 	.word	0x0800a441
 8007ddc:	0800a452 	.word	0x0800a452

08007de0 <__hi0bits>:
 8007de0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007de4:	4603      	mov	r3, r0
 8007de6:	bf36      	itet	cc
 8007de8:	0403      	lslcc	r3, r0, #16
 8007dea:	2000      	movcs	r0, #0
 8007dec:	2010      	movcc	r0, #16
 8007dee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007df2:	bf3c      	itt	cc
 8007df4:	021b      	lslcc	r3, r3, #8
 8007df6:	3008      	addcc	r0, #8
 8007df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dfc:	bf3c      	itt	cc
 8007dfe:	011b      	lslcc	r3, r3, #4
 8007e00:	3004      	addcc	r0, #4
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e06:	bf3c      	itt	cc
 8007e08:	009b      	lslcc	r3, r3, #2
 8007e0a:	3002      	addcc	r0, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	db05      	blt.n	8007e1c <__hi0bits+0x3c>
 8007e10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e14:	f100 0001 	add.w	r0, r0, #1
 8007e18:	bf08      	it	eq
 8007e1a:	2020      	moveq	r0, #32
 8007e1c:	4770      	bx	lr

08007e1e <__lo0bits>:
 8007e1e:	6803      	ldr	r3, [r0, #0]
 8007e20:	4602      	mov	r2, r0
 8007e22:	f013 0007 	ands.w	r0, r3, #7
 8007e26:	d00b      	beq.n	8007e40 <__lo0bits+0x22>
 8007e28:	07d9      	lsls	r1, r3, #31
 8007e2a:	d421      	bmi.n	8007e70 <__lo0bits+0x52>
 8007e2c:	0798      	lsls	r0, r3, #30
 8007e2e:	bf49      	itett	mi
 8007e30:	085b      	lsrmi	r3, r3, #1
 8007e32:	089b      	lsrpl	r3, r3, #2
 8007e34:	2001      	movmi	r0, #1
 8007e36:	6013      	strmi	r3, [r2, #0]
 8007e38:	bf5c      	itt	pl
 8007e3a:	6013      	strpl	r3, [r2, #0]
 8007e3c:	2002      	movpl	r0, #2
 8007e3e:	4770      	bx	lr
 8007e40:	b299      	uxth	r1, r3
 8007e42:	b909      	cbnz	r1, 8007e48 <__lo0bits+0x2a>
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	2010      	movs	r0, #16
 8007e48:	b2d9      	uxtb	r1, r3
 8007e4a:	b909      	cbnz	r1, 8007e50 <__lo0bits+0x32>
 8007e4c:	3008      	adds	r0, #8
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	0719      	lsls	r1, r3, #28
 8007e52:	bf04      	itt	eq
 8007e54:	091b      	lsreq	r3, r3, #4
 8007e56:	3004      	addeq	r0, #4
 8007e58:	0799      	lsls	r1, r3, #30
 8007e5a:	bf04      	itt	eq
 8007e5c:	089b      	lsreq	r3, r3, #2
 8007e5e:	3002      	addeq	r0, #2
 8007e60:	07d9      	lsls	r1, r3, #31
 8007e62:	d403      	bmi.n	8007e6c <__lo0bits+0x4e>
 8007e64:	085b      	lsrs	r3, r3, #1
 8007e66:	f100 0001 	add.w	r0, r0, #1
 8007e6a:	d003      	beq.n	8007e74 <__lo0bits+0x56>
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	4770      	bx	lr
 8007e70:	2000      	movs	r0, #0
 8007e72:	4770      	bx	lr
 8007e74:	2020      	movs	r0, #32
 8007e76:	4770      	bx	lr

08007e78 <__i2b>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	f7ff febd 	bl	8007bfc <_Balloc>
 8007e82:	4602      	mov	r2, r0
 8007e84:	b928      	cbnz	r0, 8007e92 <__i2b+0x1a>
 8007e86:	4b05      	ldr	r3, [pc, #20]	@ (8007e9c <__i2b+0x24>)
 8007e88:	4805      	ldr	r0, [pc, #20]	@ (8007ea0 <__i2b+0x28>)
 8007e8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007e8e:	f001 fdeb 	bl	8009a68 <__assert_func>
 8007e92:	2301      	movs	r3, #1
 8007e94:	6144      	str	r4, [r0, #20]
 8007e96:	6103      	str	r3, [r0, #16]
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	bf00      	nop
 8007e9c:	0800a441 	.word	0x0800a441
 8007ea0:	0800a452 	.word	0x0800a452

08007ea4 <__multiply>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	690a      	ldr	r2, [r1, #16]
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	bfa8      	it	ge
 8007eb2:	4623      	movge	r3, r4
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	bfa4      	itt	ge
 8007eb8:	460c      	movge	r4, r1
 8007eba:	461f      	movge	r7, r3
 8007ebc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ec0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	6861      	ldr	r1, [r4, #4]
 8007ec8:	eb0a 0609 	add.w	r6, sl, r9
 8007ecc:	42b3      	cmp	r3, r6
 8007ece:	b085      	sub	sp, #20
 8007ed0:	bfb8      	it	lt
 8007ed2:	3101      	addlt	r1, #1
 8007ed4:	f7ff fe92 	bl	8007bfc <_Balloc>
 8007ed8:	b930      	cbnz	r0, 8007ee8 <__multiply+0x44>
 8007eda:	4602      	mov	r2, r0
 8007edc:	4b44      	ldr	r3, [pc, #272]	@ (8007ff0 <__multiply+0x14c>)
 8007ede:	4845      	ldr	r0, [pc, #276]	@ (8007ff4 <__multiply+0x150>)
 8007ee0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ee4:	f001 fdc0 	bl	8009a68 <__assert_func>
 8007ee8:	f100 0514 	add.w	r5, r0, #20
 8007eec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4543      	cmp	r3, r8
 8007ef6:	d321      	bcc.n	8007f3c <__multiply+0x98>
 8007ef8:	f107 0114 	add.w	r1, r7, #20
 8007efc:	f104 0214 	add.w	r2, r4, #20
 8007f00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f08:	9302      	str	r3, [sp, #8]
 8007f0a:	1b13      	subs	r3, r2, r4
 8007f0c:	3b15      	subs	r3, #21
 8007f0e:	f023 0303 	bic.w	r3, r3, #3
 8007f12:	3304      	adds	r3, #4
 8007f14:	f104 0715 	add.w	r7, r4, #21
 8007f18:	42ba      	cmp	r2, r7
 8007f1a:	bf38      	it	cc
 8007f1c:	2304      	movcc	r3, #4
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	9103      	str	r1, [sp, #12]
 8007f24:	428b      	cmp	r3, r1
 8007f26:	d80c      	bhi.n	8007f42 <__multiply+0x9e>
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	dd03      	ble.n	8007f34 <__multiply+0x90>
 8007f2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d05b      	beq.n	8007fec <__multiply+0x148>
 8007f34:	6106      	str	r6, [r0, #16]
 8007f36:	b005      	add	sp, #20
 8007f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3c:	f843 2b04 	str.w	r2, [r3], #4
 8007f40:	e7d8      	b.n	8007ef4 <__multiply+0x50>
 8007f42:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f46:	f1ba 0f00 	cmp.w	sl, #0
 8007f4a:	d024      	beq.n	8007f96 <__multiply+0xf2>
 8007f4c:	f104 0e14 	add.w	lr, r4, #20
 8007f50:	46a9      	mov	r9, r5
 8007f52:	f04f 0c00 	mov.w	ip, #0
 8007f56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f5a:	f8d9 3000 	ldr.w	r3, [r9]
 8007f5e:	fa1f fb87 	uxth.w	fp, r7
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f6c:	f8d9 7000 	ldr.w	r7, [r9]
 8007f70:	4463      	add	r3, ip
 8007f72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f76:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f84:	4572      	cmp	r2, lr
 8007f86:	f849 3b04 	str.w	r3, [r9], #4
 8007f8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f8e:	d8e2      	bhi.n	8007f56 <__multiply+0xb2>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	f845 c003 	str.w	ip, [r5, r3]
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f9c:	3104      	adds	r1, #4
 8007f9e:	f1b9 0f00 	cmp.w	r9, #0
 8007fa2:	d021      	beq.n	8007fe8 <__multiply+0x144>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	f104 0c14 	add.w	ip, r4, #20
 8007faa:	46ae      	mov	lr, r5
 8007fac:	f04f 0a00 	mov.w	sl, #0
 8007fb0:	f8bc b000 	ldrh.w	fp, [ip]
 8007fb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fb8:	fb09 770b 	mla	r7, r9, fp, r7
 8007fbc:	4457      	add	r7, sl
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fc4:	f84e 3b04 	str.w	r3, [lr], #4
 8007fc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fd0:	f8be 3000 	ldrh.w	r3, [lr]
 8007fd4:	fb09 330a 	mla	r3, r9, sl, r3
 8007fd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fdc:	4562      	cmp	r2, ip
 8007fde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fe2:	d8e5      	bhi.n	8007fb0 <__multiply+0x10c>
 8007fe4:	9f01      	ldr	r7, [sp, #4]
 8007fe6:	51eb      	str	r3, [r5, r7]
 8007fe8:	3504      	adds	r5, #4
 8007fea:	e799      	b.n	8007f20 <__multiply+0x7c>
 8007fec:	3e01      	subs	r6, #1
 8007fee:	e79b      	b.n	8007f28 <__multiply+0x84>
 8007ff0:	0800a441 	.word	0x0800a441
 8007ff4:	0800a452 	.word	0x0800a452

08007ff8 <__pow5mult>:
 8007ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ffc:	4615      	mov	r5, r2
 8007ffe:	f012 0203 	ands.w	r2, r2, #3
 8008002:	4607      	mov	r7, r0
 8008004:	460e      	mov	r6, r1
 8008006:	d007      	beq.n	8008018 <__pow5mult+0x20>
 8008008:	4c25      	ldr	r4, [pc, #148]	@ (80080a0 <__pow5mult+0xa8>)
 800800a:	3a01      	subs	r2, #1
 800800c:	2300      	movs	r3, #0
 800800e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008012:	f7ff fe55 	bl	8007cc0 <__multadd>
 8008016:	4606      	mov	r6, r0
 8008018:	10ad      	asrs	r5, r5, #2
 800801a:	d03d      	beq.n	8008098 <__pow5mult+0xa0>
 800801c:	69fc      	ldr	r4, [r7, #28]
 800801e:	b97c      	cbnz	r4, 8008040 <__pow5mult+0x48>
 8008020:	2010      	movs	r0, #16
 8008022:	f7fd fd5d 	bl	8005ae0 <malloc>
 8008026:	4602      	mov	r2, r0
 8008028:	61f8      	str	r0, [r7, #28]
 800802a:	b928      	cbnz	r0, 8008038 <__pow5mult+0x40>
 800802c:	4b1d      	ldr	r3, [pc, #116]	@ (80080a4 <__pow5mult+0xac>)
 800802e:	481e      	ldr	r0, [pc, #120]	@ (80080a8 <__pow5mult+0xb0>)
 8008030:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008034:	f001 fd18 	bl	8009a68 <__assert_func>
 8008038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800803c:	6004      	str	r4, [r0, #0]
 800803e:	60c4      	str	r4, [r0, #12]
 8008040:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008048:	b94c      	cbnz	r4, 800805e <__pow5mult+0x66>
 800804a:	f240 2171 	movw	r1, #625	@ 0x271
 800804e:	4638      	mov	r0, r7
 8008050:	f7ff ff12 	bl	8007e78 <__i2b>
 8008054:	2300      	movs	r3, #0
 8008056:	f8c8 0008 	str.w	r0, [r8, #8]
 800805a:	4604      	mov	r4, r0
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	f04f 0900 	mov.w	r9, #0
 8008062:	07eb      	lsls	r3, r5, #31
 8008064:	d50a      	bpl.n	800807c <__pow5mult+0x84>
 8008066:	4631      	mov	r1, r6
 8008068:	4622      	mov	r2, r4
 800806a:	4638      	mov	r0, r7
 800806c:	f7ff ff1a 	bl	8007ea4 <__multiply>
 8008070:	4631      	mov	r1, r6
 8008072:	4680      	mov	r8, r0
 8008074:	4638      	mov	r0, r7
 8008076:	f7ff fe01 	bl	8007c7c <_Bfree>
 800807a:	4646      	mov	r6, r8
 800807c:	106d      	asrs	r5, r5, #1
 800807e:	d00b      	beq.n	8008098 <__pow5mult+0xa0>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	b938      	cbnz	r0, 8008094 <__pow5mult+0x9c>
 8008084:	4622      	mov	r2, r4
 8008086:	4621      	mov	r1, r4
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ff0b 	bl	8007ea4 <__multiply>
 800808e:	6020      	str	r0, [r4, #0]
 8008090:	f8c0 9000 	str.w	r9, [r0]
 8008094:	4604      	mov	r4, r0
 8008096:	e7e4      	b.n	8008062 <__pow5mult+0x6a>
 8008098:	4630      	mov	r0, r6
 800809a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800809e:	bf00      	nop
 80080a0:	0800a4ac 	.word	0x0800a4ac
 80080a4:	0800a3d2 	.word	0x0800a3d2
 80080a8:	0800a452 	.word	0x0800a452

080080ac <__lshift>:
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	460c      	mov	r4, r1
 80080b2:	6849      	ldr	r1, [r1, #4]
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ba:	68a3      	ldr	r3, [r4, #8]
 80080bc:	4607      	mov	r7, r0
 80080be:	4691      	mov	r9, r2
 80080c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080c4:	f108 0601 	add.w	r6, r8, #1
 80080c8:	42b3      	cmp	r3, r6
 80080ca:	db0b      	blt.n	80080e4 <__lshift+0x38>
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff fd95 	bl	8007bfc <_Balloc>
 80080d2:	4605      	mov	r5, r0
 80080d4:	b948      	cbnz	r0, 80080ea <__lshift+0x3e>
 80080d6:	4602      	mov	r2, r0
 80080d8:	4b28      	ldr	r3, [pc, #160]	@ (800817c <__lshift+0xd0>)
 80080da:	4829      	ldr	r0, [pc, #164]	@ (8008180 <__lshift+0xd4>)
 80080dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080e0:	f001 fcc2 	bl	8009a68 <__assert_func>
 80080e4:	3101      	adds	r1, #1
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	e7ee      	b.n	80080c8 <__lshift+0x1c>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f100 0114 	add.w	r1, r0, #20
 80080f0:	f100 0210 	add.w	r2, r0, #16
 80080f4:	4618      	mov	r0, r3
 80080f6:	4553      	cmp	r3, sl
 80080f8:	db33      	blt.n	8008162 <__lshift+0xb6>
 80080fa:	6920      	ldr	r0, [r4, #16]
 80080fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008100:	f104 0314 	add.w	r3, r4, #20
 8008104:	f019 091f 	ands.w	r9, r9, #31
 8008108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800810c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008110:	d02b      	beq.n	800816a <__lshift+0xbe>
 8008112:	f1c9 0e20 	rsb	lr, r9, #32
 8008116:	468a      	mov	sl, r1
 8008118:	2200      	movs	r2, #0
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	fa00 f009 	lsl.w	r0, r0, r9
 8008120:	4310      	orrs	r0, r2
 8008122:	f84a 0b04 	str.w	r0, [sl], #4
 8008126:	f853 2b04 	ldr.w	r2, [r3], #4
 800812a:	459c      	cmp	ip, r3
 800812c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008130:	d8f3      	bhi.n	800811a <__lshift+0x6e>
 8008132:	ebac 0304 	sub.w	r3, ip, r4
 8008136:	3b15      	subs	r3, #21
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	3304      	adds	r3, #4
 800813e:	f104 0015 	add.w	r0, r4, #21
 8008142:	4584      	cmp	ip, r0
 8008144:	bf38      	it	cc
 8008146:	2304      	movcc	r3, #4
 8008148:	50ca      	str	r2, [r1, r3]
 800814a:	b10a      	cbz	r2, 8008150 <__lshift+0xa4>
 800814c:	f108 0602 	add.w	r6, r8, #2
 8008150:	3e01      	subs	r6, #1
 8008152:	4638      	mov	r0, r7
 8008154:	612e      	str	r6, [r5, #16]
 8008156:	4621      	mov	r1, r4
 8008158:	f7ff fd90 	bl	8007c7c <_Bfree>
 800815c:	4628      	mov	r0, r5
 800815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008162:	f842 0f04 	str.w	r0, [r2, #4]!
 8008166:	3301      	adds	r3, #1
 8008168:	e7c5      	b.n	80080f6 <__lshift+0x4a>
 800816a:	3904      	subs	r1, #4
 800816c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008170:	f841 2f04 	str.w	r2, [r1, #4]!
 8008174:	459c      	cmp	ip, r3
 8008176:	d8f9      	bhi.n	800816c <__lshift+0xc0>
 8008178:	e7ea      	b.n	8008150 <__lshift+0xa4>
 800817a:	bf00      	nop
 800817c:	0800a441 	.word	0x0800a441
 8008180:	0800a452 	.word	0x0800a452

08008184 <__mcmp>:
 8008184:	690a      	ldr	r2, [r1, #16]
 8008186:	4603      	mov	r3, r0
 8008188:	6900      	ldr	r0, [r0, #16]
 800818a:	1a80      	subs	r0, r0, r2
 800818c:	b530      	push	{r4, r5, lr}
 800818e:	d10e      	bne.n	80081ae <__mcmp+0x2a>
 8008190:	3314      	adds	r3, #20
 8008192:	3114      	adds	r1, #20
 8008194:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008198:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800819c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081a4:	4295      	cmp	r5, r2
 80081a6:	d003      	beq.n	80081b0 <__mcmp+0x2c>
 80081a8:	d205      	bcs.n	80081b6 <__mcmp+0x32>
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	bd30      	pop	{r4, r5, pc}
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d3f3      	bcc.n	800819c <__mcmp+0x18>
 80081b4:	e7fb      	b.n	80081ae <__mcmp+0x2a>
 80081b6:	2001      	movs	r0, #1
 80081b8:	e7f9      	b.n	80081ae <__mcmp+0x2a>
	...

080081bc <__mdiff>:
 80081bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	4689      	mov	r9, r1
 80081c2:	4606      	mov	r6, r0
 80081c4:	4611      	mov	r1, r2
 80081c6:	4648      	mov	r0, r9
 80081c8:	4614      	mov	r4, r2
 80081ca:	f7ff ffdb 	bl	8008184 <__mcmp>
 80081ce:	1e05      	subs	r5, r0, #0
 80081d0:	d112      	bne.n	80081f8 <__mdiff+0x3c>
 80081d2:	4629      	mov	r1, r5
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff fd11 	bl	8007bfc <_Balloc>
 80081da:	4602      	mov	r2, r0
 80081dc:	b928      	cbnz	r0, 80081ea <__mdiff+0x2e>
 80081de:	4b3f      	ldr	r3, [pc, #252]	@ (80082dc <__mdiff+0x120>)
 80081e0:	f240 2137 	movw	r1, #567	@ 0x237
 80081e4:	483e      	ldr	r0, [pc, #248]	@ (80082e0 <__mdiff+0x124>)
 80081e6:	f001 fc3f 	bl	8009a68 <__assert_func>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081f0:	4610      	mov	r0, r2
 80081f2:	b003      	add	sp, #12
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	bfbc      	itt	lt
 80081fa:	464b      	movlt	r3, r9
 80081fc:	46a1      	movlt	r9, r4
 80081fe:	4630      	mov	r0, r6
 8008200:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008204:	bfba      	itte	lt
 8008206:	461c      	movlt	r4, r3
 8008208:	2501      	movlt	r5, #1
 800820a:	2500      	movge	r5, #0
 800820c:	f7ff fcf6 	bl	8007bfc <_Balloc>
 8008210:	4602      	mov	r2, r0
 8008212:	b918      	cbnz	r0, 800821c <__mdiff+0x60>
 8008214:	4b31      	ldr	r3, [pc, #196]	@ (80082dc <__mdiff+0x120>)
 8008216:	f240 2145 	movw	r1, #581	@ 0x245
 800821a:	e7e3      	b.n	80081e4 <__mdiff+0x28>
 800821c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008220:	6926      	ldr	r6, [r4, #16]
 8008222:	60c5      	str	r5, [r0, #12]
 8008224:	f109 0310 	add.w	r3, r9, #16
 8008228:	f109 0514 	add.w	r5, r9, #20
 800822c:	f104 0e14 	add.w	lr, r4, #20
 8008230:	f100 0b14 	add.w	fp, r0, #20
 8008234:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008238:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	46d9      	mov	r9, fp
 8008240:	f04f 0c00 	mov.w	ip, #0
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	f85e 0b04 	ldr.w	r0, [lr], #4
 800824a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	fa1f f38a 	uxth.w	r3, sl
 8008254:	4619      	mov	r1, r3
 8008256:	b283      	uxth	r3, r0
 8008258:	1acb      	subs	r3, r1, r3
 800825a:	0c00      	lsrs	r0, r0, #16
 800825c:	4463      	add	r3, ip
 800825e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008262:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008266:	b29b      	uxth	r3, r3
 8008268:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800826c:	4576      	cmp	r6, lr
 800826e:	f849 3b04 	str.w	r3, [r9], #4
 8008272:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008276:	d8e5      	bhi.n	8008244 <__mdiff+0x88>
 8008278:	1b33      	subs	r3, r6, r4
 800827a:	3b15      	subs	r3, #21
 800827c:	f023 0303 	bic.w	r3, r3, #3
 8008280:	3415      	adds	r4, #21
 8008282:	3304      	adds	r3, #4
 8008284:	42a6      	cmp	r6, r4
 8008286:	bf38      	it	cc
 8008288:	2304      	movcc	r3, #4
 800828a:	441d      	add	r5, r3
 800828c:	445b      	add	r3, fp
 800828e:	461e      	mov	r6, r3
 8008290:	462c      	mov	r4, r5
 8008292:	4544      	cmp	r4, r8
 8008294:	d30e      	bcc.n	80082b4 <__mdiff+0xf8>
 8008296:	f108 0103 	add.w	r1, r8, #3
 800829a:	1b49      	subs	r1, r1, r5
 800829c:	f021 0103 	bic.w	r1, r1, #3
 80082a0:	3d03      	subs	r5, #3
 80082a2:	45a8      	cmp	r8, r5
 80082a4:	bf38      	it	cc
 80082a6:	2100      	movcc	r1, #0
 80082a8:	440b      	add	r3, r1
 80082aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ae:	b191      	cbz	r1, 80082d6 <__mdiff+0x11a>
 80082b0:	6117      	str	r7, [r2, #16]
 80082b2:	e79d      	b.n	80081f0 <__mdiff+0x34>
 80082b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80082b8:	46e6      	mov	lr, ip
 80082ba:	0c08      	lsrs	r0, r1, #16
 80082bc:	fa1c fc81 	uxtah	ip, ip, r1
 80082c0:	4471      	add	r1, lr
 80082c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082c6:	b289      	uxth	r1, r1
 80082c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082cc:	f846 1b04 	str.w	r1, [r6], #4
 80082d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082d4:	e7dd      	b.n	8008292 <__mdiff+0xd6>
 80082d6:	3f01      	subs	r7, #1
 80082d8:	e7e7      	b.n	80082aa <__mdiff+0xee>
 80082da:	bf00      	nop
 80082dc:	0800a441 	.word	0x0800a441
 80082e0:	0800a452 	.word	0x0800a452

080082e4 <__ulp>:
 80082e4:	b082      	sub	sp, #8
 80082e6:	ed8d 0b00 	vstr	d0, [sp]
 80082ea:	9a01      	ldr	r2, [sp, #4]
 80082ec:	4b0f      	ldr	r3, [pc, #60]	@ (800832c <__ulp+0x48>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc08      	bgt.n	800830a <__ulp+0x26>
 80082f8:	425b      	negs	r3, r3
 80082fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008302:	da04      	bge.n	800830e <__ulp+0x2a>
 8008304:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008308:	4113      	asrs	r3, r2
 800830a:	2200      	movs	r2, #0
 800830c:	e008      	b.n	8008320 <__ulp+0x3c>
 800830e:	f1a2 0314 	sub.w	r3, r2, #20
 8008312:	2b1e      	cmp	r3, #30
 8008314:	bfda      	itte	le
 8008316:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800831a:	40da      	lsrle	r2, r3
 800831c:	2201      	movgt	r2, #1
 800831e:	2300      	movs	r3, #0
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	ec41 0b10 	vmov	d0, r0, r1
 8008328:	b002      	add	sp, #8
 800832a:	4770      	bx	lr
 800832c:	7ff00000 	.word	0x7ff00000

08008330 <__b2d>:
 8008330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008334:	6906      	ldr	r6, [r0, #16]
 8008336:	f100 0814 	add.w	r8, r0, #20
 800833a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800833e:	1f37      	subs	r7, r6, #4
 8008340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008344:	4610      	mov	r0, r2
 8008346:	f7ff fd4b 	bl	8007de0 <__hi0bits>
 800834a:	f1c0 0320 	rsb	r3, r0, #32
 800834e:	280a      	cmp	r0, #10
 8008350:	600b      	str	r3, [r1, #0]
 8008352:	491b      	ldr	r1, [pc, #108]	@ (80083c0 <__b2d+0x90>)
 8008354:	dc15      	bgt.n	8008382 <__b2d+0x52>
 8008356:	f1c0 0c0b 	rsb	ip, r0, #11
 800835a:	fa22 f30c 	lsr.w	r3, r2, ip
 800835e:	45b8      	cmp	r8, r7
 8008360:	ea43 0501 	orr.w	r5, r3, r1
 8008364:	bf34      	ite	cc
 8008366:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800836a:	2300      	movcs	r3, #0
 800836c:	3015      	adds	r0, #21
 800836e:	fa02 f000 	lsl.w	r0, r2, r0
 8008372:	fa23 f30c 	lsr.w	r3, r3, ip
 8008376:	4303      	orrs	r3, r0
 8008378:	461c      	mov	r4, r3
 800837a:	ec45 4b10 	vmov	d0, r4, r5
 800837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008382:	45b8      	cmp	r8, r7
 8008384:	bf3a      	itte	cc
 8008386:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800838a:	f1a6 0708 	subcc.w	r7, r6, #8
 800838e:	2300      	movcs	r3, #0
 8008390:	380b      	subs	r0, #11
 8008392:	d012      	beq.n	80083ba <__b2d+0x8a>
 8008394:	f1c0 0120 	rsb	r1, r0, #32
 8008398:	fa23 f401 	lsr.w	r4, r3, r1
 800839c:	4082      	lsls	r2, r0
 800839e:	4322      	orrs	r2, r4
 80083a0:	4547      	cmp	r7, r8
 80083a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80083a6:	bf8c      	ite	hi
 80083a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80083ac:	2200      	movls	r2, #0
 80083ae:	4083      	lsls	r3, r0
 80083b0:	40ca      	lsrs	r2, r1
 80083b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80083b6:	4313      	orrs	r3, r2
 80083b8:	e7de      	b.n	8008378 <__b2d+0x48>
 80083ba:	ea42 0501 	orr.w	r5, r2, r1
 80083be:	e7db      	b.n	8008378 <__b2d+0x48>
 80083c0:	3ff00000 	.word	0x3ff00000

080083c4 <__d2b>:
 80083c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	460f      	mov	r7, r1
 80083ca:	2101      	movs	r1, #1
 80083cc:	ec59 8b10 	vmov	r8, r9, d0
 80083d0:	4616      	mov	r6, r2
 80083d2:	f7ff fc13 	bl	8007bfc <_Balloc>
 80083d6:	4604      	mov	r4, r0
 80083d8:	b930      	cbnz	r0, 80083e8 <__d2b+0x24>
 80083da:	4602      	mov	r2, r0
 80083dc:	4b23      	ldr	r3, [pc, #140]	@ (800846c <__d2b+0xa8>)
 80083de:	4824      	ldr	r0, [pc, #144]	@ (8008470 <__d2b+0xac>)
 80083e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80083e4:	f001 fb40 	bl	8009a68 <__assert_func>
 80083e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083f0:	b10d      	cbz	r5, 80083f6 <__d2b+0x32>
 80083f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	f1b8 0300 	subs.w	r3, r8, #0
 80083fc:	d023      	beq.n	8008446 <__d2b+0x82>
 80083fe:	4668      	mov	r0, sp
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	f7ff fd0c 	bl	8007e1e <__lo0bits>
 8008406:	e9dd 1200 	ldrd	r1, r2, [sp]
 800840a:	b1d0      	cbz	r0, 8008442 <__d2b+0x7e>
 800840c:	f1c0 0320 	rsb	r3, r0, #32
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	430b      	orrs	r3, r1
 8008416:	40c2      	lsrs	r2, r0
 8008418:	6163      	str	r3, [r4, #20]
 800841a:	9201      	str	r2, [sp, #4]
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	61a3      	str	r3, [r4, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bf0c      	ite	eq
 8008424:	2201      	moveq	r2, #1
 8008426:	2202      	movne	r2, #2
 8008428:	6122      	str	r2, [r4, #16]
 800842a:	b1a5      	cbz	r5, 8008456 <__d2b+0x92>
 800842c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008430:	4405      	add	r5, r0
 8008432:	603d      	str	r5, [r7, #0]
 8008434:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008438:	6030      	str	r0, [r6, #0]
 800843a:	4620      	mov	r0, r4
 800843c:	b003      	add	sp, #12
 800843e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008442:	6161      	str	r1, [r4, #20]
 8008444:	e7ea      	b.n	800841c <__d2b+0x58>
 8008446:	a801      	add	r0, sp, #4
 8008448:	f7ff fce9 	bl	8007e1e <__lo0bits>
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	6163      	str	r3, [r4, #20]
 8008450:	3020      	adds	r0, #32
 8008452:	2201      	movs	r2, #1
 8008454:	e7e8      	b.n	8008428 <__d2b+0x64>
 8008456:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800845a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800845e:	6038      	str	r0, [r7, #0]
 8008460:	6918      	ldr	r0, [r3, #16]
 8008462:	f7ff fcbd 	bl	8007de0 <__hi0bits>
 8008466:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800846a:	e7e5      	b.n	8008438 <__d2b+0x74>
 800846c:	0800a441 	.word	0x0800a441
 8008470:	0800a452 	.word	0x0800a452

08008474 <__ratio>:
 8008474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	b085      	sub	sp, #20
 800847a:	e9cd 1000 	strd	r1, r0, [sp]
 800847e:	a902      	add	r1, sp, #8
 8008480:	f7ff ff56 	bl	8008330 <__b2d>
 8008484:	9800      	ldr	r0, [sp, #0]
 8008486:	a903      	add	r1, sp, #12
 8008488:	ec55 4b10 	vmov	r4, r5, d0
 800848c:	f7ff ff50 	bl	8008330 <__b2d>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	6919      	ldr	r1, [r3, #16]
 8008494:	9b00      	ldr	r3, [sp, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	1ac9      	subs	r1, r1, r3
 800849a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800849e:	1a9b      	subs	r3, r3, r2
 80084a0:	ec5b ab10 	vmov	sl, fp, d0
 80084a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bfce      	itee	gt
 80084ac:	462a      	movgt	r2, r5
 80084ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084b2:	465a      	movle	r2, fp
 80084b4:	462f      	mov	r7, r5
 80084b6:	46d9      	mov	r9, fp
 80084b8:	bfcc      	ite	gt
 80084ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80084c2:	464b      	mov	r3, r9
 80084c4:	4652      	mov	r2, sl
 80084c6:	4620      	mov	r0, r4
 80084c8:	4639      	mov	r1, r7
 80084ca:	f7f8 f9d7 	bl	800087c <__aeabi_ddiv>
 80084ce:	ec41 0b10 	vmov	d0, r0, r1
 80084d2:	b005      	add	sp, #20
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084d8 <__copybits>:
 80084d8:	3901      	subs	r1, #1
 80084da:	b570      	push	{r4, r5, r6, lr}
 80084dc:	1149      	asrs	r1, r1, #5
 80084de:	6914      	ldr	r4, [r2, #16]
 80084e0:	3101      	adds	r1, #1
 80084e2:	f102 0314 	add.w	r3, r2, #20
 80084e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084ee:	1f05      	subs	r5, r0, #4
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	d30c      	bcc.n	800850e <__copybits+0x36>
 80084f4:	1aa3      	subs	r3, r4, r2
 80084f6:	3b11      	subs	r3, #17
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3211      	adds	r2, #17
 80084fe:	42a2      	cmp	r2, r4
 8008500:	bf88      	it	hi
 8008502:	2300      	movhi	r3, #0
 8008504:	4418      	add	r0, r3
 8008506:	2300      	movs	r3, #0
 8008508:	4288      	cmp	r0, r1
 800850a:	d305      	bcc.n	8008518 <__copybits+0x40>
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008512:	f845 6f04 	str.w	r6, [r5, #4]!
 8008516:	e7eb      	b.n	80084f0 <__copybits+0x18>
 8008518:	f840 3b04 	str.w	r3, [r0], #4
 800851c:	e7f4      	b.n	8008508 <__copybits+0x30>

0800851e <__any_on>:
 800851e:	f100 0214 	add.w	r2, r0, #20
 8008522:	6900      	ldr	r0, [r0, #16]
 8008524:	114b      	asrs	r3, r1, #5
 8008526:	4298      	cmp	r0, r3
 8008528:	b510      	push	{r4, lr}
 800852a:	db11      	blt.n	8008550 <__any_on+0x32>
 800852c:	dd0a      	ble.n	8008544 <__any_on+0x26>
 800852e:	f011 011f 	ands.w	r1, r1, #31
 8008532:	d007      	beq.n	8008544 <__any_on+0x26>
 8008534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008538:	fa24 f001 	lsr.w	r0, r4, r1
 800853c:	fa00 f101 	lsl.w	r1, r0, r1
 8008540:	428c      	cmp	r4, r1
 8008542:	d10b      	bne.n	800855c <__any_on+0x3e>
 8008544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008548:	4293      	cmp	r3, r2
 800854a:	d803      	bhi.n	8008554 <__any_on+0x36>
 800854c:	2000      	movs	r0, #0
 800854e:	bd10      	pop	{r4, pc}
 8008550:	4603      	mov	r3, r0
 8008552:	e7f7      	b.n	8008544 <__any_on+0x26>
 8008554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008558:	2900      	cmp	r1, #0
 800855a:	d0f5      	beq.n	8008548 <__any_on+0x2a>
 800855c:	2001      	movs	r0, #1
 800855e:	e7f6      	b.n	800854e <__any_on+0x30>

08008560 <sulp>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	4604      	mov	r4, r0
 8008564:	460d      	mov	r5, r1
 8008566:	ec45 4b10 	vmov	d0, r4, r5
 800856a:	4616      	mov	r6, r2
 800856c:	f7ff feba 	bl	80082e4 <__ulp>
 8008570:	ec51 0b10 	vmov	r0, r1, d0
 8008574:	b17e      	cbz	r6, 8008596 <sulp+0x36>
 8008576:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800857a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd09      	ble.n	8008596 <sulp+0x36>
 8008582:	051b      	lsls	r3, r3, #20
 8008584:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008588:	2400      	movs	r4, #0
 800858a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800858e:	4622      	mov	r2, r4
 8008590:	462b      	mov	r3, r5
 8008592:	f7f8 f849 	bl	8000628 <__aeabi_dmul>
 8008596:	ec41 0b10 	vmov	d0, r0, r1
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	0000      	movs	r0, r0
	...

080085a0 <_strtod_l>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	b09f      	sub	sp, #124	@ 0x7c
 80085a6:	460c      	mov	r4, r1
 80085a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80085aa:	2200      	movs	r2, #0
 80085ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80085ae:	9005      	str	r0, [sp, #20]
 80085b0:	f04f 0a00 	mov.w	sl, #0
 80085b4:	f04f 0b00 	mov.w	fp, #0
 80085b8:	460a      	mov	r2, r1
 80085ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80085bc:	7811      	ldrb	r1, [r2, #0]
 80085be:	292b      	cmp	r1, #43	@ 0x2b
 80085c0:	d04a      	beq.n	8008658 <_strtod_l+0xb8>
 80085c2:	d838      	bhi.n	8008636 <_strtod_l+0x96>
 80085c4:	290d      	cmp	r1, #13
 80085c6:	d832      	bhi.n	800862e <_strtod_l+0x8e>
 80085c8:	2908      	cmp	r1, #8
 80085ca:	d832      	bhi.n	8008632 <_strtod_l+0x92>
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d03b      	beq.n	8008648 <_strtod_l+0xa8>
 80085d0:	2200      	movs	r2, #0
 80085d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80085d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80085d6:	782a      	ldrb	r2, [r5, #0]
 80085d8:	2a30      	cmp	r2, #48	@ 0x30
 80085da:	f040 80b3 	bne.w	8008744 <_strtod_l+0x1a4>
 80085de:	786a      	ldrb	r2, [r5, #1]
 80085e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80085e4:	2a58      	cmp	r2, #88	@ 0x58
 80085e6:	d16e      	bne.n	80086c6 <_strtod_l+0x126>
 80085e8:	9302      	str	r3, [sp, #8]
 80085ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4a8e      	ldr	r2, [pc, #568]	@ (800882c <_strtod_l+0x28c>)
 80085f4:	9805      	ldr	r0, [sp, #20]
 80085f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80085f8:	a919      	add	r1, sp, #100	@ 0x64
 80085fa:	f001 facf 	bl	8009b9c <__gethex>
 80085fe:	f010 060f 	ands.w	r6, r0, #15
 8008602:	4604      	mov	r4, r0
 8008604:	d005      	beq.n	8008612 <_strtod_l+0x72>
 8008606:	2e06      	cmp	r6, #6
 8008608:	d128      	bne.n	800865c <_strtod_l+0xbc>
 800860a:	3501      	adds	r5, #1
 800860c:	2300      	movs	r3, #0
 800860e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f040 858e 	bne.w	8009136 <_strtod_l+0xb96>
 800861a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800861c:	b1cb      	cbz	r3, 8008652 <_strtod_l+0xb2>
 800861e:	4652      	mov	r2, sl
 8008620:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008624:	ec43 2b10 	vmov	d0, r2, r3
 8008628:	b01f      	add	sp, #124	@ 0x7c
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	2920      	cmp	r1, #32
 8008630:	d1ce      	bne.n	80085d0 <_strtod_l+0x30>
 8008632:	3201      	adds	r2, #1
 8008634:	e7c1      	b.n	80085ba <_strtod_l+0x1a>
 8008636:	292d      	cmp	r1, #45	@ 0x2d
 8008638:	d1ca      	bne.n	80085d0 <_strtod_l+0x30>
 800863a:	2101      	movs	r1, #1
 800863c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800863e:	1c51      	adds	r1, r2, #1
 8008640:	9119      	str	r1, [sp, #100]	@ 0x64
 8008642:	7852      	ldrb	r2, [r2, #1]
 8008644:	2a00      	cmp	r2, #0
 8008646:	d1c5      	bne.n	80085d4 <_strtod_l+0x34>
 8008648:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800864a:	9419      	str	r4, [sp, #100]	@ 0x64
 800864c:	2b00      	cmp	r3, #0
 800864e:	f040 8570 	bne.w	8009132 <_strtod_l+0xb92>
 8008652:	4652      	mov	r2, sl
 8008654:	465b      	mov	r3, fp
 8008656:	e7e5      	b.n	8008624 <_strtod_l+0x84>
 8008658:	2100      	movs	r1, #0
 800865a:	e7ef      	b.n	800863c <_strtod_l+0x9c>
 800865c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800865e:	b13a      	cbz	r2, 8008670 <_strtod_l+0xd0>
 8008660:	2135      	movs	r1, #53	@ 0x35
 8008662:	a81c      	add	r0, sp, #112	@ 0x70
 8008664:	f7ff ff38 	bl	80084d8 <__copybits>
 8008668:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800866a:	9805      	ldr	r0, [sp, #20]
 800866c:	f7ff fb06 	bl	8007c7c <_Bfree>
 8008670:	3e01      	subs	r6, #1
 8008672:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008674:	2e04      	cmp	r6, #4
 8008676:	d806      	bhi.n	8008686 <_strtod_l+0xe6>
 8008678:	e8df f006 	tbb	[pc, r6]
 800867c:	201d0314 	.word	0x201d0314
 8008680:	14          	.byte	0x14
 8008681:	00          	.byte	0x00
 8008682:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008686:	05e1      	lsls	r1, r4, #23
 8008688:	bf48      	it	mi
 800868a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800868e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008692:	0d1b      	lsrs	r3, r3, #20
 8008694:	051b      	lsls	r3, r3, #20
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1bb      	bne.n	8008612 <_strtod_l+0x72>
 800869a:	f7fe fbd7 	bl	8006e4c <__errno>
 800869e:	2322      	movs	r3, #34	@ 0x22
 80086a0:	6003      	str	r3, [r0, #0]
 80086a2:	e7b6      	b.n	8008612 <_strtod_l+0x72>
 80086a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80086a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80086ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80086b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80086b4:	e7e7      	b.n	8008686 <_strtod_l+0xe6>
 80086b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008834 <_strtod_l+0x294>
 80086ba:	e7e4      	b.n	8008686 <_strtod_l+0xe6>
 80086bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80086c0:	f04f 3aff 	mov.w	sl, #4294967295
 80086c4:	e7df      	b.n	8008686 <_strtod_l+0xe6>
 80086c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	2b30      	cmp	r3, #48	@ 0x30
 80086d0:	d0f9      	beq.n	80086c6 <_strtod_l+0x126>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d09d      	beq.n	8008612 <_strtod_l+0x72>
 80086d6:	2301      	movs	r3, #1
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80086de:	2300      	movs	r3, #0
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086e4:	461f      	mov	r7, r3
 80086e6:	220a      	movs	r2, #10
 80086e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80086ea:	7805      	ldrb	r5, [r0, #0]
 80086ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80086f0:	b2d9      	uxtb	r1, r3
 80086f2:	2909      	cmp	r1, #9
 80086f4:	d928      	bls.n	8008748 <_strtod_l+0x1a8>
 80086f6:	494e      	ldr	r1, [pc, #312]	@ (8008830 <_strtod_l+0x290>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	f001 f979 	bl	80099f0 <strncmp>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d032      	beq.n	8008768 <_strtod_l+0x1c8>
 8008702:	2000      	movs	r0, #0
 8008704:	462a      	mov	r2, r5
 8008706:	4681      	mov	r9, r0
 8008708:	463d      	mov	r5, r7
 800870a:	4603      	mov	r3, r0
 800870c:	2a65      	cmp	r2, #101	@ 0x65
 800870e:	d001      	beq.n	8008714 <_strtod_l+0x174>
 8008710:	2a45      	cmp	r2, #69	@ 0x45
 8008712:	d114      	bne.n	800873e <_strtod_l+0x19e>
 8008714:	b91d      	cbnz	r5, 800871e <_strtod_l+0x17e>
 8008716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008718:	4302      	orrs	r2, r0
 800871a:	d095      	beq.n	8008648 <_strtod_l+0xa8>
 800871c:	2500      	movs	r5, #0
 800871e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008720:	1c62      	adds	r2, r4, #1
 8008722:	9219      	str	r2, [sp, #100]	@ 0x64
 8008724:	7862      	ldrb	r2, [r4, #1]
 8008726:	2a2b      	cmp	r2, #43	@ 0x2b
 8008728:	d077      	beq.n	800881a <_strtod_l+0x27a>
 800872a:	2a2d      	cmp	r2, #45	@ 0x2d
 800872c:	d07b      	beq.n	8008826 <_strtod_l+0x286>
 800872e:	f04f 0c00 	mov.w	ip, #0
 8008732:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008736:	2909      	cmp	r1, #9
 8008738:	f240 8082 	bls.w	8008840 <_strtod_l+0x2a0>
 800873c:	9419      	str	r4, [sp, #100]	@ 0x64
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	e0a2      	b.n	800888a <_strtod_l+0x2ea>
 8008744:	2300      	movs	r3, #0
 8008746:	e7c7      	b.n	80086d8 <_strtod_l+0x138>
 8008748:	2f08      	cmp	r7, #8
 800874a:	bfd5      	itete	le
 800874c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800874e:	9908      	ldrgt	r1, [sp, #32]
 8008750:	fb02 3301 	mlale	r3, r2, r1, r3
 8008754:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008758:	f100 0001 	add.w	r0, r0, #1
 800875c:	bfd4      	ite	le
 800875e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008760:	9308      	strgt	r3, [sp, #32]
 8008762:	3701      	adds	r7, #1
 8008764:	9019      	str	r0, [sp, #100]	@ 0x64
 8008766:	e7bf      	b.n	80086e8 <_strtod_l+0x148>
 8008768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	9219      	str	r2, [sp, #100]	@ 0x64
 800876e:	785a      	ldrb	r2, [r3, #1]
 8008770:	b37f      	cbz	r7, 80087d2 <_strtod_l+0x232>
 8008772:	4681      	mov	r9, r0
 8008774:	463d      	mov	r5, r7
 8008776:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800877a:	2b09      	cmp	r3, #9
 800877c:	d912      	bls.n	80087a4 <_strtod_l+0x204>
 800877e:	2301      	movs	r3, #1
 8008780:	e7c4      	b.n	800870c <_strtod_l+0x16c>
 8008782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	9219      	str	r2, [sp, #100]	@ 0x64
 8008788:	785a      	ldrb	r2, [r3, #1]
 800878a:	3001      	adds	r0, #1
 800878c:	2a30      	cmp	r2, #48	@ 0x30
 800878e:	d0f8      	beq.n	8008782 <_strtod_l+0x1e2>
 8008790:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008794:	2b08      	cmp	r3, #8
 8008796:	f200 84d3 	bhi.w	8009140 <_strtod_l+0xba0>
 800879a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800879c:	930c      	str	r3, [sp, #48]	@ 0x30
 800879e:	4681      	mov	r9, r0
 80087a0:	2000      	movs	r0, #0
 80087a2:	4605      	mov	r5, r0
 80087a4:	3a30      	subs	r2, #48	@ 0x30
 80087a6:	f100 0301 	add.w	r3, r0, #1
 80087aa:	d02a      	beq.n	8008802 <_strtod_l+0x262>
 80087ac:	4499      	add	r9, r3
 80087ae:	eb00 0c05 	add.w	ip, r0, r5
 80087b2:	462b      	mov	r3, r5
 80087b4:	210a      	movs	r1, #10
 80087b6:	4563      	cmp	r3, ip
 80087b8:	d10d      	bne.n	80087d6 <_strtod_l+0x236>
 80087ba:	1c69      	adds	r1, r5, #1
 80087bc:	4401      	add	r1, r0
 80087be:	4428      	add	r0, r5
 80087c0:	2808      	cmp	r0, #8
 80087c2:	dc16      	bgt.n	80087f2 <_strtod_l+0x252>
 80087c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087c6:	230a      	movs	r3, #10
 80087c8:	fb03 2300 	mla	r3, r3, r0, r2
 80087cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80087ce:	2300      	movs	r3, #0
 80087d0:	e018      	b.n	8008804 <_strtod_l+0x264>
 80087d2:	4638      	mov	r0, r7
 80087d4:	e7da      	b.n	800878c <_strtod_l+0x1ec>
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	f103 0301 	add.w	r3, r3, #1
 80087dc:	dc03      	bgt.n	80087e6 <_strtod_l+0x246>
 80087de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80087e0:	434e      	muls	r6, r1
 80087e2:	960a      	str	r6, [sp, #40]	@ 0x28
 80087e4:	e7e7      	b.n	80087b6 <_strtod_l+0x216>
 80087e6:	2b10      	cmp	r3, #16
 80087e8:	bfde      	ittt	le
 80087ea:	9e08      	ldrle	r6, [sp, #32]
 80087ec:	434e      	mulle	r6, r1
 80087ee:	9608      	strle	r6, [sp, #32]
 80087f0:	e7e1      	b.n	80087b6 <_strtod_l+0x216>
 80087f2:	280f      	cmp	r0, #15
 80087f4:	dceb      	bgt.n	80087ce <_strtod_l+0x22e>
 80087f6:	9808      	ldr	r0, [sp, #32]
 80087f8:	230a      	movs	r3, #10
 80087fa:	fb03 2300 	mla	r3, r3, r0, r2
 80087fe:	9308      	str	r3, [sp, #32]
 8008800:	e7e5      	b.n	80087ce <_strtod_l+0x22e>
 8008802:	4629      	mov	r1, r5
 8008804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008806:	1c50      	adds	r0, r2, #1
 8008808:	9019      	str	r0, [sp, #100]	@ 0x64
 800880a:	7852      	ldrb	r2, [r2, #1]
 800880c:	4618      	mov	r0, r3
 800880e:	460d      	mov	r5, r1
 8008810:	e7b1      	b.n	8008776 <_strtod_l+0x1d6>
 8008812:	f04f 0900 	mov.w	r9, #0
 8008816:	2301      	movs	r3, #1
 8008818:	e77d      	b.n	8008716 <_strtod_l+0x176>
 800881a:	f04f 0c00 	mov.w	ip, #0
 800881e:	1ca2      	adds	r2, r4, #2
 8008820:	9219      	str	r2, [sp, #100]	@ 0x64
 8008822:	78a2      	ldrb	r2, [r4, #2]
 8008824:	e785      	b.n	8008732 <_strtod_l+0x192>
 8008826:	f04f 0c01 	mov.w	ip, #1
 800882a:	e7f8      	b.n	800881e <_strtod_l+0x27e>
 800882c:	0800a5c0 	.word	0x0800a5c0
 8008830:	0800a5a8 	.word	0x0800a5a8
 8008834:	7ff00000 	.word	0x7ff00000
 8008838:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800883a:	1c51      	adds	r1, r2, #1
 800883c:	9119      	str	r1, [sp, #100]	@ 0x64
 800883e:	7852      	ldrb	r2, [r2, #1]
 8008840:	2a30      	cmp	r2, #48	@ 0x30
 8008842:	d0f9      	beq.n	8008838 <_strtod_l+0x298>
 8008844:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008848:	2908      	cmp	r1, #8
 800884a:	f63f af78 	bhi.w	800873e <_strtod_l+0x19e>
 800884e:	3a30      	subs	r2, #48	@ 0x30
 8008850:	920e      	str	r2, [sp, #56]	@ 0x38
 8008852:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008854:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008856:	f04f 080a 	mov.w	r8, #10
 800885a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800885c:	1c56      	adds	r6, r2, #1
 800885e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008860:	7852      	ldrb	r2, [r2, #1]
 8008862:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008866:	f1be 0f09 	cmp.w	lr, #9
 800886a:	d939      	bls.n	80088e0 <_strtod_l+0x340>
 800886c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800886e:	1a76      	subs	r6, r6, r1
 8008870:	2e08      	cmp	r6, #8
 8008872:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008876:	dc03      	bgt.n	8008880 <_strtod_l+0x2e0>
 8008878:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800887a:	4588      	cmp	r8, r1
 800887c:	bfa8      	it	ge
 800887e:	4688      	movge	r8, r1
 8008880:	f1bc 0f00 	cmp.w	ip, #0
 8008884:	d001      	beq.n	800888a <_strtod_l+0x2ea>
 8008886:	f1c8 0800 	rsb	r8, r8, #0
 800888a:	2d00      	cmp	r5, #0
 800888c:	d14e      	bne.n	800892c <_strtod_l+0x38c>
 800888e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008890:	4308      	orrs	r0, r1
 8008892:	f47f aebe 	bne.w	8008612 <_strtod_l+0x72>
 8008896:	2b00      	cmp	r3, #0
 8008898:	f47f aed6 	bne.w	8008648 <_strtod_l+0xa8>
 800889c:	2a69      	cmp	r2, #105	@ 0x69
 800889e:	d028      	beq.n	80088f2 <_strtod_l+0x352>
 80088a0:	dc25      	bgt.n	80088ee <_strtod_l+0x34e>
 80088a2:	2a49      	cmp	r2, #73	@ 0x49
 80088a4:	d025      	beq.n	80088f2 <_strtod_l+0x352>
 80088a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80088a8:	f47f aece 	bne.w	8008648 <_strtod_l+0xa8>
 80088ac:	499b      	ldr	r1, [pc, #620]	@ (8008b1c <_strtod_l+0x57c>)
 80088ae:	a819      	add	r0, sp, #100	@ 0x64
 80088b0:	f001 fb96 	bl	8009fe0 <__match>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f43f aec7 	beq.w	8008648 <_strtod_l+0xa8>
 80088ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b28      	cmp	r3, #40	@ 0x28
 80088c0:	d12e      	bne.n	8008920 <_strtod_l+0x380>
 80088c2:	4997      	ldr	r1, [pc, #604]	@ (8008b20 <_strtod_l+0x580>)
 80088c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80088c6:	a819      	add	r0, sp, #100	@ 0x64
 80088c8:	f001 fb9e 	bl	800a008 <__hexnan>
 80088cc:	2805      	cmp	r0, #5
 80088ce:	d127      	bne.n	8008920 <_strtod_l+0x380>
 80088d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80088d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80088da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80088de:	e698      	b.n	8008612 <_strtod_l+0x72>
 80088e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80088e2:	fb08 2101 	mla	r1, r8, r1, r2
 80088e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80088ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80088ec:	e7b5      	b.n	800885a <_strtod_l+0x2ba>
 80088ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80088f0:	e7da      	b.n	80088a8 <_strtod_l+0x308>
 80088f2:	498c      	ldr	r1, [pc, #560]	@ (8008b24 <_strtod_l+0x584>)
 80088f4:	a819      	add	r0, sp, #100	@ 0x64
 80088f6:	f001 fb73 	bl	8009fe0 <__match>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f aea4 	beq.w	8008648 <_strtod_l+0xa8>
 8008900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008902:	4989      	ldr	r1, [pc, #548]	@ (8008b28 <_strtod_l+0x588>)
 8008904:	3b01      	subs	r3, #1
 8008906:	a819      	add	r0, sp, #100	@ 0x64
 8008908:	9319      	str	r3, [sp, #100]	@ 0x64
 800890a:	f001 fb69 	bl	8009fe0 <__match>
 800890e:	b910      	cbnz	r0, 8008916 <_strtod_l+0x376>
 8008910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008912:	3301      	adds	r3, #1
 8008914:	9319      	str	r3, [sp, #100]	@ 0x64
 8008916:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008b38 <_strtod_l+0x598>
 800891a:	f04f 0a00 	mov.w	sl, #0
 800891e:	e678      	b.n	8008612 <_strtod_l+0x72>
 8008920:	4882      	ldr	r0, [pc, #520]	@ (8008b2c <_strtod_l+0x58c>)
 8008922:	f001 f899 	bl	8009a58 <nan>
 8008926:	ec5b ab10 	vmov	sl, fp, d0
 800892a:	e672      	b.n	8008612 <_strtod_l+0x72>
 800892c:	eba8 0309 	sub.w	r3, r8, r9
 8008930:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008932:	9309      	str	r3, [sp, #36]	@ 0x24
 8008934:	2f00      	cmp	r7, #0
 8008936:	bf08      	it	eq
 8008938:	462f      	moveq	r7, r5
 800893a:	2d10      	cmp	r5, #16
 800893c:	462c      	mov	r4, r5
 800893e:	bfa8      	it	ge
 8008940:	2410      	movge	r4, #16
 8008942:	f7f7 fdf7 	bl	8000534 <__aeabi_ui2d>
 8008946:	2d09      	cmp	r5, #9
 8008948:	4682      	mov	sl, r0
 800894a:	468b      	mov	fp, r1
 800894c:	dc13      	bgt.n	8008976 <_strtod_l+0x3d6>
 800894e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008950:	2b00      	cmp	r3, #0
 8008952:	f43f ae5e 	beq.w	8008612 <_strtod_l+0x72>
 8008956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008958:	dd78      	ble.n	8008a4c <_strtod_l+0x4ac>
 800895a:	2b16      	cmp	r3, #22
 800895c:	dc5f      	bgt.n	8008a1e <_strtod_l+0x47e>
 800895e:	4974      	ldr	r1, [pc, #464]	@ (8008b30 <_strtod_l+0x590>)
 8008960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008968:	4652      	mov	r2, sl
 800896a:	465b      	mov	r3, fp
 800896c:	f7f7 fe5c 	bl	8000628 <__aeabi_dmul>
 8008970:	4682      	mov	sl, r0
 8008972:	468b      	mov	fp, r1
 8008974:	e64d      	b.n	8008612 <_strtod_l+0x72>
 8008976:	4b6e      	ldr	r3, [pc, #440]	@ (8008b30 <_strtod_l+0x590>)
 8008978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800897c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008980:	f7f7 fe52 	bl	8000628 <__aeabi_dmul>
 8008984:	4682      	mov	sl, r0
 8008986:	9808      	ldr	r0, [sp, #32]
 8008988:	468b      	mov	fp, r1
 800898a:	f7f7 fdd3 	bl	8000534 <__aeabi_ui2d>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4650      	mov	r0, sl
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 fc91 	bl	80002bc <__adddf3>
 800899a:	2d0f      	cmp	r5, #15
 800899c:	4682      	mov	sl, r0
 800899e:	468b      	mov	fp, r1
 80089a0:	ddd5      	ble.n	800894e <_strtod_l+0x3ae>
 80089a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a4:	1b2c      	subs	r4, r5, r4
 80089a6:	441c      	add	r4, r3
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	f340 8096 	ble.w	8008ada <_strtod_l+0x53a>
 80089ae:	f014 030f 	ands.w	r3, r4, #15
 80089b2:	d00a      	beq.n	80089ca <_strtod_l+0x42a>
 80089b4:	495e      	ldr	r1, [pc, #376]	@ (8008b30 <_strtod_l+0x590>)
 80089b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c2:	f7f7 fe31 	bl	8000628 <__aeabi_dmul>
 80089c6:	4682      	mov	sl, r0
 80089c8:	468b      	mov	fp, r1
 80089ca:	f034 040f 	bics.w	r4, r4, #15
 80089ce:	d073      	beq.n	8008ab8 <_strtod_l+0x518>
 80089d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80089d4:	dd48      	ble.n	8008a68 <_strtod_l+0x4c8>
 80089d6:	2400      	movs	r4, #0
 80089d8:	46a0      	mov	r8, r4
 80089da:	940a      	str	r4, [sp, #40]	@ 0x28
 80089dc:	46a1      	mov	r9, r4
 80089de:	9a05      	ldr	r2, [sp, #20]
 80089e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008b38 <_strtod_l+0x598>
 80089e4:	2322      	movs	r3, #34	@ 0x22
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	f04f 0a00 	mov.w	sl, #0
 80089ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f43f ae0f 	beq.w	8008612 <_strtod_l+0x72>
 80089f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089f6:	9805      	ldr	r0, [sp, #20]
 80089f8:	f7ff f940 	bl	8007c7c <_Bfree>
 80089fc:	9805      	ldr	r0, [sp, #20]
 80089fe:	4649      	mov	r1, r9
 8008a00:	f7ff f93c 	bl	8007c7c <_Bfree>
 8008a04:	9805      	ldr	r0, [sp, #20]
 8008a06:	4641      	mov	r1, r8
 8008a08:	f7ff f938 	bl	8007c7c <_Bfree>
 8008a0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a0e:	9805      	ldr	r0, [sp, #20]
 8008a10:	f7ff f934 	bl	8007c7c <_Bfree>
 8008a14:	9805      	ldr	r0, [sp, #20]
 8008a16:	4621      	mov	r1, r4
 8008a18:	f7ff f930 	bl	8007c7c <_Bfree>
 8008a1c:	e5f9      	b.n	8008612 <_strtod_l+0x72>
 8008a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008a24:	4293      	cmp	r3, r2
 8008a26:	dbbc      	blt.n	80089a2 <_strtod_l+0x402>
 8008a28:	4c41      	ldr	r4, [pc, #260]	@ (8008b30 <_strtod_l+0x590>)
 8008a2a:	f1c5 050f 	rsb	r5, r5, #15
 8008a2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a32:	4652      	mov	r2, sl
 8008a34:	465b      	mov	r3, fp
 8008a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3a:	f7f7 fdf5 	bl	8000628 <__aeabi_dmul>
 8008a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a40:	1b5d      	subs	r5, r3, r5
 8008a42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a4a:	e78f      	b.n	800896c <_strtod_l+0x3cc>
 8008a4c:	3316      	adds	r3, #22
 8008a4e:	dba8      	blt.n	80089a2 <_strtod_l+0x402>
 8008a50:	4b37      	ldr	r3, [pc, #220]	@ (8008b30 <_strtod_l+0x590>)
 8008a52:	eba9 0808 	sub.w	r8, r9, r8
 8008a56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a5e:	4650      	mov	r0, sl
 8008a60:	4659      	mov	r1, fp
 8008a62:	f7f7 ff0b 	bl	800087c <__aeabi_ddiv>
 8008a66:	e783      	b.n	8008970 <_strtod_l+0x3d0>
 8008a68:	4b32      	ldr	r3, [pc, #200]	@ (8008b34 <_strtod_l+0x594>)
 8008a6a:	9308      	str	r3, [sp, #32]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	1124      	asrs	r4, r4, #4
 8008a70:	4650      	mov	r0, sl
 8008a72:	4659      	mov	r1, fp
 8008a74:	461e      	mov	r6, r3
 8008a76:	2c01      	cmp	r4, #1
 8008a78:	dc21      	bgt.n	8008abe <_strtod_l+0x51e>
 8008a7a:	b10b      	cbz	r3, 8008a80 <_strtod_l+0x4e0>
 8008a7c:	4682      	mov	sl, r0
 8008a7e:	468b      	mov	fp, r1
 8008a80:	492c      	ldr	r1, [pc, #176]	@ (8008b34 <_strtod_l+0x594>)
 8008a82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	465b      	mov	r3, fp
 8008a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a92:	f7f7 fdc9 	bl	8000628 <__aeabi_dmul>
 8008a96:	4b28      	ldr	r3, [pc, #160]	@ (8008b38 <_strtod_l+0x598>)
 8008a98:	460a      	mov	r2, r1
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	4927      	ldr	r1, [pc, #156]	@ (8008b3c <_strtod_l+0x59c>)
 8008a9e:	428b      	cmp	r3, r1
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	d898      	bhi.n	80089d6 <_strtod_l+0x436>
 8008aa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf86      	itte	hi
 8008aac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008b40 <_strtod_l+0x5a0>
 8008ab0:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ab4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9308      	str	r3, [sp, #32]
 8008abc:	e07a      	b.n	8008bb4 <_strtod_l+0x614>
 8008abe:	07e2      	lsls	r2, r4, #31
 8008ac0:	d505      	bpl.n	8008ace <_strtod_l+0x52e>
 8008ac2:	9b08      	ldr	r3, [sp, #32]
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fdae 	bl	8000628 <__aeabi_dmul>
 8008acc:	2301      	movs	r3, #1
 8008ace:	9a08      	ldr	r2, [sp, #32]
 8008ad0:	3208      	adds	r2, #8
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	1064      	asrs	r4, r4, #1
 8008ad6:	9208      	str	r2, [sp, #32]
 8008ad8:	e7cd      	b.n	8008a76 <_strtod_l+0x4d6>
 8008ada:	d0ed      	beq.n	8008ab8 <_strtod_l+0x518>
 8008adc:	4264      	negs	r4, r4
 8008ade:	f014 020f 	ands.w	r2, r4, #15
 8008ae2:	d00a      	beq.n	8008afa <_strtod_l+0x55a>
 8008ae4:	4b12      	ldr	r3, [pc, #72]	@ (8008b30 <_strtod_l+0x590>)
 8008ae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fec3 	bl	800087c <__aeabi_ddiv>
 8008af6:	4682      	mov	sl, r0
 8008af8:	468b      	mov	fp, r1
 8008afa:	1124      	asrs	r4, r4, #4
 8008afc:	d0dc      	beq.n	8008ab8 <_strtod_l+0x518>
 8008afe:	2c1f      	cmp	r4, #31
 8008b00:	dd20      	ble.n	8008b44 <_strtod_l+0x5a4>
 8008b02:	2400      	movs	r4, #0
 8008b04:	46a0      	mov	r8, r4
 8008b06:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b08:	46a1      	mov	r9, r4
 8008b0a:	9a05      	ldr	r2, [sp, #20]
 8008b0c:	2322      	movs	r3, #34	@ 0x22
 8008b0e:	f04f 0a00 	mov.w	sl, #0
 8008b12:	f04f 0b00 	mov.w	fp, #0
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	e768      	b.n	80089ec <_strtod_l+0x44c>
 8008b1a:	bf00      	nop
 8008b1c:	0800a399 	.word	0x0800a399
 8008b20:	0800a5ac 	.word	0x0800a5ac
 8008b24:	0800a391 	.word	0x0800a391
 8008b28:	0800a3c8 	.word	0x0800a3c8
 8008b2c:	0800a755 	.word	0x0800a755
 8008b30:	0800a4e0 	.word	0x0800a4e0
 8008b34:	0800a4b8 	.word	0x0800a4b8
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	7ca00000 	.word	0x7ca00000
 8008b40:	7fefffff 	.word	0x7fefffff
 8008b44:	f014 0310 	ands.w	r3, r4, #16
 8008b48:	bf18      	it	ne
 8008b4a:	236a      	movne	r3, #106	@ 0x6a
 8008b4c:	4ea9      	ldr	r6, [pc, #676]	@ (8008df4 <_strtod_l+0x854>)
 8008b4e:	9308      	str	r3, [sp, #32]
 8008b50:	4650      	mov	r0, sl
 8008b52:	4659      	mov	r1, fp
 8008b54:	2300      	movs	r3, #0
 8008b56:	07e2      	lsls	r2, r4, #31
 8008b58:	d504      	bpl.n	8008b64 <_strtod_l+0x5c4>
 8008b5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b5e:	f7f7 fd63 	bl	8000628 <__aeabi_dmul>
 8008b62:	2301      	movs	r3, #1
 8008b64:	1064      	asrs	r4, r4, #1
 8008b66:	f106 0608 	add.w	r6, r6, #8
 8008b6a:	d1f4      	bne.n	8008b56 <_strtod_l+0x5b6>
 8008b6c:	b10b      	cbz	r3, 8008b72 <_strtod_l+0x5d2>
 8008b6e:	4682      	mov	sl, r0
 8008b70:	468b      	mov	fp, r1
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	b1b3      	cbz	r3, 8008ba4 <_strtod_l+0x604>
 8008b76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	4659      	mov	r1, fp
 8008b82:	dd0f      	ble.n	8008ba4 <_strtod_l+0x604>
 8008b84:	2b1f      	cmp	r3, #31
 8008b86:	dd55      	ble.n	8008c34 <_strtod_l+0x694>
 8008b88:	2b34      	cmp	r3, #52	@ 0x34
 8008b8a:	bfde      	ittt	le
 8008b8c:	f04f 33ff 	movle.w	r3, #4294967295
 8008b90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b94:	4093      	lslle	r3, r2
 8008b96:	f04f 0a00 	mov.w	sl, #0
 8008b9a:	bfcc      	ite	gt
 8008b9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ba0:	ea03 0b01 	andle.w	fp, r3, r1
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	4650      	mov	r0, sl
 8008baa:	4659      	mov	r1, fp
 8008bac:	f7f7 ffa4 	bl	8000af8 <__aeabi_dcmpeq>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1a6      	bne.n	8008b02 <_strtod_l+0x562>
 8008bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008bba:	9805      	ldr	r0, [sp, #20]
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	f7ff f8c4 	bl	8007d4c <__s2b>
 8008bc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f af05 	beq.w	80089d6 <_strtod_l+0x436>
 8008bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	eba9 0308 	sub.w	r3, r9, r8
 8008bd4:	bfa8      	it	ge
 8008bd6:	2300      	movge	r3, #0
 8008bd8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bda:	2400      	movs	r4, #0
 8008bdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008be0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008be2:	46a0      	mov	r8, r4
 8008be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008be6:	9805      	ldr	r0, [sp, #20]
 8008be8:	6859      	ldr	r1, [r3, #4]
 8008bea:	f7ff f807 	bl	8007bfc <_Balloc>
 8008bee:	4681      	mov	r9, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f aef4 	beq.w	80089de <_strtod_l+0x43e>
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	3202      	adds	r2, #2
 8008bfc:	f103 010c 	add.w	r1, r3, #12
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	300c      	adds	r0, #12
 8008c04:	f7fe f94f 	bl	8006ea6 <memcpy>
 8008c08:	ec4b ab10 	vmov	d0, sl, fp
 8008c0c:	9805      	ldr	r0, [sp, #20]
 8008c0e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c10:	a91b      	add	r1, sp, #108	@ 0x6c
 8008c12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008c16:	f7ff fbd5 	bl	80083c4 <__d2b>
 8008c1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f43f aede 	beq.w	80089de <_strtod_l+0x43e>
 8008c22:	9805      	ldr	r0, [sp, #20]
 8008c24:	2101      	movs	r1, #1
 8008c26:	f7ff f927 	bl	8007e78 <__i2b>
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	b948      	cbnz	r0, 8008c42 <_strtod_l+0x6a2>
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	e6d4      	b.n	80089de <_strtod_l+0x43e>
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	ea03 0a0a 	and.w	sl, r3, sl
 8008c40:	e7b0      	b.n	8008ba4 <_strtod_l+0x604>
 8008c42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008c44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	bfab      	itete	ge
 8008c4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008c4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008c4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008c50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c52:	bfac      	ite	ge
 8008c54:	18ef      	addge	r7, r5, r3
 8008c56:	1b5e      	sublt	r6, r3, r5
 8008c58:	9b08      	ldr	r3, [sp, #32]
 8008c5a:	1aed      	subs	r5, r5, r3
 8008c5c:	4415      	add	r5, r2
 8008c5e:	4b66      	ldr	r3, [pc, #408]	@ (8008df8 <_strtod_l+0x858>)
 8008c60:	3d01      	subs	r5, #1
 8008c62:	429d      	cmp	r5, r3
 8008c64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c68:	da50      	bge.n	8008d0c <_strtod_l+0x76c>
 8008c6a:	1b5b      	subs	r3, r3, r5
 8008c6c:	2b1f      	cmp	r3, #31
 8008c6e:	eba2 0203 	sub.w	r2, r2, r3
 8008c72:	f04f 0101 	mov.w	r1, #1
 8008c76:	dc3d      	bgt.n	8008cf4 <_strtod_l+0x754>
 8008c78:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c7e:	2300      	movs	r3, #0
 8008c80:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c82:	18bd      	adds	r5, r7, r2
 8008c84:	9b08      	ldr	r3, [sp, #32]
 8008c86:	42af      	cmp	r7, r5
 8008c88:	4416      	add	r6, r2
 8008c8a:	441e      	add	r6, r3
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	bfa8      	it	ge
 8008c90:	462b      	movge	r3, r5
 8008c92:	42b3      	cmp	r3, r6
 8008c94:	bfa8      	it	ge
 8008c96:	4633      	movge	r3, r6
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfc2      	ittt	gt
 8008c9c:	1aed      	subgt	r5, r5, r3
 8008c9e:	1af6      	subgt	r6, r6, r3
 8008ca0:	1aff      	subgt	r7, r7, r3
 8008ca2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd16      	ble.n	8008cd6 <_strtod_l+0x736>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	9805      	ldr	r0, [sp, #20]
 8008cac:	461a      	mov	r2, r3
 8008cae:	f7ff f9a3 	bl	8007ff8 <__pow5mult>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d0ba      	beq.n	8008c2e <_strtod_l+0x68e>
 8008cb8:	4601      	mov	r1, r0
 8008cba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cbc:	9805      	ldr	r0, [sp, #20]
 8008cbe:	f7ff f8f1 	bl	8007ea4 <__multiply>
 8008cc2:	900e      	str	r0, [sp, #56]	@ 0x38
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f43f ae8a 	beq.w	80089de <_strtod_l+0x43e>
 8008cca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ccc:	9805      	ldr	r0, [sp, #20]
 8008cce:	f7fe ffd5 	bl	8007c7c <_Bfree>
 8008cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	dc1d      	bgt.n	8008d16 <_strtod_l+0x776>
 8008cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd23      	ble.n	8008d28 <_strtod_l+0x788>
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ce4:	9805      	ldr	r0, [sp, #20]
 8008ce6:	f7ff f987 	bl	8007ff8 <__pow5mult>
 8008cea:	4681      	mov	r9, r0
 8008cec:	b9e0      	cbnz	r0, 8008d28 <_strtod_l+0x788>
 8008cee:	f04f 0900 	mov.w	r9, #0
 8008cf2:	e674      	b.n	80089de <_strtod_l+0x43e>
 8008cf4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008cf8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008cfc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008d00:	35e2      	adds	r5, #226	@ 0xe2
 8008d02:	fa01 f305 	lsl.w	r3, r1, r5
 8008d06:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d08:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008d0a:	e7ba      	b.n	8008c82 <_strtod_l+0x6e2>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008d10:	2301      	movs	r3, #1
 8008d12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d14:	e7b5      	b.n	8008c82 <_strtod_l+0x6e2>
 8008d16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d18:	9805      	ldr	r0, [sp, #20]
 8008d1a:	462a      	mov	r2, r5
 8008d1c:	f7ff f9c6 	bl	80080ac <__lshift>
 8008d20:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d1d9      	bne.n	8008cda <_strtod_l+0x73a>
 8008d26:	e65a      	b.n	80089de <_strtod_l+0x43e>
 8008d28:	2e00      	cmp	r6, #0
 8008d2a:	dd07      	ble.n	8008d3c <_strtod_l+0x79c>
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	9805      	ldr	r0, [sp, #20]
 8008d30:	4632      	mov	r2, r6
 8008d32:	f7ff f9bb 	bl	80080ac <__lshift>
 8008d36:	4681      	mov	r9, r0
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d0d8      	beq.n	8008cee <_strtod_l+0x74e>
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	dd08      	ble.n	8008d52 <_strtod_l+0x7b2>
 8008d40:	4641      	mov	r1, r8
 8008d42:	9805      	ldr	r0, [sp, #20]
 8008d44:	463a      	mov	r2, r7
 8008d46:	f7ff f9b1 	bl	80080ac <__lshift>
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f ae46 	beq.w	80089de <_strtod_l+0x43e>
 8008d52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d54:	9805      	ldr	r0, [sp, #20]
 8008d56:	464a      	mov	r2, r9
 8008d58:	f7ff fa30 	bl	80081bc <__mdiff>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f ae3d 	beq.w	80089de <_strtod_l+0x43e>
 8008d64:	68c3      	ldr	r3, [r0, #12]
 8008d66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60c3      	str	r3, [r0, #12]
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	f7ff fa09 	bl	8008184 <__mcmp>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	da46      	bge.n	8008e04 <_strtod_l+0x864>
 8008d76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d78:	ea53 030a 	orrs.w	r3, r3, sl
 8008d7c:	d16c      	bne.n	8008e58 <_strtod_l+0x8b8>
 8008d7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d168      	bne.n	8008e58 <_strtod_l+0x8b8>
 8008d86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d8a:	0d1b      	lsrs	r3, r3, #20
 8008d8c:	051b      	lsls	r3, r3, #20
 8008d8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d92:	d961      	bls.n	8008e58 <_strtod_l+0x8b8>
 8008d94:	6963      	ldr	r3, [r4, #20]
 8008d96:	b913      	cbnz	r3, 8008d9e <_strtod_l+0x7fe>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	dd5c      	ble.n	8008e58 <_strtod_l+0x8b8>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	2201      	movs	r2, #1
 8008da2:	9805      	ldr	r0, [sp, #20]
 8008da4:	f7ff f982 	bl	80080ac <__lshift>
 8008da8:	4641      	mov	r1, r8
 8008daa:	4604      	mov	r4, r0
 8008dac:	f7ff f9ea 	bl	8008184 <__mcmp>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	dd51      	ble.n	8008e58 <_strtod_l+0x8b8>
 8008db4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008db8:	9a08      	ldr	r2, [sp, #32]
 8008dba:	0d1b      	lsrs	r3, r3, #20
 8008dbc:	051b      	lsls	r3, r3, #20
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d06b      	beq.n	8008e9a <_strtod_l+0x8fa>
 8008dc2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008dc6:	d868      	bhi.n	8008e9a <_strtod_l+0x8fa>
 8008dc8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008dcc:	f67f ae9d 	bls.w	8008b0a <_strtod_l+0x56a>
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <_strtod_l+0x85c>)
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	4659      	mov	r1, fp
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f7f7 fc26 	bl	8000628 <__aeabi_dmul>
 8008ddc:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <_strtod_l+0x860>)
 8008dde:	400b      	ands	r3, r1
 8008de0:	4682      	mov	sl, r0
 8008de2:	468b      	mov	fp, r1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f47f ae05 	bne.w	80089f4 <_strtod_l+0x454>
 8008dea:	9a05      	ldr	r2, [sp, #20]
 8008dec:	2322      	movs	r3, #34	@ 0x22
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	e600      	b.n	80089f4 <_strtod_l+0x454>
 8008df2:	bf00      	nop
 8008df4:	0800a5d8 	.word	0x0800a5d8
 8008df8:	fffffc02 	.word	0xfffffc02
 8008dfc:	39500000 	.word	0x39500000
 8008e00:	7ff00000 	.word	0x7ff00000
 8008e04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e08:	d165      	bne.n	8008ed6 <_strtod_l+0x936>
 8008e0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e10:	b35a      	cbz	r2, 8008e6a <_strtod_l+0x8ca>
 8008e12:	4a9f      	ldr	r2, [pc, #636]	@ (8009090 <_strtod_l+0xaf0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d12b      	bne.n	8008e70 <_strtod_l+0x8d0>
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	4651      	mov	r1, sl
 8008e1c:	b303      	cbz	r3, 8008e60 <_strtod_l+0x8c0>
 8008e1e:	4b9d      	ldr	r3, [pc, #628]	@ (8009094 <_strtod_l+0xaf4>)
 8008e20:	465a      	mov	r2, fp
 8008e22:	4013      	ands	r3, r2
 8008e24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	d81b      	bhi.n	8008e66 <_strtod_l+0x8c6>
 8008e2e:	0d1b      	lsrs	r3, r3, #20
 8008e30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e34:	fa02 f303 	lsl.w	r3, r2, r3
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	d119      	bne.n	8008e70 <_strtod_l+0x8d0>
 8008e3c:	4b96      	ldr	r3, [pc, #600]	@ (8009098 <_strtod_l+0xaf8>)
 8008e3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d102      	bne.n	8008e4a <_strtod_l+0x8aa>
 8008e44:	3101      	adds	r1, #1
 8008e46:	f43f adca 	beq.w	80089de <_strtod_l+0x43e>
 8008e4a:	4b92      	ldr	r3, [pc, #584]	@ (8009094 <_strtod_l+0xaf4>)
 8008e4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e4e:	401a      	ands	r2, r3
 8008e50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008e54:	f04f 0a00 	mov.w	sl, #0
 8008e58:	9b08      	ldr	r3, [sp, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1b8      	bne.n	8008dd0 <_strtod_l+0x830>
 8008e5e:	e5c9      	b.n	80089f4 <_strtod_l+0x454>
 8008e60:	f04f 33ff 	mov.w	r3, #4294967295
 8008e64:	e7e8      	b.n	8008e38 <_strtod_l+0x898>
 8008e66:	4613      	mov	r3, r2
 8008e68:	e7e6      	b.n	8008e38 <_strtod_l+0x898>
 8008e6a:	ea53 030a 	orrs.w	r3, r3, sl
 8008e6e:	d0a1      	beq.n	8008db4 <_strtod_l+0x814>
 8008e70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e72:	b1db      	cbz	r3, 8008eac <_strtod_l+0x90c>
 8008e74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e76:	4213      	tst	r3, r2
 8008e78:	d0ee      	beq.n	8008e58 <_strtod_l+0x8b8>
 8008e7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7c:	9a08      	ldr	r2, [sp, #32]
 8008e7e:	4650      	mov	r0, sl
 8008e80:	4659      	mov	r1, fp
 8008e82:	b1bb      	cbz	r3, 8008eb4 <_strtod_l+0x914>
 8008e84:	f7ff fb6c 	bl	8008560 <sulp>
 8008e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e8c:	ec53 2b10 	vmov	r2, r3, d0
 8008e90:	f7f7 fa14 	bl	80002bc <__adddf3>
 8008e94:	4682      	mov	sl, r0
 8008e96:	468b      	mov	fp, r1
 8008e98:	e7de      	b.n	8008e58 <_strtod_l+0x8b8>
 8008e9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ea2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008ea6:	f04f 3aff 	mov.w	sl, #4294967295
 8008eaa:	e7d5      	b.n	8008e58 <_strtod_l+0x8b8>
 8008eac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008eae:	ea13 0f0a 	tst.w	r3, sl
 8008eb2:	e7e1      	b.n	8008e78 <_strtod_l+0x8d8>
 8008eb4:	f7ff fb54 	bl	8008560 <sulp>
 8008eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ebc:	ec53 2b10 	vmov	r2, r3, d0
 8008ec0:	f7f7 f9fa 	bl	80002b8 <__aeabi_dsub>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4682      	mov	sl, r0
 8008eca:	468b      	mov	fp, r1
 8008ecc:	f7f7 fe14 	bl	8000af8 <__aeabi_dcmpeq>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d0c1      	beq.n	8008e58 <_strtod_l+0x8b8>
 8008ed4:	e619      	b.n	8008b0a <_strtod_l+0x56a>
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f7ff facb 	bl	8008474 <__ratio>
 8008ede:	ec57 6b10 	vmov	r6, r7, d0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 fe18 	bl	8000b20 <__aeabi_dcmple>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d06f      	beq.n	8008fd4 <_strtod_l+0xa34>
 8008ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d17a      	bne.n	8008ff0 <_strtod_l+0xa50>
 8008efa:	f1ba 0f00 	cmp.w	sl, #0
 8008efe:	d158      	bne.n	8008fb2 <_strtod_l+0xa12>
 8008f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d15a      	bne.n	8008fc0 <_strtod_l+0xa20>
 8008f0a:	4b64      	ldr	r3, [pc, #400]	@ (800909c <_strtod_l+0xafc>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 fdfb 	bl	8000b0c <__aeabi_dcmplt>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d159      	bne.n	8008fce <_strtod_l+0xa2e>
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4b60      	ldr	r3, [pc, #384]	@ (80090a0 <_strtod_l+0xb00>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	f7f7 fb81 	bl	8000628 <__aeabi_dmul>
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008f2e:	9606      	str	r6, [sp, #24]
 8008f30:	9307      	str	r3, [sp, #28]
 8008f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f36:	4d57      	ldr	r5, [pc, #348]	@ (8009094 <_strtod_l+0xaf4>)
 8008f38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f3e:	401d      	ands	r5, r3
 8008f40:	4b58      	ldr	r3, [pc, #352]	@ (80090a4 <_strtod_l+0xb04>)
 8008f42:	429d      	cmp	r5, r3
 8008f44:	f040 80b2 	bne.w	80090ac <_strtod_l+0xb0c>
 8008f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008f4e:	ec4b ab10 	vmov	d0, sl, fp
 8008f52:	f7ff f9c7 	bl	80082e4 <__ulp>
 8008f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f5a:	ec51 0b10 	vmov	r0, r1, d0
 8008f5e:	f7f7 fb63 	bl	8000628 <__aeabi_dmul>
 8008f62:	4652      	mov	r2, sl
 8008f64:	465b      	mov	r3, fp
 8008f66:	f7f7 f9a9 	bl	80002bc <__adddf3>
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4949      	ldr	r1, [pc, #292]	@ (8009094 <_strtod_l+0xaf4>)
 8008f6e:	4a4e      	ldr	r2, [pc, #312]	@ (80090a8 <_strtod_l+0xb08>)
 8008f70:	4019      	ands	r1, r3
 8008f72:	4291      	cmp	r1, r2
 8008f74:	4682      	mov	sl, r0
 8008f76:	d942      	bls.n	8008ffe <_strtod_l+0xa5e>
 8008f78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f7a:	4b47      	ldr	r3, [pc, #284]	@ (8009098 <_strtod_l+0xaf8>)
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d103      	bne.n	8008f88 <_strtod_l+0x9e8>
 8008f80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f82:	3301      	adds	r3, #1
 8008f84:	f43f ad2b 	beq.w	80089de <_strtod_l+0x43e>
 8008f88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009098 <_strtod_l+0xaf8>
 8008f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8008f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f92:	9805      	ldr	r0, [sp, #20]
 8008f94:	f7fe fe72 	bl	8007c7c <_Bfree>
 8008f98:	9805      	ldr	r0, [sp, #20]
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7fe fe6e 	bl	8007c7c <_Bfree>
 8008fa0:	9805      	ldr	r0, [sp, #20]
 8008fa2:	4641      	mov	r1, r8
 8008fa4:	f7fe fe6a 	bl	8007c7c <_Bfree>
 8008fa8:	9805      	ldr	r0, [sp, #20]
 8008faa:	4621      	mov	r1, r4
 8008fac:	f7fe fe66 	bl	8007c7c <_Bfree>
 8008fb0:	e618      	b.n	8008be4 <_strtod_l+0x644>
 8008fb2:	f1ba 0f01 	cmp.w	sl, #1
 8008fb6:	d103      	bne.n	8008fc0 <_strtod_l+0xa20>
 8008fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f43f ada5 	beq.w	8008b0a <_strtod_l+0x56a>
 8008fc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009070 <_strtod_l+0xad0>
 8008fc4:	4f35      	ldr	r7, [pc, #212]	@ (800909c <_strtod_l+0xafc>)
 8008fc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fca:	2600      	movs	r6, #0
 8008fcc:	e7b1      	b.n	8008f32 <_strtod_l+0x992>
 8008fce:	4f34      	ldr	r7, [pc, #208]	@ (80090a0 <_strtod_l+0xb00>)
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	e7aa      	b.n	8008f2a <_strtod_l+0x98a>
 8008fd4:	4b32      	ldr	r3, [pc, #200]	@ (80090a0 <_strtod_l+0xb00>)
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f7f7 fb24 	bl	8000628 <__aeabi_dmul>
 8008fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d09f      	beq.n	8008f2a <_strtod_l+0x98a>
 8008fea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008fee:	e7a0      	b.n	8008f32 <_strtod_l+0x992>
 8008ff0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009078 <_strtod_l+0xad8>
 8008ff4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ff8:	ec57 6b17 	vmov	r6, r7, d7
 8008ffc:	e799      	b.n	8008f32 <_strtod_l+0x992>
 8008ffe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1c1      	bne.n	8008f90 <_strtod_l+0x9f0>
 800900c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009010:	0d1b      	lsrs	r3, r3, #20
 8009012:	051b      	lsls	r3, r3, #20
 8009014:	429d      	cmp	r5, r3
 8009016:	d1bb      	bne.n	8008f90 <_strtod_l+0x9f0>
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fe64 	bl	8000ce8 <__aeabi_d2lz>
 8009020:	f7f7 fad4 	bl	80005cc <__aeabi_l2d>
 8009024:	4602      	mov	r2, r0
 8009026:	460b      	mov	r3, r1
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 f944 	bl	80002b8 <__aeabi_dsub>
 8009030:	460b      	mov	r3, r1
 8009032:	4602      	mov	r2, r0
 8009034:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009038:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800903c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800903e:	ea46 060a 	orr.w	r6, r6, sl
 8009042:	431e      	orrs	r6, r3
 8009044:	d06f      	beq.n	8009126 <_strtod_l+0xb86>
 8009046:	a30e      	add	r3, pc, #56	@ (adr r3, 8009080 <_strtod_l+0xae0>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 fd5e 	bl	8000b0c <__aeabi_dcmplt>
 8009050:	2800      	cmp	r0, #0
 8009052:	f47f accf 	bne.w	80089f4 <_strtod_l+0x454>
 8009056:	a30c      	add	r3, pc, #48	@ (adr r3, 8009088 <_strtod_l+0xae8>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009060:	f7f7 fd72 	bl	8000b48 <__aeabi_dcmpgt>
 8009064:	2800      	cmp	r0, #0
 8009066:	d093      	beq.n	8008f90 <_strtod_l+0x9f0>
 8009068:	e4c4      	b.n	80089f4 <_strtod_l+0x454>
 800906a:	bf00      	nop
 800906c:	f3af 8000 	nop.w
 8009070:	00000000 	.word	0x00000000
 8009074:	bff00000 	.word	0xbff00000
 8009078:	00000000 	.word	0x00000000
 800907c:	3ff00000 	.word	0x3ff00000
 8009080:	94a03595 	.word	0x94a03595
 8009084:	3fdfffff 	.word	0x3fdfffff
 8009088:	35afe535 	.word	0x35afe535
 800908c:	3fe00000 	.word	0x3fe00000
 8009090:	000fffff 	.word	0x000fffff
 8009094:	7ff00000 	.word	0x7ff00000
 8009098:	7fefffff 	.word	0x7fefffff
 800909c:	3ff00000 	.word	0x3ff00000
 80090a0:	3fe00000 	.word	0x3fe00000
 80090a4:	7fe00000 	.word	0x7fe00000
 80090a8:	7c9fffff 	.word	0x7c9fffff
 80090ac:	9b08      	ldr	r3, [sp, #32]
 80090ae:	b323      	cbz	r3, 80090fa <_strtod_l+0xb5a>
 80090b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80090b4:	d821      	bhi.n	80090fa <_strtod_l+0xb5a>
 80090b6:	a328      	add	r3, pc, #160	@ (adr r3, 8009158 <_strtod_l+0xbb8>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 fd2e 	bl	8000b20 <__aeabi_dcmple>
 80090c4:	b1a0      	cbz	r0, 80090f0 <_strtod_l+0xb50>
 80090c6:	4639      	mov	r1, r7
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7f7 fd85 	bl	8000bd8 <__aeabi_d2uiz>
 80090ce:	2801      	cmp	r0, #1
 80090d0:	bf38      	it	cc
 80090d2:	2001      	movcc	r0, #1
 80090d4:	f7f7 fa2e 	bl	8000534 <__aeabi_ui2d>
 80090d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090da:	4606      	mov	r6, r0
 80090dc:	460f      	mov	r7, r1
 80090de:	b9fb      	cbnz	r3, 8009120 <_strtod_l+0xb80>
 80090e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80090e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80090e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80090ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80090f6:	1b5b      	subs	r3, r3, r5
 80090f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80090fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009102:	f7ff f8ef 	bl	80082e4 <__ulp>
 8009106:	4650      	mov	r0, sl
 8009108:	ec53 2b10 	vmov	r2, r3, d0
 800910c:	4659      	mov	r1, fp
 800910e:	f7f7 fa8b 	bl	8000628 <__aeabi_dmul>
 8009112:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009116:	f7f7 f8d1 	bl	80002bc <__adddf3>
 800911a:	4682      	mov	sl, r0
 800911c:	468b      	mov	fp, r1
 800911e:	e770      	b.n	8009002 <_strtod_l+0xa62>
 8009120:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009124:	e7e0      	b.n	80090e8 <_strtod_l+0xb48>
 8009126:	a30e      	add	r3, pc, #56	@ (adr r3, 8009160 <_strtod_l+0xbc0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 fcee 	bl	8000b0c <__aeabi_dcmplt>
 8009130:	e798      	b.n	8009064 <_strtod_l+0xac4>
 8009132:	2300      	movs	r3, #0
 8009134:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009136:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	f7ff ba6d 	b.w	800861a <_strtod_l+0x7a>
 8009140:	2a65      	cmp	r2, #101	@ 0x65
 8009142:	f43f ab66 	beq.w	8008812 <_strtod_l+0x272>
 8009146:	2a45      	cmp	r2, #69	@ 0x45
 8009148:	f43f ab63 	beq.w	8008812 <_strtod_l+0x272>
 800914c:	2301      	movs	r3, #1
 800914e:	f7ff bb9e 	b.w	800888e <_strtod_l+0x2ee>
 8009152:	bf00      	nop
 8009154:	f3af 8000 	nop.w
 8009158:	ffc00000 	.word	0xffc00000
 800915c:	41dfffff 	.word	0x41dfffff
 8009160:	94a03595 	.word	0x94a03595
 8009164:	3fcfffff 	.word	0x3fcfffff

08009168 <_strtod_r>:
 8009168:	4b01      	ldr	r3, [pc, #4]	@ (8009170 <_strtod_r+0x8>)
 800916a:	f7ff ba19 	b.w	80085a0 <_strtod_l>
 800916e:	bf00      	nop
 8009170:	2000006c 	.word	0x2000006c

08009174 <_strtol_l.constprop.0>:
 8009174:	2b24      	cmp	r3, #36	@ 0x24
 8009176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917a:	4686      	mov	lr, r0
 800917c:	4690      	mov	r8, r2
 800917e:	d801      	bhi.n	8009184 <_strtol_l.constprop.0+0x10>
 8009180:	2b01      	cmp	r3, #1
 8009182:	d106      	bne.n	8009192 <_strtol_l.constprop.0+0x1e>
 8009184:	f7fd fe62 	bl	8006e4c <__errno>
 8009188:	2316      	movs	r3, #22
 800918a:	6003      	str	r3, [r0, #0]
 800918c:	2000      	movs	r0, #0
 800918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009192:	4834      	ldr	r0, [pc, #208]	@ (8009264 <_strtol_l.constprop.0+0xf0>)
 8009194:	460d      	mov	r5, r1
 8009196:	462a      	mov	r2, r5
 8009198:	f815 4b01 	ldrb.w	r4, [r5], #1
 800919c:	5d06      	ldrb	r6, [r0, r4]
 800919e:	f016 0608 	ands.w	r6, r6, #8
 80091a2:	d1f8      	bne.n	8009196 <_strtol_l.constprop.0+0x22>
 80091a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80091a6:	d12d      	bne.n	8009204 <_strtol_l.constprop.0+0x90>
 80091a8:	782c      	ldrb	r4, [r5, #0]
 80091aa:	2601      	movs	r6, #1
 80091ac:	1c95      	adds	r5, r2, #2
 80091ae:	f033 0210 	bics.w	r2, r3, #16
 80091b2:	d109      	bne.n	80091c8 <_strtol_l.constprop.0+0x54>
 80091b4:	2c30      	cmp	r4, #48	@ 0x30
 80091b6:	d12a      	bne.n	800920e <_strtol_l.constprop.0+0x9a>
 80091b8:	782a      	ldrb	r2, [r5, #0]
 80091ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091be:	2a58      	cmp	r2, #88	@ 0x58
 80091c0:	d125      	bne.n	800920e <_strtol_l.constprop.0+0x9a>
 80091c2:	786c      	ldrb	r4, [r5, #1]
 80091c4:	2310      	movs	r3, #16
 80091c6:	3502      	adds	r5, #2
 80091c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80091cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091d0:	2200      	movs	r2, #0
 80091d2:	fbbc f9f3 	udiv	r9, ip, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80091dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80091e0:	2f09      	cmp	r7, #9
 80091e2:	d81b      	bhi.n	800921c <_strtol_l.constprop.0+0xa8>
 80091e4:	463c      	mov	r4, r7
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	dd27      	ble.n	800923a <_strtol_l.constprop.0+0xc6>
 80091ea:	1c57      	adds	r7, r2, #1
 80091ec:	d007      	beq.n	80091fe <_strtol_l.constprop.0+0x8a>
 80091ee:	4581      	cmp	r9, r0
 80091f0:	d320      	bcc.n	8009234 <_strtol_l.constprop.0+0xc0>
 80091f2:	d101      	bne.n	80091f8 <_strtol_l.constprop.0+0x84>
 80091f4:	45a2      	cmp	sl, r4
 80091f6:	db1d      	blt.n	8009234 <_strtol_l.constprop.0+0xc0>
 80091f8:	fb00 4003 	mla	r0, r0, r3, r4
 80091fc:	2201      	movs	r2, #1
 80091fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009202:	e7eb      	b.n	80091dc <_strtol_l.constprop.0+0x68>
 8009204:	2c2b      	cmp	r4, #43	@ 0x2b
 8009206:	bf04      	itt	eq
 8009208:	782c      	ldrbeq	r4, [r5, #0]
 800920a:	1c95      	addeq	r5, r2, #2
 800920c:	e7cf      	b.n	80091ae <_strtol_l.constprop.0+0x3a>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1da      	bne.n	80091c8 <_strtol_l.constprop.0+0x54>
 8009212:	2c30      	cmp	r4, #48	@ 0x30
 8009214:	bf0c      	ite	eq
 8009216:	2308      	moveq	r3, #8
 8009218:	230a      	movne	r3, #10
 800921a:	e7d5      	b.n	80091c8 <_strtol_l.constprop.0+0x54>
 800921c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009220:	2f19      	cmp	r7, #25
 8009222:	d801      	bhi.n	8009228 <_strtol_l.constprop.0+0xb4>
 8009224:	3c37      	subs	r4, #55	@ 0x37
 8009226:	e7de      	b.n	80091e6 <_strtol_l.constprop.0+0x72>
 8009228:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800922c:	2f19      	cmp	r7, #25
 800922e:	d804      	bhi.n	800923a <_strtol_l.constprop.0+0xc6>
 8009230:	3c57      	subs	r4, #87	@ 0x57
 8009232:	e7d8      	b.n	80091e6 <_strtol_l.constprop.0+0x72>
 8009234:	f04f 32ff 	mov.w	r2, #4294967295
 8009238:	e7e1      	b.n	80091fe <_strtol_l.constprop.0+0x8a>
 800923a:	1c53      	adds	r3, r2, #1
 800923c:	d108      	bne.n	8009250 <_strtol_l.constprop.0+0xdc>
 800923e:	2322      	movs	r3, #34	@ 0x22
 8009240:	f8ce 3000 	str.w	r3, [lr]
 8009244:	4660      	mov	r0, ip
 8009246:	f1b8 0f00 	cmp.w	r8, #0
 800924a:	d0a0      	beq.n	800918e <_strtol_l.constprop.0+0x1a>
 800924c:	1e69      	subs	r1, r5, #1
 800924e:	e006      	b.n	800925e <_strtol_l.constprop.0+0xea>
 8009250:	b106      	cbz	r6, 8009254 <_strtol_l.constprop.0+0xe0>
 8009252:	4240      	negs	r0, r0
 8009254:	f1b8 0f00 	cmp.w	r8, #0
 8009258:	d099      	beq.n	800918e <_strtol_l.constprop.0+0x1a>
 800925a:	2a00      	cmp	r2, #0
 800925c:	d1f6      	bne.n	800924c <_strtol_l.constprop.0+0xd8>
 800925e:	f8c8 1000 	str.w	r1, [r8]
 8009262:	e794      	b.n	800918e <_strtol_l.constprop.0+0x1a>
 8009264:	0800a601 	.word	0x0800a601

08009268 <_strtol_r>:
 8009268:	f7ff bf84 	b.w	8009174 <_strtol_l.constprop.0>

0800926c <__ssputs_r>:
 800926c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009270:	688e      	ldr	r6, [r1, #8]
 8009272:	461f      	mov	r7, r3
 8009274:	42be      	cmp	r6, r7
 8009276:	680b      	ldr	r3, [r1, #0]
 8009278:	4682      	mov	sl, r0
 800927a:	460c      	mov	r4, r1
 800927c:	4690      	mov	r8, r2
 800927e:	d82d      	bhi.n	80092dc <__ssputs_r+0x70>
 8009280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009288:	d026      	beq.n	80092d8 <__ssputs_r+0x6c>
 800928a:	6965      	ldr	r5, [r4, #20]
 800928c:	6909      	ldr	r1, [r1, #16]
 800928e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009292:	eba3 0901 	sub.w	r9, r3, r1
 8009296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800929a:	1c7b      	adds	r3, r7, #1
 800929c:	444b      	add	r3, r9
 800929e:	106d      	asrs	r5, r5, #1
 80092a0:	429d      	cmp	r5, r3
 80092a2:	bf38      	it	cc
 80092a4:	461d      	movcc	r5, r3
 80092a6:	0553      	lsls	r3, r2, #21
 80092a8:	d527      	bpl.n	80092fa <__ssputs_r+0x8e>
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7fc fc4a 	bl	8005b44 <_malloc_r>
 80092b0:	4606      	mov	r6, r0
 80092b2:	b360      	cbz	r0, 800930e <__ssputs_r+0xa2>
 80092b4:	6921      	ldr	r1, [r4, #16]
 80092b6:	464a      	mov	r2, r9
 80092b8:	f7fd fdf5 	bl	8006ea6 <memcpy>
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	6126      	str	r6, [r4, #16]
 80092ca:	6165      	str	r5, [r4, #20]
 80092cc:	444e      	add	r6, r9
 80092ce:	eba5 0509 	sub.w	r5, r5, r9
 80092d2:	6026      	str	r6, [r4, #0]
 80092d4:	60a5      	str	r5, [r4, #8]
 80092d6:	463e      	mov	r6, r7
 80092d8:	42be      	cmp	r6, r7
 80092da:	d900      	bls.n	80092de <__ssputs_r+0x72>
 80092dc:	463e      	mov	r6, r7
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	4632      	mov	r2, r6
 80092e2:	4641      	mov	r1, r8
 80092e4:	f000 fb6a 	bl	80099bc <memmove>
 80092e8:	68a3      	ldr	r3, [r4, #8]
 80092ea:	1b9b      	subs	r3, r3, r6
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	4433      	add	r3, r6
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	2000      	movs	r0, #0
 80092f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fa:	462a      	mov	r2, r5
 80092fc:	f000 ff31 	bl	800a162 <_realloc_r>
 8009300:	4606      	mov	r6, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	d1e0      	bne.n	80092c8 <__ssputs_r+0x5c>
 8009306:	6921      	ldr	r1, [r4, #16]
 8009308:	4650      	mov	r0, sl
 800930a:	f7fe fc2d 	bl	8007b68 <_free_r>
 800930e:	230c      	movs	r3, #12
 8009310:	f8ca 3000 	str.w	r3, [sl]
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e7e9      	b.n	80092f6 <__ssputs_r+0x8a>
	...

08009324 <_svfiprintf_r>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	4698      	mov	r8, r3
 800932a:	898b      	ldrh	r3, [r1, #12]
 800932c:	061b      	lsls	r3, r3, #24
 800932e:	b09d      	sub	sp, #116	@ 0x74
 8009330:	4607      	mov	r7, r0
 8009332:	460d      	mov	r5, r1
 8009334:	4614      	mov	r4, r2
 8009336:	d510      	bpl.n	800935a <_svfiprintf_r+0x36>
 8009338:	690b      	ldr	r3, [r1, #16]
 800933a:	b973      	cbnz	r3, 800935a <_svfiprintf_r+0x36>
 800933c:	2140      	movs	r1, #64	@ 0x40
 800933e:	f7fc fc01 	bl	8005b44 <_malloc_r>
 8009342:	6028      	str	r0, [r5, #0]
 8009344:	6128      	str	r0, [r5, #16]
 8009346:	b930      	cbnz	r0, 8009356 <_svfiprintf_r+0x32>
 8009348:	230c      	movs	r3, #12
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	b01d      	add	sp, #116	@ 0x74
 8009352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009356:	2340      	movs	r3, #64	@ 0x40
 8009358:	616b      	str	r3, [r5, #20]
 800935a:	2300      	movs	r3, #0
 800935c:	9309      	str	r3, [sp, #36]	@ 0x24
 800935e:	2320      	movs	r3, #32
 8009360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009364:	f8cd 800c 	str.w	r8, [sp, #12]
 8009368:	2330      	movs	r3, #48	@ 0x30
 800936a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009508 <_svfiprintf_r+0x1e4>
 800936e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009372:	f04f 0901 	mov.w	r9, #1
 8009376:	4623      	mov	r3, r4
 8009378:	469a      	mov	sl, r3
 800937a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800937e:	b10a      	cbz	r2, 8009384 <_svfiprintf_r+0x60>
 8009380:	2a25      	cmp	r2, #37	@ 0x25
 8009382:	d1f9      	bne.n	8009378 <_svfiprintf_r+0x54>
 8009384:	ebba 0b04 	subs.w	fp, sl, r4
 8009388:	d00b      	beq.n	80093a2 <_svfiprintf_r+0x7e>
 800938a:	465b      	mov	r3, fp
 800938c:	4622      	mov	r2, r4
 800938e:	4629      	mov	r1, r5
 8009390:	4638      	mov	r0, r7
 8009392:	f7ff ff6b 	bl	800926c <__ssputs_r>
 8009396:	3001      	adds	r0, #1
 8009398:	f000 80a7 	beq.w	80094ea <_svfiprintf_r+0x1c6>
 800939c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800939e:	445a      	add	r2, fp
 80093a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80093a2:	f89a 3000 	ldrb.w	r3, [sl]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 809f 	beq.w	80094ea <_svfiprintf_r+0x1c6>
 80093ac:	2300      	movs	r3, #0
 80093ae:	f04f 32ff 	mov.w	r2, #4294967295
 80093b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093b6:	f10a 0a01 	add.w	sl, sl, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	9307      	str	r3, [sp, #28]
 80093be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80093c4:	4654      	mov	r4, sl
 80093c6:	2205      	movs	r2, #5
 80093c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093cc:	484e      	ldr	r0, [pc, #312]	@ (8009508 <_svfiprintf_r+0x1e4>)
 80093ce:	f7f6 ff17 	bl	8000200 <memchr>
 80093d2:	9a04      	ldr	r2, [sp, #16]
 80093d4:	b9d8      	cbnz	r0, 800940e <_svfiprintf_r+0xea>
 80093d6:	06d0      	lsls	r0, r2, #27
 80093d8:	bf44      	itt	mi
 80093da:	2320      	movmi	r3, #32
 80093dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093e0:	0711      	lsls	r1, r2, #28
 80093e2:	bf44      	itt	mi
 80093e4:	232b      	movmi	r3, #43	@ 0x2b
 80093e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093ea:	f89a 3000 	ldrb.w	r3, [sl]
 80093ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80093f0:	d015      	beq.n	800941e <_svfiprintf_r+0xfa>
 80093f2:	9a07      	ldr	r2, [sp, #28]
 80093f4:	4654      	mov	r4, sl
 80093f6:	2000      	movs	r0, #0
 80093f8:	f04f 0c0a 	mov.w	ip, #10
 80093fc:	4621      	mov	r1, r4
 80093fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009402:	3b30      	subs	r3, #48	@ 0x30
 8009404:	2b09      	cmp	r3, #9
 8009406:	d94b      	bls.n	80094a0 <_svfiprintf_r+0x17c>
 8009408:	b1b0      	cbz	r0, 8009438 <_svfiprintf_r+0x114>
 800940a:	9207      	str	r2, [sp, #28]
 800940c:	e014      	b.n	8009438 <_svfiprintf_r+0x114>
 800940e:	eba0 0308 	sub.w	r3, r0, r8
 8009412:	fa09 f303 	lsl.w	r3, r9, r3
 8009416:	4313      	orrs	r3, r2
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	46a2      	mov	sl, r4
 800941c:	e7d2      	b.n	80093c4 <_svfiprintf_r+0xa0>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	1d19      	adds	r1, r3, #4
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	9103      	str	r1, [sp, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfbb      	ittet	lt
 800942a:	425b      	neglt	r3, r3
 800942c:	f042 0202 	orrlt.w	r2, r2, #2
 8009430:	9307      	strge	r3, [sp, #28]
 8009432:	9307      	strlt	r3, [sp, #28]
 8009434:	bfb8      	it	lt
 8009436:	9204      	strlt	r2, [sp, #16]
 8009438:	7823      	ldrb	r3, [r4, #0]
 800943a:	2b2e      	cmp	r3, #46	@ 0x2e
 800943c:	d10a      	bne.n	8009454 <_svfiprintf_r+0x130>
 800943e:	7863      	ldrb	r3, [r4, #1]
 8009440:	2b2a      	cmp	r3, #42	@ 0x2a
 8009442:	d132      	bne.n	80094aa <_svfiprintf_r+0x186>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	1d1a      	adds	r2, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	9203      	str	r2, [sp, #12]
 800944c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009450:	3402      	adds	r4, #2
 8009452:	9305      	str	r3, [sp, #20]
 8009454:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009518 <_svfiprintf_r+0x1f4>
 8009458:	7821      	ldrb	r1, [r4, #0]
 800945a:	2203      	movs	r2, #3
 800945c:	4650      	mov	r0, sl
 800945e:	f7f6 fecf 	bl	8000200 <memchr>
 8009462:	b138      	cbz	r0, 8009474 <_svfiprintf_r+0x150>
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	eba0 000a 	sub.w	r0, r0, sl
 800946a:	2240      	movs	r2, #64	@ 0x40
 800946c:	4082      	lsls	r2, r0
 800946e:	4313      	orrs	r3, r2
 8009470:	3401      	adds	r4, #1
 8009472:	9304      	str	r3, [sp, #16]
 8009474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009478:	4824      	ldr	r0, [pc, #144]	@ (800950c <_svfiprintf_r+0x1e8>)
 800947a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800947e:	2206      	movs	r2, #6
 8009480:	f7f6 febe 	bl	8000200 <memchr>
 8009484:	2800      	cmp	r0, #0
 8009486:	d036      	beq.n	80094f6 <_svfiprintf_r+0x1d2>
 8009488:	4b21      	ldr	r3, [pc, #132]	@ (8009510 <_svfiprintf_r+0x1ec>)
 800948a:	bb1b      	cbnz	r3, 80094d4 <_svfiprintf_r+0x1b0>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	3307      	adds	r3, #7
 8009490:	f023 0307 	bic.w	r3, r3, #7
 8009494:	3308      	adds	r3, #8
 8009496:	9303      	str	r3, [sp, #12]
 8009498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949a:	4433      	add	r3, r6
 800949c:	9309      	str	r3, [sp, #36]	@ 0x24
 800949e:	e76a      	b.n	8009376 <_svfiprintf_r+0x52>
 80094a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80094a4:	460c      	mov	r4, r1
 80094a6:	2001      	movs	r0, #1
 80094a8:	e7a8      	b.n	80093fc <_svfiprintf_r+0xd8>
 80094aa:	2300      	movs	r3, #0
 80094ac:	3401      	adds	r4, #1
 80094ae:	9305      	str	r3, [sp, #20]
 80094b0:	4619      	mov	r1, r3
 80094b2:	f04f 0c0a 	mov.w	ip, #10
 80094b6:	4620      	mov	r0, r4
 80094b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094bc:	3a30      	subs	r2, #48	@ 0x30
 80094be:	2a09      	cmp	r2, #9
 80094c0:	d903      	bls.n	80094ca <_svfiprintf_r+0x1a6>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0c6      	beq.n	8009454 <_svfiprintf_r+0x130>
 80094c6:	9105      	str	r1, [sp, #20]
 80094c8:	e7c4      	b.n	8009454 <_svfiprintf_r+0x130>
 80094ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ce:	4604      	mov	r4, r0
 80094d0:	2301      	movs	r3, #1
 80094d2:	e7f0      	b.n	80094b6 <_svfiprintf_r+0x192>
 80094d4:	ab03      	add	r3, sp, #12
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	462a      	mov	r2, r5
 80094da:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <_svfiprintf_r+0x1f0>)
 80094dc:	a904      	add	r1, sp, #16
 80094de:	4638      	mov	r0, r7
 80094e0:	f7fc fc5c 	bl	8005d9c <_printf_float>
 80094e4:	1c42      	adds	r2, r0, #1
 80094e6:	4606      	mov	r6, r0
 80094e8:	d1d6      	bne.n	8009498 <_svfiprintf_r+0x174>
 80094ea:	89ab      	ldrh	r3, [r5, #12]
 80094ec:	065b      	lsls	r3, r3, #25
 80094ee:	f53f af2d 	bmi.w	800934c <_svfiprintf_r+0x28>
 80094f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094f4:	e72c      	b.n	8009350 <_svfiprintf_r+0x2c>
 80094f6:	ab03      	add	r3, sp, #12
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	462a      	mov	r2, r5
 80094fc:	4b05      	ldr	r3, [pc, #20]	@ (8009514 <_svfiprintf_r+0x1f0>)
 80094fe:	a904      	add	r1, sp, #16
 8009500:	4638      	mov	r0, r7
 8009502:	f7fc fee3 	bl	80062cc <_printf_i>
 8009506:	e7ed      	b.n	80094e4 <_svfiprintf_r+0x1c0>
 8009508:	0800a701 	.word	0x0800a701
 800950c:	0800a70b 	.word	0x0800a70b
 8009510:	08005d9d 	.word	0x08005d9d
 8009514:	0800926d 	.word	0x0800926d
 8009518:	0800a707 	.word	0x0800a707

0800951c <__sfputc_r>:
 800951c:	6893      	ldr	r3, [r2, #8]
 800951e:	3b01      	subs	r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	b410      	push	{r4}
 8009524:	6093      	str	r3, [r2, #8]
 8009526:	da08      	bge.n	800953a <__sfputc_r+0x1e>
 8009528:	6994      	ldr	r4, [r2, #24]
 800952a:	42a3      	cmp	r3, r4
 800952c:	db01      	blt.n	8009532 <__sfputc_r+0x16>
 800952e:	290a      	cmp	r1, #10
 8009530:	d103      	bne.n	800953a <__sfputc_r+0x1e>
 8009532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009536:	f7fd bb92 	b.w	8006c5e <__swbuf_r>
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	1c58      	adds	r0, r3, #1
 800953e:	6010      	str	r0, [r2, #0]
 8009540:	7019      	strb	r1, [r3, #0]
 8009542:	4608      	mov	r0, r1
 8009544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009548:	4770      	bx	lr

0800954a <__sfputs_r>:
 800954a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954c:	4606      	mov	r6, r0
 800954e:	460f      	mov	r7, r1
 8009550:	4614      	mov	r4, r2
 8009552:	18d5      	adds	r5, r2, r3
 8009554:	42ac      	cmp	r4, r5
 8009556:	d101      	bne.n	800955c <__sfputs_r+0x12>
 8009558:	2000      	movs	r0, #0
 800955a:	e007      	b.n	800956c <__sfputs_r+0x22>
 800955c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009560:	463a      	mov	r2, r7
 8009562:	4630      	mov	r0, r6
 8009564:	f7ff ffda 	bl	800951c <__sfputc_r>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d1f3      	bne.n	8009554 <__sfputs_r+0xa>
 800956c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009570 <_vfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	460d      	mov	r5, r1
 8009576:	b09d      	sub	sp, #116	@ 0x74
 8009578:	4614      	mov	r4, r2
 800957a:	4698      	mov	r8, r3
 800957c:	4606      	mov	r6, r0
 800957e:	b118      	cbz	r0, 8009588 <_vfiprintf_r+0x18>
 8009580:	6a03      	ldr	r3, [r0, #32]
 8009582:	b90b      	cbnz	r3, 8009588 <_vfiprintf_r+0x18>
 8009584:	f7fd fa62 	bl	8006a4c <__sinit>
 8009588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800958a:	07d9      	lsls	r1, r3, #31
 800958c:	d405      	bmi.n	800959a <_vfiprintf_r+0x2a>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	059a      	lsls	r2, r3, #22
 8009592:	d402      	bmi.n	800959a <_vfiprintf_r+0x2a>
 8009594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009596:	f7fd fc84 	bl	8006ea2 <__retarget_lock_acquire_recursive>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	071b      	lsls	r3, r3, #28
 800959e:	d501      	bpl.n	80095a4 <_vfiprintf_r+0x34>
 80095a0:	692b      	ldr	r3, [r5, #16]
 80095a2:	b99b      	cbnz	r3, 80095cc <_vfiprintf_r+0x5c>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4630      	mov	r0, r6
 80095a8:	f7fd fb98 	bl	8006cdc <__swsetup_r>
 80095ac:	b170      	cbz	r0, 80095cc <_vfiprintf_r+0x5c>
 80095ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095b0:	07dc      	lsls	r4, r3, #31
 80095b2:	d504      	bpl.n	80095be <_vfiprintf_r+0x4e>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	b01d      	add	sp, #116	@ 0x74
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	0598      	lsls	r0, r3, #22
 80095c2:	d4f7      	bmi.n	80095b4 <_vfiprintf_r+0x44>
 80095c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095c6:	f7fd fc6d 	bl	8006ea4 <__retarget_lock_release_recursive>
 80095ca:	e7f3      	b.n	80095b4 <_vfiprintf_r+0x44>
 80095cc:	2300      	movs	r3, #0
 80095ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d0:	2320      	movs	r3, #32
 80095d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095da:	2330      	movs	r3, #48	@ 0x30
 80095dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800978c <_vfiprintf_r+0x21c>
 80095e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095e4:	f04f 0901 	mov.w	r9, #1
 80095e8:	4623      	mov	r3, r4
 80095ea:	469a      	mov	sl, r3
 80095ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f0:	b10a      	cbz	r2, 80095f6 <_vfiprintf_r+0x86>
 80095f2:	2a25      	cmp	r2, #37	@ 0x25
 80095f4:	d1f9      	bne.n	80095ea <_vfiprintf_r+0x7a>
 80095f6:	ebba 0b04 	subs.w	fp, sl, r4
 80095fa:	d00b      	beq.n	8009614 <_vfiprintf_r+0xa4>
 80095fc:	465b      	mov	r3, fp
 80095fe:	4622      	mov	r2, r4
 8009600:	4629      	mov	r1, r5
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ffa1 	bl	800954a <__sfputs_r>
 8009608:	3001      	adds	r0, #1
 800960a:	f000 80a7 	beq.w	800975c <_vfiprintf_r+0x1ec>
 800960e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009610:	445a      	add	r2, fp
 8009612:	9209      	str	r2, [sp, #36]	@ 0x24
 8009614:	f89a 3000 	ldrb.w	r3, [sl]
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 809f 	beq.w	800975c <_vfiprintf_r+0x1ec>
 800961e:	2300      	movs	r3, #0
 8009620:	f04f 32ff 	mov.w	r2, #4294967295
 8009624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009628:	f10a 0a01 	add.w	sl, sl, #1
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	9307      	str	r3, [sp, #28]
 8009630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009634:	931a      	str	r3, [sp, #104]	@ 0x68
 8009636:	4654      	mov	r4, sl
 8009638:	2205      	movs	r2, #5
 800963a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963e:	4853      	ldr	r0, [pc, #332]	@ (800978c <_vfiprintf_r+0x21c>)
 8009640:	f7f6 fdde 	bl	8000200 <memchr>
 8009644:	9a04      	ldr	r2, [sp, #16]
 8009646:	b9d8      	cbnz	r0, 8009680 <_vfiprintf_r+0x110>
 8009648:	06d1      	lsls	r1, r2, #27
 800964a:	bf44      	itt	mi
 800964c:	2320      	movmi	r3, #32
 800964e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009652:	0713      	lsls	r3, r2, #28
 8009654:	bf44      	itt	mi
 8009656:	232b      	movmi	r3, #43	@ 0x2b
 8009658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800965c:	f89a 3000 	ldrb.w	r3, [sl]
 8009660:	2b2a      	cmp	r3, #42	@ 0x2a
 8009662:	d015      	beq.n	8009690 <_vfiprintf_r+0x120>
 8009664:	9a07      	ldr	r2, [sp, #28]
 8009666:	4654      	mov	r4, sl
 8009668:	2000      	movs	r0, #0
 800966a:	f04f 0c0a 	mov.w	ip, #10
 800966e:	4621      	mov	r1, r4
 8009670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009674:	3b30      	subs	r3, #48	@ 0x30
 8009676:	2b09      	cmp	r3, #9
 8009678:	d94b      	bls.n	8009712 <_vfiprintf_r+0x1a2>
 800967a:	b1b0      	cbz	r0, 80096aa <_vfiprintf_r+0x13a>
 800967c:	9207      	str	r2, [sp, #28]
 800967e:	e014      	b.n	80096aa <_vfiprintf_r+0x13a>
 8009680:	eba0 0308 	sub.w	r3, r0, r8
 8009684:	fa09 f303 	lsl.w	r3, r9, r3
 8009688:	4313      	orrs	r3, r2
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	46a2      	mov	sl, r4
 800968e:	e7d2      	b.n	8009636 <_vfiprintf_r+0xc6>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	1d19      	adds	r1, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	9103      	str	r1, [sp, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	bfbb      	ittet	lt
 800969c:	425b      	neglt	r3, r3
 800969e:	f042 0202 	orrlt.w	r2, r2, #2
 80096a2:	9307      	strge	r3, [sp, #28]
 80096a4:	9307      	strlt	r3, [sp, #28]
 80096a6:	bfb8      	it	lt
 80096a8:	9204      	strlt	r2, [sp, #16]
 80096aa:	7823      	ldrb	r3, [r4, #0]
 80096ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ae:	d10a      	bne.n	80096c6 <_vfiprintf_r+0x156>
 80096b0:	7863      	ldrb	r3, [r4, #1]
 80096b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b4:	d132      	bne.n	800971c <_vfiprintf_r+0x1ac>
 80096b6:	9b03      	ldr	r3, [sp, #12]
 80096b8:	1d1a      	adds	r2, r3, #4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	9203      	str	r2, [sp, #12]
 80096be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096c2:	3402      	adds	r4, #2
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800979c <_vfiprintf_r+0x22c>
 80096ca:	7821      	ldrb	r1, [r4, #0]
 80096cc:	2203      	movs	r2, #3
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7f6 fd96 	bl	8000200 <memchr>
 80096d4:	b138      	cbz	r0, 80096e6 <_vfiprintf_r+0x176>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	eba0 000a 	sub.w	r0, r0, sl
 80096dc:	2240      	movs	r2, #64	@ 0x40
 80096de:	4082      	lsls	r2, r0
 80096e0:	4313      	orrs	r3, r2
 80096e2:	3401      	adds	r4, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4829      	ldr	r0, [pc, #164]	@ (8009790 <_vfiprintf_r+0x220>)
 80096ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f0:	2206      	movs	r2, #6
 80096f2:	f7f6 fd85 	bl	8000200 <memchr>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d03f      	beq.n	800977a <_vfiprintf_r+0x20a>
 80096fa:	4b26      	ldr	r3, [pc, #152]	@ (8009794 <_vfiprintf_r+0x224>)
 80096fc:	bb1b      	cbnz	r3, 8009746 <_vfiprintf_r+0x1d6>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	3308      	adds	r3, #8
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970c:	443b      	add	r3, r7
 800970e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009710:	e76a      	b.n	80095e8 <_vfiprintf_r+0x78>
 8009712:	fb0c 3202 	mla	r2, ip, r2, r3
 8009716:	460c      	mov	r4, r1
 8009718:	2001      	movs	r0, #1
 800971a:	e7a8      	b.n	800966e <_vfiprintf_r+0xfe>
 800971c:	2300      	movs	r3, #0
 800971e:	3401      	adds	r4, #1
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	4619      	mov	r1, r3
 8009724:	f04f 0c0a 	mov.w	ip, #10
 8009728:	4620      	mov	r0, r4
 800972a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800972e:	3a30      	subs	r2, #48	@ 0x30
 8009730:	2a09      	cmp	r2, #9
 8009732:	d903      	bls.n	800973c <_vfiprintf_r+0x1cc>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0c6      	beq.n	80096c6 <_vfiprintf_r+0x156>
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	e7c4      	b.n	80096c6 <_vfiprintf_r+0x156>
 800973c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009740:	4604      	mov	r4, r0
 8009742:	2301      	movs	r3, #1
 8009744:	e7f0      	b.n	8009728 <_vfiprintf_r+0x1b8>
 8009746:	ab03      	add	r3, sp, #12
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	462a      	mov	r2, r5
 800974c:	4b12      	ldr	r3, [pc, #72]	@ (8009798 <_vfiprintf_r+0x228>)
 800974e:	a904      	add	r1, sp, #16
 8009750:	4630      	mov	r0, r6
 8009752:	f7fc fb23 	bl	8005d9c <_printf_float>
 8009756:	4607      	mov	r7, r0
 8009758:	1c78      	adds	r0, r7, #1
 800975a:	d1d6      	bne.n	800970a <_vfiprintf_r+0x19a>
 800975c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d405      	bmi.n	800976e <_vfiprintf_r+0x1fe>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	059a      	lsls	r2, r3, #22
 8009766:	d402      	bmi.n	800976e <_vfiprintf_r+0x1fe>
 8009768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800976a:	f7fd fb9b 	bl	8006ea4 <__retarget_lock_release_recursive>
 800976e:	89ab      	ldrh	r3, [r5, #12]
 8009770:	065b      	lsls	r3, r3, #25
 8009772:	f53f af1f 	bmi.w	80095b4 <_vfiprintf_r+0x44>
 8009776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009778:	e71e      	b.n	80095b8 <_vfiprintf_r+0x48>
 800977a:	ab03      	add	r3, sp, #12
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	462a      	mov	r2, r5
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <_vfiprintf_r+0x228>)
 8009782:	a904      	add	r1, sp, #16
 8009784:	4630      	mov	r0, r6
 8009786:	f7fc fda1 	bl	80062cc <_printf_i>
 800978a:	e7e4      	b.n	8009756 <_vfiprintf_r+0x1e6>
 800978c:	0800a701 	.word	0x0800a701
 8009790:	0800a70b 	.word	0x0800a70b
 8009794:	08005d9d 	.word	0x08005d9d
 8009798:	0800954b 	.word	0x0800954b
 800979c:	0800a707 	.word	0x0800a707

080097a0 <__sflush_r>:
 80097a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	0716      	lsls	r6, r2, #28
 80097aa:	4605      	mov	r5, r0
 80097ac:	460c      	mov	r4, r1
 80097ae:	d454      	bmi.n	800985a <__sflush_r+0xba>
 80097b0:	684b      	ldr	r3, [r1, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dc02      	bgt.n	80097bc <__sflush_r+0x1c>
 80097b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dd48      	ble.n	800984e <__sflush_r+0xae>
 80097bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097be:	2e00      	cmp	r6, #0
 80097c0:	d045      	beq.n	800984e <__sflush_r+0xae>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097c8:	682f      	ldr	r7, [r5, #0]
 80097ca:	6a21      	ldr	r1, [r4, #32]
 80097cc:	602b      	str	r3, [r5, #0]
 80097ce:	d030      	beq.n	8009832 <__sflush_r+0x92>
 80097d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	0759      	lsls	r1, r3, #29
 80097d6:	d505      	bpl.n	80097e4 <__sflush_r+0x44>
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	1ad2      	subs	r2, r2, r3
 80097dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097de:	b10b      	cbz	r3, 80097e4 <__sflush_r+0x44>
 80097e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097e2:	1ad2      	subs	r2, r2, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097e8:	6a21      	ldr	r1, [r4, #32]
 80097ea:	4628      	mov	r0, r5
 80097ec:	47b0      	blx	r6
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	d106      	bne.n	8009802 <__sflush_r+0x62>
 80097f4:	6829      	ldr	r1, [r5, #0]
 80097f6:	291d      	cmp	r1, #29
 80097f8:	d82b      	bhi.n	8009852 <__sflush_r+0xb2>
 80097fa:	4a2a      	ldr	r2, [pc, #168]	@ (80098a4 <__sflush_r+0x104>)
 80097fc:	410a      	asrs	r2, r1
 80097fe:	07d6      	lsls	r6, r2, #31
 8009800:	d427      	bmi.n	8009852 <__sflush_r+0xb2>
 8009802:	2200      	movs	r2, #0
 8009804:	6062      	str	r2, [r4, #4]
 8009806:	04d9      	lsls	r1, r3, #19
 8009808:	6922      	ldr	r2, [r4, #16]
 800980a:	6022      	str	r2, [r4, #0]
 800980c:	d504      	bpl.n	8009818 <__sflush_r+0x78>
 800980e:	1c42      	adds	r2, r0, #1
 8009810:	d101      	bne.n	8009816 <__sflush_r+0x76>
 8009812:	682b      	ldr	r3, [r5, #0]
 8009814:	b903      	cbnz	r3, 8009818 <__sflush_r+0x78>
 8009816:	6560      	str	r0, [r4, #84]	@ 0x54
 8009818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800981a:	602f      	str	r7, [r5, #0]
 800981c:	b1b9      	cbz	r1, 800984e <__sflush_r+0xae>
 800981e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009822:	4299      	cmp	r1, r3
 8009824:	d002      	beq.n	800982c <__sflush_r+0x8c>
 8009826:	4628      	mov	r0, r5
 8009828:	f7fe f99e 	bl	8007b68 <_free_r>
 800982c:	2300      	movs	r3, #0
 800982e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009830:	e00d      	b.n	800984e <__sflush_r+0xae>
 8009832:	2301      	movs	r3, #1
 8009834:	4628      	mov	r0, r5
 8009836:	47b0      	blx	r6
 8009838:	4602      	mov	r2, r0
 800983a:	1c50      	adds	r0, r2, #1
 800983c:	d1c9      	bne.n	80097d2 <__sflush_r+0x32>
 800983e:	682b      	ldr	r3, [r5, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0c6      	beq.n	80097d2 <__sflush_r+0x32>
 8009844:	2b1d      	cmp	r3, #29
 8009846:	d001      	beq.n	800984c <__sflush_r+0xac>
 8009848:	2b16      	cmp	r3, #22
 800984a:	d11e      	bne.n	800988a <__sflush_r+0xea>
 800984c:	602f      	str	r7, [r5, #0]
 800984e:	2000      	movs	r0, #0
 8009850:	e022      	b.n	8009898 <__sflush_r+0xf8>
 8009852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009856:	b21b      	sxth	r3, r3
 8009858:	e01b      	b.n	8009892 <__sflush_r+0xf2>
 800985a:	690f      	ldr	r7, [r1, #16]
 800985c:	2f00      	cmp	r7, #0
 800985e:	d0f6      	beq.n	800984e <__sflush_r+0xae>
 8009860:	0793      	lsls	r3, r2, #30
 8009862:	680e      	ldr	r6, [r1, #0]
 8009864:	bf08      	it	eq
 8009866:	694b      	ldreq	r3, [r1, #20]
 8009868:	600f      	str	r7, [r1, #0]
 800986a:	bf18      	it	ne
 800986c:	2300      	movne	r3, #0
 800986e:	eba6 0807 	sub.w	r8, r6, r7
 8009872:	608b      	str	r3, [r1, #8]
 8009874:	f1b8 0f00 	cmp.w	r8, #0
 8009878:	dde9      	ble.n	800984e <__sflush_r+0xae>
 800987a:	6a21      	ldr	r1, [r4, #32]
 800987c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800987e:	4643      	mov	r3, r8
 8009880:	463a      	mov	r2, r7
 8009882:	4628      	mov	r0, r5
 8009884:	47b0      	blx	r6
 8009886:	2800      	cmp	r0, #0
 8009888:	dc08      	bgt.n	800989c <__sflush_r+0xfc>
 800988a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	4407      	add	r7, r0
 800989e:	eba8 0800 	sub.w	r8, r8, r0
 80098a2:	e7e7      	b.n	8009874 <__sflush_r+0xd4>
 80098a4:	dfbffffe 	.word	0xdfbffffe

080098a8 <_fflush_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	690b      	ldr	r3, [r1, #16]
 80098ac:	4605      	mov	r5, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	b913      	cbnz	r3, 80098b8 <_fflush_r+0x10>
 80098b2:	2500      	movs	r5, #0
 80098b4:	4628      	mov	r0, r5
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	b118      	cbz	r0, 80098c2 <_fflush_r+0x1a>
 80098ba:	6a03      	ldr	r3, [r0, #32]
 80098bc:	b90b      	cbnz	r3, 80098c2 <_fflush_r+0x1a>
 80098be:	f7fd f8c5 	bl	8006a4c <__sinit>
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f3      	beq.n	80098b2 <_fflush_r+0xa>
 80098ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098cc:	07d0      	lsls	r0, r2, #31
 80098ce:	d404      	bmi.n	80098da <_fflush_r+0x32>
 80098d0:	0599      	lsls	r1, r3, #22
 80098d2:	d402      	bmi.n	80098da <_fflush_r+0x32>
 80098d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098d6:	f7fd fae4 	bl	8006ea2 <__retarget_lock_acquire_recursive>
 80098da:	4628      	mov	r0, r5
 80098dc:	4621      	mov	r1, r4
 80098de:	f7ff ff5f 	bl	80097a0 <__sflush_r>
 80098e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098e4:	07da      	lsls	r2, r3, #31
 80098e6:	4605      	mov	r5, r0
 80098e8:	d4e4      	bmi.n	80098b4 <_fflush_r+0xc>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	059b      	lsls	r3, r3, #22
 80098ee:	d4e1      	bmi.n	80098b4 <_fflush_r+0xc>
 80098f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098f2:	f7fd fad7 	bl	8006ea4 <__retarget_lock_release_recursive>
 80098f6:	e7dd      	b.n	80098b4 <_fflush_r+0xc>

080098f8 <__swhatbuf_r>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2900      	cmp	r1, #0
 8009902:	b096      	sub	sp, #88	@ 0x58
 8009904:	4615      	mov	r5, r2
 8009906:	461e      	mov	r6, r3
 8009908:	da0d      	bge.n	8009926 <__swhatbuf_r+0x2e>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009910:	f04f 0100 	mov.w	r1, #0
 8009914:	bf14      	ite	ne
 8009916:	2340      	movne	r3, #64	@ 0x40
 8009918:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800991c:	2000      	movs	r0, #0
 800991e:	6031      	str	r1, [r6, #0]
 8009920:	602b      	str	r3, [r5, #0]
 8009922:	b016      	add	sp, #88	@ 0x58
 8009924:	bd70      	pop	{r4, r5, r6, pc}
 8009926:	466a      	mov	r2, sp
 8009928:	f000 f874 	bl	8009a14 <_fstat_r>
 800992c:	2800      	cmp	r0, #0
 800992e:	dbec      	blt.n	800990a <__swhatbuf_r+0x12>
 8009930:	9901      	ldr	r1, [sp, #4]
 8009932:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009936:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800993a:	4259      	negs	r1, r3
 800993c:	4159      	adcs	r1, r3
 800993e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009942:	e7eb      	b.n	800991c <__swhatbuf_r+0x24>

08009944 <__smakebuf_r>:
 8009944:	898b      	ldrh	r3, [r1, #12]
 8009946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009948:	079d      	lsls	r5, r3, #30
 800994a:	4606      	mov	r6, r0
 800994c:	460c      	mov	r4, r1
 800994e:	d507      	bpl.n	8009960 <__smakebuf_r+0x1c>
 8009950:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	2301      	movs	r3, #1
 800995a:	6163      	str	r3, [r4, #20]
 800995c:	b003      	add	sp, #12
 800995e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009960:	ab01      	add	r3, sp, #4
 8009962:	466a      	mov	r2, sp
 8009964:	f7ff ffc8 	bl	80098f8 <__swhatbuf_r>
 8009968:	9f00      	ldr	r7, [sp, #0]
 800996a:	4605      	mov	r5, r0
 800996c:	4639      	mov	r1, r7
 800996e:	4630      	mov	r0, r6
 8009970:	f7fc f8e8 	bl	8005b44 <_malloc_r>
 8009974:	b948      	cbnz	r0, 800998a <__smakebuf_r+0x46>
 8009976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997a:	059a      	lsls	r2, r3, #22
 800997c:	d4ee      	bmi.n	800995c <__smakebuf_r+0x18>
 800997e:	f023 0303 	bic.w	r3, r3, #3
 8009982:	f043 0302 	orr.w	r3, r3, #2
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	e7e2      	b.n	8009950 <__smakebuf_r+0xc>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	6020      	str	r0, [r4, #0]
 800998e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009992:	81a3      	strh	r3, [r4, #12]
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800999a:	b15b      	cbz	r3, 80099b4 <__smakebuf_r+0x70>
 800999c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a0:	4630      	mov	r0, r6
 80099a2:	f000 f849 	bl	8009a38 <_isatty_r>
 80099a6:	b128      	cbz	r0, 80099b4 <__smakebuf_r+0x70>
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	f023 0303 	bic.w	r3, r3, #3
 80099ae:	f043 0301 	orr.w	r3, r3, #1
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	431d      	orrs	r5, r3
 80099b8:	81a5      	strh	r5, [r4, #12]
 80099ba:	e7cf      	b.n	800995c <__smakebuf_r+0x18>

080099bc <memmove>:
 80099bc:	4288      	cmp	r0, r1
 80099be:	b510      	push	{r4, lr}
 80099c0:	eb01 0402 	add.w	r4, r1, r2
 80099c4:	d902      	bls.n	80099cc <memmove+0x10>
 80099c6:	4284      	cmp	r4, r0
 80099c8:	4623      	mov	r3, r4
 80099ca:	d807      	bhi.n	80099dc <memmove+0x20>
 80099cc:	1e43      	subs	r3, r0, #1
 80099ce:	42a1      	cmp	r1, r4
 80099d0:	d008      	beq.n	80099e4 <memmove+0x28>
 80099d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099da:	e7f8      	b.n	80099ce <memmove+0x12>
 80099dc:	4402      	add	r2, r0
 80099de:	4601      	mov	r1, r0
 80099e0:	428a      	cmp	r2, r1
 80099e2:	d100      	bne.n	80099e6 <memmove+0x2a>
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ee:	e7f7      	b.n	80099e0 <memmove+0x24>

080099f0 <strncmp>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	b16a      	cbz	r2, 8009a10 <strncmp+0x20>
 80099f4:	3901      	subs	r1, #1
 80099f6:	1884      	adds	r4, r0, r2
 80099f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d103      	bne.n	8009a0c <strncmp+0x1c>
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d001      	beq.n	8009a0c <strncmp+0x1c>
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	d1f5      	bne.n	80099f8 <strncmp+0x8>
 8009a0c:	1ad0      	subs	r0, r2, r3
 8009a0e:	bd10      	pop	{r4, pc}
 8009a10:	4610      	mov	r0, r2
 8009a12:	e7fc      	b.n	8009a0e <strncmp+0x1e>

08009a14 <_fstat_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	@ (8009a34 <_fstat_r+0x20>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	f7f8 facd 	bl	8001fc0 <_fstat>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d102      	bne.n	8009a30 <_fstat_r+0x1c>
 8009a2a:	682b      	ldr	r3, [r5, #0]
 8009a2c:	b103      	cbz	r3, 8009a30 <_fstat_r+0x1c>
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	bd38      	pop	{r3, r4, r5, pc}
 8009a32:	bf00      	nop
 8009a34:	20000594 	.word	0x20000594

08009a38 <_isatty_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	@ (8009a54 <_isatty_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f8 facc 	bl	8001fe0 <_isatty>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_isatty_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_isatty_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20000594 	.word	0x20000594

08009a58 <nan>:
 8009a58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a60 <nan+0x8>
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	00000000 	.word	0x00000000
 8009a64:	7ff80000 	.word	0x7ff80000

08009a68 <__assert_func>:
 8009a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	4b09      	ldr	r3, [pc, #36]	@ (8009a94 <__assert_func+0x2c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4605      	mov	r5, r0
 8009a74:	68d8      	ldr	r0, [r3, #12]
 8009a76:	b954      	cbnz	r4, 8009a8e <__assert_func+0x26>
 8009a78:	4b07      	ldr	r3, [pc, #28]	@ (8009a98 <__assert_func+0x30>)
 8009a7a:	461c      	mov	r4, r3
 8009a7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a80:	9100      	str	r1, [sp, #0]
 8009a82:	462b      	mov	r3, r5
 8009a84:	4905      	ldr	r1, [pc, #20]	@ (8009a9c <__assert_func+0x34>)
 8009a86:	f000 fba7 	bl	800a1d8 <fiprintf>
 8009a8a:	f000 fbb7 	bl	800a1fc <abort>
 8009a8e:	4b04      	ldr	r3, [pc, #16]	@ (8009aa0 <__assert_func+0x38>)
 8009a90:	e7f4      	b.n	8009a7c <__assert_func+0x14>
 8009a92:	bf00      	nop
 8009a94:	2000001c 	.word	0x2000001c
 8009a98:	0800a755 	.word	0x0800a755
 8009a9c:	0800a727 	.word	0x0800a727
 8009aa0:	0800a71a 	.word	0x0800a71a

08009aa4 <_calloc_r>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	fba1 5402 	umull	r5, r4, r1, r2
 8009aaa:	b93c      	cbnz	r4, 8009abc <_calloc_r+0x18>
 8009aac:	4629      	mov	r1, r5
 8009aae:	f7fc f849 	bl	8005b44 <_malloc_r>
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	b928      	cbnz	r0, 8009ac2 <_calloc_r+0x1e>
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	220c      	movs	r2, #12
 8009abe:	6002      	str	r2, [r0, #0]
 8009ac0:	e7f9      	b.n	8009ab6 <_calloc_r+0x12>
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f7fd f95f 	bl	8006d88 <memset>
 8009aca:	e7f5      	b.n	8009ab8 <_calloc_r+0x14>

08009acc <rshift>:
 8009acc:	6903      	ldr	r3, [r0, #16]
 8009ace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ada:	f100 0414 	add.w	r4, r0, #20
 8009ade:	dd45      	ble.n	8009b6c <rshift+0xa0>
 8009ae0:	f011 011f 	ands.w	r1, r1, #31
 8009ae4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ae8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aec:	d10c      	bne.n	8009b08 <rshift+0x3c>
 8009aee:	f100 0710 	add.w	r7, r0, #16
 8009af2:	4629      	mov	r1, r5
 8009af4:	42b1      	cmp	r1, r6
 8009af6:	d334      	bcc.n	8009b62 <rshift+0x96>
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	1eea      	subs	r2, r5, #3
 8009afe:	4296      	cmp	r6, r2
 8009b00:	bf38      	it	cc
 8009b02:	2300      	movcc	r3, #0
 8009b04:	4423      	add	r3, r4
 8009b06:	e015      	b.n	8009b34 <rshift+0x68>
 8009b08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b0c:	f1c1 0820 	rsb	r8, r1, #32
 8009b10:	40cf      	lsrs	r7, r1
 8009b12:	f105 0e04 	add.w	lr, r5, #4
 8009b16:	46a1      	mov	r9, r4
 8009b18:	4576      	cmp	r6, lr
 8009b1a:	46f4      	mov	ip, lr
 8009b1c:	d815      	bhi.n	8009b4a <rshift+0x7e>
 8009b1e:	1a9a      	subs	r2, r3, r2
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	3a04      	subs	r2, #4
 8009b24:	3501      	adds	r5, #1
 8009b26:	42ae      	cmp	r6, r5
 8009b28:	bf38      	it	cc
 8009b2a:	2200      	movcc	r2, #0
 8009b2c:	18a3      	adds	r3, r4, r2
 8009b2e:	50a7      	str	r7, [r4, r2]
 8009b30:	b107      	cbz	r7, 8009b34 <rshift+0x68>
 8009b32:	3304      	adds	r3, #4
 8009b34:	1b1a      	subs	r2, r3, r4
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b3c:	bf08      	it	eq
 8009b3e:	2300      	moveq	r3, #0
 8009b40:	6102      	str	r2, [r0, #16]
 8009b42:	bf08      	it	eq
 8009b44:	6143      	streq	r3, [r0, #20]
 8009b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	f8dc c000 	ldr.w	ip, [ip]
 8009b4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b52:	ea4c 0707 	orr.w	r7, ip, r7
 8009b56:	f849 7b04 	str.w	r7, [r9], #4
 8009b5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b5e:	40cf      	lsrs	r7, r1
 8009b60:	e7da      	b.n	8009b18 <rshift+0x4c>
 8009b62:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b66:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b6a:	e7c3      	b.n	8009af4 <rshift+0x28>
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	e7e1      	b.n	8009b34 <rshift+0x68>

08009b70 <__hexdig_fun>:
 8009b70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d802      	bhi.n	8009b7e <__hexdig_fun+0xe>
 8009b78:	3820      	subs	r0, #32
 8009b7a:	b2c0      	uxtb	r0, r0
 8009b7c:	4770      	bx	lr
 8009b7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d801      	bhi.n	8009b8a <__hexdig_fun+0x1a>
 8009b86:	3847      	subs	r0, #71	@ 0x47
 8009b88:	e7f7      	b.n	8009b7a <__hexdig_fun+0xa>
 8009b8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b8e:	2b05      	cmp	r3, #5
 8009b90:	d801      	bhi.n	8009b96 <__hexdig_fun+0x26>
 8009b92:	3827      	subs	r0, #39	@ 0x27
 8009b94:	e7f1      	b.n	8009b7a <__hexdig_fun+0xa>
 8009b96:	2000      	movs	r0, #0
 8009b98:	4770      	bx	lr
	...

08009b9c <__gethex>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	468a      	mov	sl, r1
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	680b      	ldr	r3, [r1, #0]
 8009ba8:	9001      	str	r0, [sp, #4]
 8009baa:	4690      	mov	r8, r2
 8009bac:	1c9c      	adds	r4, r3, #2
 8009bae:	46a1      	mov	r9, r4
 8009bb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009bb4:	2830      	cmp	r0, #48	@ 0x30
 8009bb6:	d0fa      	beq.n	8009bae <__gethex+0x12>
 8009bb8:	eba9 0303 	sub.w	r3, r9, r3
 8009bbc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009bc0:	f7ff ffd6 	bl	8009b70 <__hexdig_fun>
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d168      	bne.n	8009c9c <__gethex+0x100>
 8009bca:	49a0      	ldr	r1, [pc, #640]	@ (8009e4c <__gethex+0x2b0>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4648      	mov	r0, r9
 8009bd0:	f7ff ff0e 	bl	80099f0 <strncmp>
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d167      	bne.n	8009caa <__gethex+0x10e>
 8009bda:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009bde:	4626      	mov	r6, r4
 8009be0:	f7ff ffc6 	bl	8009b70 <__hexdig_fun>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d062      	beq.n	8009cae <__gethex+0x112>
 8009be8:	4623      	mov	r3, r4
 8009bea:	7818      	ldrb	r0, [r3, #0]
 8009bec:	2830      	cmp	r0, #48	@ 0x30
 8009bee:	4699      	mov	r9, r3
 8009bf0:	f103 0301 	add.w	r3, r3, #1
 8009bf4:	d0f9      	beq.n	8009bea <__gethex+0x4e>
 8009bf6:	f7ff ffbb 	bl	8009b70 <__hexdig_fun>
 8009bfa:	fab0 f580 	clz	r5, r0
 8009bfe:	096d      	lsrs	r5, r5, #5
 8009c00:	f04f 0b01 	mov.w	fp, #1
 8009c04:	464a      	mov	r2, r9
 8009c06:	4616      	mov	r6, r2
 8009c08:	3201      	adds	r2, #1
 8009c0a:	7830      	ldrb	r0, [r6, #0]
 8009c0c:	f7ff ffb0 	bl	8009b70 <__hexdig_fun>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1f8      	bne.n	8009c06 <__gethex+0x6a>
 8009c14:	498d      	ldr	r1, [pc, #564]	@ (8009e4c <__gethex+0x2b0>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff fee9 	bl	80099f0 <strncmp>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d13f      	bne.n	8009ca2 <__gethex+0x106>
 8009c22:	b944      	cbnz	r4, 8009c36 <__gethex+0x9a>
 8009c24:	1c74      	adds	r4, r6, #1
 8009c26:	4622      	mov	r2, r4
 8009c28:	4616      	mov	r6, r2
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	7830      	ldrb	r0, [r6, #0]
 8009c2e:	f7ff ff9f 	bl	8009b70 <__hexdig_fun>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d1f8      	bne.n	8009c28 <__gethex+0x8c>
 8009c36:	1ba4      	subs	r4, r4, r6
 8009c38:	00a7      	lsls	r7, r4, #2
 8009c3a:	7833      	ldrb	r3, [r6, #0]
 8009c3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c40:	2b50      	cmp	r3, #80	@ 0x50
 8009c42:	d13e      	bne.n	8009cc2 <__gethex+0x126>
 8009c44:	7873      	ldrb	r3, [r6, #1]
 8009c46:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c48:	d033      	beq.n	8009cb2 <__gethex+0x116>
 8009c4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c4c:	d034      	beq.n	8009cb8 <__gethex+0x11c>
 8009c4e:	1c71      	adds	r1, r6, #1
 8009c50:	2400      	movs	r4, #0
 8009c52:	7808      	ldrb	r0, [r1, #0]
 8009c54:	f7ff ff8c 	bl	8009b70 <__hexdig_fun>
 8009c58:	1e43      	subs	r3, r0, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b18      	cmp	r3, #24
 8009c5e:	d830      	bhi.n	8009cc2 <__gethex+0x126>
 8009c60:	f1a0 0210 	sub.w	r2, r0, #16
 8009c64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c68:	f7ff ff82 	bl	8009b70 <__hexdig_fun>
 8009c6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c70:	fa5f fc8c 	uxtb.w	ip, ip
 8009c74:	f1bc 0f18 	cmp.w	ip, #24
 8009c78:	f04f 030a 	mov.w	r3, #10
 8009c7c:	d91e      	bls.n	8009cbc <__gethex+0x120>
 8009c7e:	b104      	cbz	r4, 8009c82 <__gethex+0xe6>
 8009c80:	4252      	negs	r2, r2
 8009c82:	4417      	add	r7, r2
 8009c84:	f8ca 1000 	str.w	r1, [sl]
 8009c88:	b1ed      	cbz	r5, 8009cc6 <__gethex+0x12a>
 8009c8a:	f1bb 0f00 	cmp.w	fp, #0
 8009c8e:	bf0c      	ite	eq
 8009c90:	2506      	moveq	r5, #6
 8009c92:	2500      	movne	r5, #0
 8009c94:	4628      	mov	r0, r5
 8009c96:	b005      	add	sp, #20
 8009c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	462c      	mov	r4, r5
 8009ca0:	e7b0      	b.n	8009c04 <__gethex+0x68>
 8009ca2:	2c00      	cmp	r4, #0
 8009ca4:	d1c7      	bne.n	8009c36 <__gethex+0x9a>
 8009ca6:	4627      	mov	r7, r4
 8009ca8:	e7c7      	b.n	8009c3a <__gethex+0x9e>
 8009caa:	464e      	mov	r6, r9
 8009cac:	462f      	mov	r7, r5
 8009cae:	2501      	movs	r5, #1
 8009cb0:	e7c3      	b.n	8009c3a <__gethex+0x9e>
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	1cb1      	adds	r1, r6, #2
 8009cb6:	e7cc      	b.n	8009c52 <__gethex+0xb6>
 8009cb8:	2401      	movs	r4, #1
 8009cba:	e7fb      	b.n	8009cb4 <__gethex+0x118>
 8009cbc:	fb03 0002 	mla	r0, r3, r2, r0
 8009cc0:	e7ce      	b.n	8009c60 <__gethex+0xc4>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	e7de      	b.n	8009c84 <__gethex+0xe8>
 8009cc6:	eba6 0309 	sub.w	r3, r6, r9
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	4629      	mov	r1, r5
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	dc0a      	bgt.n	8009ce8 <__gethex+0x14c>
 8009cd2:	9801      	ldr	r0, [sp, #4]
 8009cd4:	f7fd ff92 	bl	8007bfc <_Balloc>
 8009cd8:	4604      	mov	r4, r0
 8009cda:	b940      	cbnz	r0, 8009cee <__gethex+0x152>
 8009cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8009e50 <__gethex+0x2b4>)
 8009cde:	4602      	mov	r2, r0
 8009ce0:	21e4      	movs	r1, #228	@ 0xe4
 8009ce2:	485c      	ldr	r0, [pc, #368]	@ (8009e54 <__gethex+0x2b8>)
 8009ce4:	f7ff fec0 	bl	8009a68 <__assert_func>
 8009ce8:	3101      	adds	r1, #1
 8009cea:	105b      	asrs	r3, r3, #1
 8009cec:	e7ef      	b.n	8009cce <__gethex+0x132>
 8009cee:	f100 0a14 	add.w	sl, r0, #20
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4655      	mov	r5, sl
 8009cf6:	469b      	mov	fp, r3
 8009cf8:	45b1      	cmp	r9, r6
 8009cfa:	d337      	bcc.n	8009d6c <__gethex+0x1d0>
 8009cfc:	f845 bb04 	str.w	fp, [r5], #4
 8009d00:	eba5 050a 	sub.w	r5, r5, sl
 8009d04:	10ad      	asrs	r5, r5, #2
 8009d06:	6125      	str	r5, [r4, #16]
 8009d08:	4658      	mov	r0, fp
 8009d0a:	f7fe f869 	bl	8007de0 <__hi0bits>
 8009d0e:	016d      	lsls	r5, r5, #5
 8009d10:	f8d8 6000 	ldr.w	r6, [r8]
 8009d14:	1a2d      	subs	r5, r5, r0
 8009d16:	42b5      	cmp	r5, r6
 8009d18:	dd54      	ble.n	8009dc4 <__gethex+0x228>
 8009d1a:	1bad      	subs	r5, r5, r6
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7fe fbfd 	bl	800851e <__any_on>
 8009d24:	4681      	mov	r9, r0
 8009d26:	b178      	cbz	r0, 8009d48 <__gethex+0x1ac>
 8009d28:	1e6b      	subs	r3, r5, #1
 8009d2a:	1159      	asrs	r1, r3, #5
 8009d2c:	f003 021f 	and.w	r2, r3, #31
 8009d30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d34:	f04f 0901 	mov.w	r9, #1
 8009d38:	fa09 f202 	lsl.w	r2, r9, r2
 8009d3c:	420a      	tst	r2, r1
 8009d3e:	d003      	beq.n	8009d48 <__gethex+0x1ac>
 8009d40:	454b      	cmp	r3, r9
 8009d42:	dc36      	bgt.n	8009db2 <__gethex+0x216>
 8009d44:	f04f 0902 	mov.w	r9, #2
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff febe 	bl	8009acc <rshift>
 8009d50:	442f      	add	r7, r5
 8009d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d56:	42bb      	cmp	r3, r7
 8009d58:	da42      	bge.n	8009de0 <__gethex+0x244>
 8009d5a:	9801      	ldr	r0, [sp, #4]
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	f7fd ff8d 	bl	8007c7c <_Bfree>
 8009d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d64:	2300      	movs	r3, #0
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	25a3      	movs	r5, #163	@ 0xa3
 8009d6a:	e793      	b.n	8009c94 <__gethex+0xf8>
 8009d6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d70:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d72:	d012      	beq.n	8009d9a <__gethex+0x1fe>
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d104      	bne.n	8009d82 <__gethex+0x1e6>
 8009d78:	f845 bb04 	str.w	fp, [r5], #4
 8009d7c:	f04f 0b00 	mov.w	fp, #0
 8009d80:	465b      	mov	r3, fp
 8009d82:	7830      	ldrb	r0, [r6, #0]
 8009d84:	9303      	str	r3, [sp, #12]
 8009d86:	f7ff fef3 	bl	8009b70 <__hexdig_fun>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	f000 000f 	and.w	r0, r0, #15
 8009d90:	4098      	lsls	r0, r3
 8009d92:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d96:	3304      	adds	r3, #4
 8009d98:	e7ae      	b.n	8009cf8 <__gethex+0x15c>
 8009d9a:	45b1      	cmp	r9, r6
 8009d9c:	d8ea      	bhi.n	8009d74 <__gethex+0x1d8>
 8009d9e:	492b      	ldr	r1, [pc, #172]	@ (8009e4c <__gethex+0x2b0>)
 8009da0:	9303      	str	r3, [sp, #12]
 8009da2:	2201      	movs	r2, #1
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff fe23 	bl	80099f0 <strncmp>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d1e1      	bne.n	8009d74 <__gethex+0x1d8>
 8009db0:	e7a2      	b.n	8009cf8 <__gethex+0x15c>
 8009db2:	1ea9      	subs	r1, r5, #2
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7fe fbb2 	bl	800851e <__any_on>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d0c2      	beq.n	8009d44 <__gethex+0x1a8>
 8009dbe:	f04f 0903 	mov.w	r9, #3
 8009dc2:	e7c1      	b.n	8009d48 <__gethex+0x1ac>
 8009dc4:	da09      	bge.n	8009dda <__gethex+0x23e>
 8009dc6:	1b75      	subs	r5, r6, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	9801      	ldr	r0, [sp, #4]
 8009dcc:	462a      	mov	r2, r5
 8009dce:	f7fe f96d 	bl	80080ac <__lshift>
 8009dd2:	1b7f      	subs	r7, r7, r5
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	f100 0a14 	add.w	sl, r0, #20
 8009dda:	f04f 0900 	mov.w	r9, #0
 8009dde:	e7b8      	b.n	8009d52 <__gethex+0x1b6>
 8009de0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009de4:	42bd      	cmp	r5, r7
 8009de6:	dd6f      	ble.n	8009ec8 <__gethex+0x32c>
 8009de8:	1bed      	subs	r5, r5, r7
 8009dea:	42ae      	cmp	r6, r5
 8009dec:	dc34      	bgt.n	8009e58 <__gethex+0x2bc>
 8009dee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d022      	beq.n	8009e3c <__gethex+0x2a0>
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d024      	beq.n	8009e44 <__gethex+0x2a8>
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d115      	bne.n	8009e2a <__gethex+0x28e>
 8009dfe:	42ae      	cmp	r6, r5
 8009e00:	d113      	bne.n	8009e2a <__gethex+0x28e>
 8009e02:	2e01      	cmp	r6, #1
 8009e04:	d10b      	bne.n	8009e1e <__gethex+0x282>
 8009e06:	9a02      	ldr	r2, [sp, #8]
 8009e08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	2301      	movs	r3, #1
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	f8ca 3000 	str.w	r3, [sl]
 8009e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e18:	2562      	movs	r5, #98	@ 0x62
 8009e1a:	601c      	str	r4, [r3, #0]
 8009e1c:	e73a      	b.n	8009c94 <__gethex+0xf8>
 8009e1e:	1e71      	subs	r1, r6, #1
 8009e20:	4620      	mov	r0, r4
 8009e22:	f7fe fb7c 	bl	800851e <__any_on>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d1ed      	bne.n	8009e06 <__gethex+0x26a>
 8009e2a:	9801      	ldr	r0, [sp, #4]
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f7fd ff25 	bl	8007c7c <_Bfree>
 8009e32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e34:	2300      	movs	r3, #0
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	2550      	movs	r5, #80	@ 0x50
 8009e3a:	e72b      	b.n	8009c94 <__gethex+0xf8>
 8009e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1f3      	bne.n	8009e2a <__gethex+0x28e>
 8009e42:	e7e0      	b.n	8009e06 <__gethex+0x26a>
 8009e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1dd      	bne.n	8009e06 <__gethex+0x26a>
 8009e4a:	e7ee      	b.n	8009e2a <__gethex+0x28e>
 8009e4c:	0800a5a8 	.word	0x0800a5a8
 8009e50:	0800a441 	.word	0x0800a441
 8009e54:	0800a756 	.word	0x0800a756
 8009e58:	1e6f      	subs	r7, r5, #1
 8009e5a:	f1b9 0f00 	cmp.w	r9, #0
 8009e5e:	d130      	bne.n	8009ec2 <__gethex+0x326>
 8009e60:	b127      	cbz	r7, 8009e6c <__gethex+0x2d0>
 8009e62:	4639      	mov	r1, r7
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7fe fb5a 	bl	800851e <__any_on>
 8009e6a:	4681      	mov	r9, r0
 8009e6c:	117a      	asrs	r2, r7, #5
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e74:	f007 071f 	and.w	r7, r7, #31
 8009e78:	40bb      	lsls	r3, r7
 8009e7a:	4213      	tst	r3, r2
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	4620      	mov	r0, r4
 8009e80:	bf18      	it	ne
 8009e82:	f049 0902 	orrne.w	r9, r9, #2
 8009e86:	f7ff fe21 	bl	8009acc <rshift>
 8009e8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e8e:	1b76      	subs	r6, r6, r5
 8009e90:	2502      	movs	r5, #2
 8009e92:	f1b9 0f00 	cmp.w	r9, #0
 8009e96:	d047      	beq.n	8009f28 <__gethex+0x38c>
 8009e98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d015      	beq.n	8009ecc <__gethex+0x330>
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d017      	beq.n	8009ed4 <__gethex+0x338>
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d109      	bne.n	8009ebc <__gethex+0x320>
 8009ea8:	f019 0f02 	tst.w	r9, #2
 8009eac:	d006      	beq.n	8009ebc <__gethex+0x320>
 8009eae:	f8da 3000 	ldr.w	r3, [sl]
 8009eb2:	ea49 0903 	orr.w	r9, r9, r3
 8009eb6:	f019 0f01 	tst.w	r9, #1
 8009eba:	d10e      	bne.n	8009eda <__gethex+0x33e>
 8009ebc:	f045 0510 	orr.w	r5, r5, #16
 8009ec0:	e032      	b.n	8009f28 <__gethex+0x38c>
 8009ec2:	f04f 0901 	mov.w	r9, #1
 8009ec6:	e7d1      	b.n	8009e6c <__gethex+0x2d0>
 8009ec8:	2501      	movs	r5, #1
 8009eca:	e7e2      	b.n	8009e92 <__gethex+0x2f6>
 8009ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ece:	f1c3 0301 	rsb	r3, r3, #1
 8009ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0f0      	beq.n	8009ebc <__gethex+0x320>
 8009eda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ede:	f104 0314 	add.w	r3, r4, #20
 8009ee2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ee6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009eea:	f04f 0c00 	mov.w	ip, #0
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ef8:	d01b      	beq.n	8009f32 <__gethex+0x396>
 8009efa:	3201      	adds	r2, #1
 8009efc:	6002      	str	r2, [r0, #0]
 8009efe:	2d02      	cmp	r5, #2
 8009f00:	f104 0314 	add.w	r3, r4, #20
 8009f04:	d13c      	bne.n	8009f80 <__gethex+0x3e4>
 8009f06:	f8d8 2000 	ldr.w	r2, [r8]
 8009f0a:	3a01      	subs	r2, #1
 8009f0c:	42b2      	cmp	r2, r6
 8009f0e:	d109      	bne.n	8009f24 <__gethex+0x388>
 8009f10:	1171      	asrs	r1, r6, #5
 8009f12:	2201      	movs	r2, #1
 8009f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f18:	f006 061f 	and.w	r6, r6, #31
 8009f1c:	fa02 f606 	lsl.w	r6, r2, r6
 8009f20:	421e      	tst	r6, r3
 8009f22:	d13a      	bne.n	8009f9a <__gethex+0x3fe>
 8009f24:	f045 0520 	orr.w	r5, r5, #32
 8009f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f2a:	601c      	str	r4, [r3, #0]
 8009f2c:	9b02      	ldr	r3, [sp, #8]
 8009f2e:	601f      	str	r7, [r3, #0]
 8009f30:	e6b0      	b.n	8009c94 <__gethex+0xf8>
 8009f32:	4299      	cmp	r1, r3
 8009f34:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f38:	d8d9      	bhi.n	8009eee <__gethex+0x352>
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	459b      	cmp	fp, r3
 8009f3e:	db17      	blt.n	8009f70 <__gethex+0x3d4>
 8009f40:	6861      	ldr	r1, [r4, #4]
 8009f42:	9801      	ldr	r0, [sp, #4]
 8009f44:	3101      	adds	r1, #1
 8009f46:	f7fd fe59 	bl	8007bfc <_Balloc>
 8009f4a:	4681      	mov	r9, r0
 8009f4c:	b918      	cbnz	r0, 8009f56 <__gethex+0x3ba>
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb8 <__gethex+0x41c>)
 8009f50:	4602      	mov	r2, r0
 8009f52:	2184      	movs	r1, #132	@ 0x84
 8009f54:	e6c5      	b.n	8009ce2 <__gethex+0x146>
 8009f56:	6922      	ldr	r2, [r4, #16]
 8009f58:	3202      	adds	r2, #2
 8009f5a:	f104 010c 	add.w	r1, r4, #12
 8009f5e:	0092      	lsls	r2, r2, #2
 8009f60:	300c      	adds	r0, #12
 8009f62:	f7fc ffa0 	bl	8006ea6 <memcpy>
 8009f66:	4621      	mov	r1, r4
 8009f68:	9801      	ldr	r0, [sp, #4]
 8009f6a:	f7fd fe87 	bl	8007c7c <_Bfree>
 8009f6e:	464c      	mov	r4, r9
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	1c5a      	adds	r2, r3, #1
 8009f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f78:	6122      	str	r2, [r4, #16]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	615a      	str	r2, [r3, #20]
 8009f7e:	e7be      	b.n	8009efe <__gethex+0x362>
 8009f80:	6922      	ldr	r2, [r4, #16]
 8009f82:	455a      	cmp	r2, fp
 8009f84:	dd0b      	ble.n	8009f9e <__gethex+0x402>
 8009f86:	2101      	movs	r1, #1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f7ff fd9f 	bl	8009acc <rshift>
 8009f8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f92:	3701      	adds	r7, #1
 8009f94:	42bb      	cmp	r3, r7
 8009f96:	f6ff aee0 	blt.w	8009d5a <__gethex+0x1be>
 8009f9a:	2501      	movs	r5, #1
 8009f9c:	e7c2      	b.n	8009f24 <__gethex+0x388>
 8009f9e:	f016 061f 	ands.w	r6, r6, #31
 8009fa2:	d0fa      	beq.n	8009f9a <__gethex+0x3fe>
 8009fa4:	4453      	add	r3, sl
 8009fa6:	f1c6 0620 	rsb	r6, r6, #32
 8009faa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fae:	f7fd ff17 	bl	8007de0 <__hi0bits>
 8009fb2:	42b0      	cmp	r0, r6
 8009fb4:	dbe7      	blt.n	8009f86 <__gethex+0x3ea>
 8009fb6:	e7f0      	b.n	8009f9a <__gethex+0x3fe>
 8009fb8:	0800a441 	.word	0x0800a441

08009fbc <L_shift>:
 8009fbc:	f1c2 0208 	rsb	r2, r2, #8
 8009fc0:	0092      	lsls	r2, r2, #2
 8009fc2:	b570      	push	{r4, r5, r6, lr}
 8009fc4:	f1c2 0620 	rsb	r6, r2, #32
 8009fc8:	6843      	ldr	r3, [r0, #4]
 8009fca:	6804      	ldr	r4, [r0, #0]
 8009fcc:	fa03 f506 	lsl.w	r5, r3, r6
 8009fd0:	432c      	orrs	r4, r5
 8009fd2:	40d3      	lsrs	r3, r2
 8009fd4:	6004      	str	r4, [r0, #0]
 8009fd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fda:	4288      	cmp	r0, r1
 8009fdc:	d3f4      	bcc.n	8009fc8 <L_shift+0xc>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}

08009fe0 <__match>:
 8009fe0:	b530      	push	{r4, r5, lr}
 8009fe2:	6803      	ldr	r3, [r0, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fea:	b914      	cbnz	r4, 8009ff2 <__match+0x12>
 8009fec:	6003      	str	r3, [r0, #0]
 8009fee:	2001      	movs	r0, #1
 8009ff0:	bd30      	pop	{r4, r5, pc}
 8009ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009ffa:	2d19      	cmp	r5, #25
 8009ffc:	bf98      	it	ls
 8009ffe:	3220      	addls	r2, #32
 800a000:	42a2      	cmp	r2, r4
 800a002:	d0f0      	beq.n	8009fe6 <__match+0x6>
 800a004:	2000      	movs	r0, #0
 800a006:	e7f3      	b.n	8009ff0 <__match+0x10>

0800a008 <__hexnan>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	680b      	ldr	r3, [r1, #0]
 800a00e:	6801      	ldr	r1, [r0, #0]
 800a010:	115e      	asrs	r6, r3, #5
 800a012:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a016:	f013 031f 	ands.w	r3, r3, #31
 800a01a:	b087      	sub	sp, #28
 800a01c:	bf18      	it	ne
 800a01e:	3604      	addne	r6, #4
 800a020:	2500      	movs	r5, #0
 800a022:	1f37      	subs	r7, r6, #4
 800a024:	4682      	mov	sl, r0
 800a026:	4690      	mov	r8, r2
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a02e:	46b9      	mov	r9, r7
 800a030:	463c      	mov	r4, r7
 800a032:	9502      	str	r5, [sp, #8]
 800a034:	46ab      	mov	fp, r5
 800a036:	784a      	ldrb	r2, [r1, #1]
 800a038:	1c4b      	adds	r3, r1, #1
 800a03a:	9303      	str	r3, [sp, #12]
 800a03c:	b342      	cbz	r2, 800a090 <__hexnan+0x88>
 800a03e:	4610      	mov	r0, r2
 800a040:	9105      	str	r1, [sp, #20]
 800a042:	9204      	str	r2, [sp, #16]
 800a044:	f7ff fd94 	bl	8009b70 <__hexdig_fun>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d151      	bne.n	800a0f0 <__hexnan+0xe8>
 800a04c:	9a04      	ldr	r2, [sp, #16]
 800a04e:	9905      	ldr	r1, [sp, #20]
 800a050:	2a20      	cmp	r2, #32
 800a052:	d818      	bhi.n	800a086 <__hexnan+0x7e>
 800a054:	9b02      	ldr	r3, [sp, #8]
 800a056:	459b      	cmp	fp, r3
 800a058:	dd13      	ble.n	800a082 <__hexnan+0x7a>
 800a05a:	454c      	cmp	r4, r9
 800a05c:	d206      	bcs.n	800a06c <__hexnan+0x64>
 800a05e:	2d07      	cmp	r5, #7
 800a060:	dc04      	bgt.n	800a06c <__hexnan+0x64>
 800a062:	462a      	mov	r2, r5
 800a064:	4649      	mov	r1, r9
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff ffa8 	bl	8009fbc <L_shift>
 800a06c:	4544      	cmp	r4, r8
 800a06e:	d952      	bls.n	800a116 <__hexnan+0x10e>
 800a070:	2300      	movs	r3, #0
 800a072:	f1a4 0904 	sub.w	r9, r4, #4
 800a076:	f844 3c04 	str.w	r3, [r4, #-4]
 800a07a:	f8cd b008 	str.w	fp, [sp, #8]
 800a07e:	464c      	mov	r4, r9
 800a080:	461d      	mov	r5, r3
 800a082:	9903      	ldr	r1, [sp, #12]
 800a084:	e7d7      	b.n	800a036 <__hexnan+0x2e>
 800a086:	2a29      	cmp	r2, #41	@ 0x29
 800a088:	d157      	bne.n	800a13a <__hexnan+0x132>
 800a08a:	3102      	adds	r1, #2
 800a08c:	f8ca 1000 	str.w	r1, [sl]
 800a090:	f1bb 0f00 	cmp.w	fp, #0
 800a094:	d051      	beq.n	800a13a <__hexnan+0x132>
 800a096:	454c      	cmp	r4, r9
 800a098:	d206      	bcs.n	800a0a8 <__hexnan+0xa0>
 800a09a:	2d07      	cmp	r5, #7
 800a09c:	dc04      	bgt.n	800a0a8 <__hexnan+0xa0>
 800a09e:	462a      	mov	r2, r5
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f7ff ff8a 	bl	8009fbc <L_shift>
 800a0a8:	4544      	cmp	r4, r8
 800a0aa:	d936      	bls.n	800a11a <__hexnan+0x112>
 800a0ac:	f1a8 0204 	sub.w	r2, r8, #4
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0ba:	429f      	cmp	r7, r3
 800a0bc:	d2f9      	bcs.n	800a0b2 <__hexnan+0xaa>
 800a0be:	1b3b      	subs	r3, r7, r4
 800a0c0:	f023 0303 	bic.w	r3, r3, #3
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	3401      	adds	r4, #1
 800a0c8:	3e03      	subs	r6, #3
 800a0ca:	42b4      	cmp	r4, r6
 800a0cc:	bf88      	it	hi
 800a0ce:	2304      	movhi	r3, #4
 800a0d0:	4443      	add	r3, r8
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f843 2b04 	str.w	r2, [r3], #4
 800a0d8:	429f      	cmp	r7, r3
 800a0da:	d2fb      	bcs.n	800a0d4 <__hexnan+0xcc>
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	b91b      	cbnz	r3, 800a0e8 <__hexnan+0xe0>
 800a0e0:	4547      	cmp	r7, r8
 800a0e2:	d128      	bne.n	800a136 <__hexnan+0x12e>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	2005      	movs	r0, #5
 800a0ea:	b007      	add	sp, #28
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	2d08      	cmp	r5, #8
 800a0f4:	f10b 0b01 	add.w	fp, fp, #1
 800a0f8:	dd06      	ble.n	800a108 <__hexnan+0x100>
 800a0fa:	4544      	cmp	r4, r8
 800a0fc:	d9c1      	bls.n	800a082 <__hexnan+0x7a>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f844 3c04 	str.w	r3, [r4, #-4]
 800a104:	2501      	movs	r5, #1
 800a106:	3c04      	subs	r4, #4
 800a108:	6822      	ldr	r2, [r4, #0]
 800a10a:	f000 000f 	and.w	r0, r0, #15
 800a10e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a112:	6020      	str	r0, [r4, #0]
 800a114:	e7b5      	b.n	800a082 <__hexnan+0x7a>
 800a116:	2508      	movs	r5, #8
 800a118:	e7b3      	b.n	800a082 <__hexnan+0x7a>
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0dd      	beq.n	800a0dc <__hexnan+0xd4>
 800a120:	f1c3 0320 	rsb	r3, r3, #32
 800a124:	f04f 32ff 	mov.w	r2, #4294967295
 800a128:	40da      	lsrs	r2, r3
 800a12a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a12e:	4013      	ands	r3, r2
 800a130:	f846 3c04 	str.w	r3, [r6, #-4]
 800a134:	e7d2      	b.n	800a0dc <__hexnan+0xd4>
 800a136:	3f04      	subs	r7, #4
 800a138:	e7d0      	b.n	800a0dc <__hexnan+0xd4>
 800a13a:	2004      	movs	r0, #4
 800a13c:	e7d5      	b.n	800a0ea <__hexnan+0xe2>

0800a13e <__ascii_mbtowc>:
 800a13e:	b082      	sub	sp, #8
 800a140:	b901      	cbnz	r1, 800a144 <__ascii_mbtowc+0x6>
 800a142:	a901      	add	r1, sp, #4
 800a144:	b142      	cbz	r2, 800a158 <__ascii_mbtowc+0x1a>
 800a146:	b14b      	cbz	r3, 800a15c <__ascii_mbtowc+0x1e>
 800a148:	7813      	ldrb	r3, [r2, #0]
 800a14a:	600b      	str	r3, [r1, #0]
 800a14c:	7812      	ldrb	r2, [r2, #0]
 800a14e:	1e10      	subs	r0, r2, #0
 800a150:	bf18      	it	ne
 800a152:	2001      	movne	r0, #1
 800a154:	b002      	add	sp, #8
 800a156:	4770      	bx	lr
 800a158:	4610      	mov	r0, r2
 800a15a:	e7fb      	b.n	800a154 <__ascii_mbtowc+0x16>
 800a15c:	f06f 0001 	mvn.w	r0, #1
 800a160:	e7f8      	b.n	800a154 <__ascii_mbtowc+0x16>

0800a162 <_realloc_r>:
 800a162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a166:	4680      	mov	r8, r0
 800a168:	4615      	mov	r5, r2
 800a16a:	460c      	mov	r4, r1
 800a16c:	b921      	cbnz	r1, 800a178 <_realloc_r+0x16>
 800a16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a172:	4611      	mov	r1, r2
 800a174:	f7fb bce6 	b.w	8005b44 <_malloc_r>
 800a178:	b92a      	cbnz	r2, 800a186 <_realloc_r+0x24>
 800a17a:	f7fd fcf5 	bl	8007b68 <_free_r>
 800a17e:	2400      	movs	r4, #0
 800a180:	4620      	mov	r0, r4
 800a182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a186:	f000 f840 	bl	800a20a <_malloc_usable_size_r>
 800a18a:	4285      	cmp	r5, r0
 800a18c:	4606      	mov	r6, r0
 800a18e:	d802      	bhi.n	800a196 <_realloc_r+0x34>
 800a190:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a194:	d8f4      	bhi.n	800a180 <_realloc_r+0x1e>
 800a196:	4629      	mov	r1, r5
 800a198:	4640      	mov	r0, r8
 800a19a:	f7fb fcd3 	bl	8005b44 <_malloc_r>
 800a19e:	4607      	mov	r7, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d0ec      	beq.n	800a17e <_realloc_r+0x1c>
 800a1a4:	42b5      	cmp	r5, r6
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	bf28      	it	cs
 800a1ac:	4632      	movcs	r2, r6
 800a1ae:	f7fc fe7a 	bl	8006ea6 <memcpy>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	f7fd fcd7 	bl	8007b68 <_free_r>
 800a1ba:	463c      	mov	r4, r7
 800a1bc:	e7e0      	b.n	800a180 <_realloc_r+0x1e>

0800a1be <__ascii_wctomb>:
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	b141      	cbz	r1, 800a1d6 <__ascii_wctomb+0x18>
 800a1c4:	2aff      	cmp	r2, #255	@ 0xff
 800a1c6:	d904      	bls.n	800a1d2 <__ascii_wctomb+0x14>
 800a1c8:	228a      	movs	r2, #138	@ 0x8a
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	4770      	bx	lr
 800a1d2:	700a      	strb	r2, [r1, #0]
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	4770      	bx	lr

0800a1d8 <fiprintf>:
 800a1d8:	b40e      	push	{r1, r2, r3}
 800a1da:	b503      	push	{r0, r1, lr}
 800a1dc:	4601      	mov	r1, r0
 800a1de:	ab03      	add	r3, sp, #12
 800a1e0:	4805      	ldr	r0, [pc, #20]	@ (800a1f8 <fiprintf+0x20>)
 800a1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e6:	6800      	ldr	r0, [r0, #0]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	f7ff f9c1 	bl	8009570 <_vfiprintf_r>
 800a1ee:	b002      	add	sp, #8
 800a1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f4:	b003      	add	sp, #12
 800a1f6:	4770      	bx	lr
 800a1f8:	2000001c 	.word	0x2000001c

0800a1fc <abort>:
 800a1fc:	b508      	push	{r3, lr}
 800a1fe:	2006      	movs	r0, #6
 800a200:	f000 f834 	bl	800a26c <raise>
 800a204:	2001      	movs	r0, #1
 800a206:	f7f7 fea7 	bl	8001f58 <_exit>

0800a20a <_malloc_usable_size_r>:
 800a20a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a20e:	1f18      	subs	r0, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfbc      	itt	lt
 800a214:	580b      	ldrlt	r3, [r1, r0]
 800a216:	18c0      	addlt	r0, r0, r3
 800a218:	4770      	bx	lr

0800a21a <_raise_r>:
 800a21a:	291f      	cmp	r1, #31
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4605      	mov	r5, r0
 800a220:	460c      	mov	r4, r1
 800a222:	d904      	bls.n	800a22e <_raise_r+0x14>
 800a224:	2316      	movs	r3, #22
 800a226:	6003      	str	r3, [r0, #0]
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	bd38      	pop	{r3, r4, r5, pc}
 800a22e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a230:	b112      	cbz	r2, 800a238 <_raise_r+0x1e>
 800a232:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a236:	b94b      	cbnz	r3, 800a24c <_raise_r+0x32>
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 f831 	bl	800a2a0 <_getpid_r>
 800a23e:	4622      	mov	r2, r4
 800a240:	4601      	mov	r1, r0
 800a242:	4628      	mov	r0, r5
 800a244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a248:	f000 b818 	b.w	800a27c <_kill_r>
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d00a      	beq.n	800a266 <_raise_r+0x4c>
 800a250:	1c59      	adds	r1, r3, #1
 800a252:	d103      	bne.n	800a25c <_raise_r+0x42>
 800a254:	2316      	movs	r3, #22
 800a256:	6003      	str	r3, [r0, #0]
 800a258:	2001      	movs	r0, #1
 800a25a:	e7e7      	b.n	800a22c <_raise_r+0x12>
 800a25c:	2100      	movs	r1, #0
 800a25e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a262:	4620      	mov	r0, r4
 800a264:	4798      	blx	r3
 800a266:	2000      	movs	r0, #0
 800a268:	e7e0      	b.n	800a22c <_raise_r+0x12>
	...

0800a26c <raise>:
 800a26c:	4b02      	ldr	r3, [pc, #8]	@ (800a278 <raise+0xc>)
 800a26e:	4601      	mov	r1, r0
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	f7ff bfd2 	b.w	800a21a <_raise_r>
 800a276:	bf00      	nop
 800a278:	2000001c 	.word	0x2000001c

0800a27c <_kill_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d07      	ldr	r5, [pc, #28]	@ (800a29c <_kill_r+0x20>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	4611      	mov	r1, r2
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	f7f7 fe55 	bl	8001f38 <_kill>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	d102      	bne.n	800a298 <_kill_r+0x1c>
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	b103      	cbz	r3, 800a298 <_kill_r+0x1c>
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	20000594 	.word	0x20000594

0800a2a0 <_getpid_r>:
 800a2a0:	f7f7 be42 	b.w	8001f28 <_getpid>

0800a2a4 <_init>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	bf00      	nop
 800a2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2aa:	bc08      	pop	{r3}
 800a2ac:	469e      	mov	lr, r3
 800a2ae:	4770      	bx	lr

0800a2b0 <_fini>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	bf00      	nop
 800a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b6:	bc08      	pop	{r3}
 800a2b8:	469e      	mov	lr, r3
 800a2ba:	4770      	bx	lr
